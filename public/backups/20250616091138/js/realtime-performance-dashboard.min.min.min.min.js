class RealTimePerformanceDashboard{constructor(){this.isVisible=false;this.isMinimized=false;this.charts={};this.metrics={fps: [],memory: [],cpu: [],network: [],animations: []};this.maxDataPoints=50;this.updateInterval=null;this.init();}init(){this.createDashboardUI();this.setupEventListeners();this.initializeCharts();this.startMonitoring();console.log('📊 Real-Time Performance Dashboard 已初始化');}createDashboardUI(){const dashboard=document.createElement('div');dashboard.id='performance-dashboard';dashboard.className='fixed top-4 right-4 z-50 bg-gray-900/95 backdrop-blur-md text-white rounded-lg border border-gray-700 shadow-2xl font-mono text-xs hidden';dashboard.style.width='400px';dashboard.style.minHeight='500px';dashboard.style.transition='all 0.3s ease';dashboard.innerHTML=` <!--仪表盘头部--> <div class="flex items-center justify-between bg-gray-800 px-4 py-3 rounded-t-lg border-b border-gray-700"> <div class="flex items-center space-x-2"> <div class="w-3 h-3 bg-green-500 rounded-full animate-pulse"></div> <h3 class="text-cyan-400 font-bold">实时性能监控</h3> </div> <div class="flex items-center space-x-2"> <button id="minimize-dashboard" class="text-yellow-400 hover:text-yellow-300 p-1"> <i class="fas fa-minus"></i> </button> <button id="settings-dashboard" class="text-blue-400 hover:text-blue-300 p-1"> <i class="fas fa-cog"></i> </button> <button id="close-dashboard" class="text-red-400 hover:text-red-300 p-1"> <i class="fas fa-times"></i> </button> </div> </div> <!--仪表盘内容--> <div id="dashboard-content" class="p-4 space-y-4"> <!--核心指标卡片--> <div class="grid grid-cols-2 gap-3"> <div class="bg-gradient-to-br from-blue-600/20 to-blue-800/20 p-3 rounded border border-blue-500/30"> <div class="flex items-center justify-between mb-2"> <span class="text-blue-400 text-xs">FPS</span> <i class="fas fa-chart-line text-blue-400"></i> </div> <div class="text-2xl font-bold text-white" id="fps-value">--</div> <div class="text-xs text-gray-400">帧每秒</div> </div> <div class="bg-gradient-to-br from-green-600/20 to-green-800/20 p-3 rounded border border-green-500/30"> <div class="flex items-center justify-between mb-2"> <span class="text-green-400 text-xs">内存</span> <i class="fas fa-memory text-green-400"></i> </div> <div class="text-2xl font-bold text-white" id="memory-value">--</div> <div class="text-xs text-gray-400">MB</div> </div> <div class="bg-gradient-to-br from-yellow-600/20 to-yellow-800/20 p-3 rounded border border-yellow-500/30"> <div class="flex items-center justify-between mb-2"> <span class="text-yellow-400 text-xs">CPU</span> <i class="fas fa-microchip text-yellow-400"></i> </div> <div class="text-2xl font-bold text-white" id="cpu-value">--</div> <div class="text-xs text-gray-400">%</div> </div> <div class="bg-gradient-to-br from-purple-600/20 to-purple-800/20 p-3 rounded border border-purple-500/30"> <div class="flex items-center justify-between mb-2"> <span class="text-purple-400 text-xs">网络</span> <i class="fas fa-wifi text-purple-400"></i> </div> <div class="text-2xl font-bold text-white" id="network-value">--</div> <div class="text-xs text-gray-400">ms</div> </div> </div> <!--实时图表--> <div class="space-y-3"> <div class="bg-gray-800 p-3 rounded border border-gray-700"> <h4 class="text-cyan-400 font-semibold mb-2 flex items-center"> <i class="fas fa-chart-area mr-2"></i>FPS 趋势 </h4> <canvas id="fps-chart" width="350" height="100" class="w-full"></canvas> </div> <div class="bg-gray-800 p-3 rounded border border-gray-700"> <h4 class="text-green-400 font-semibold mb-2 flex items-center"> <i class="fas fa-chart-area mr-2"></i>内存使用 </h4> <canvas id="memory-chart" width="350" height="100" class="w-full"></canvas> </div> <div class="bg-gray-800 p-3 rounded border border-gray-700"> <h4 class="text-yellow-400 font-semibold mb-2 flex items-center"> <i class="fas fa-chart-area mr-2"></i>CPU 负载 </h4> <canvas id="cpu-chart" width="350" height="100" class="w-full"></canvas> </div> </div> <!--系统状态--> <div class="bg-gray-800 p-3 rounded border border-gray-700"> <h4 class="text-orange-400 font-semibold mb-2 flex items-center"> <i class="fas fa-server mr-2"></i>系统状态 </h4> <div id="system-status-grid" class="space-y-2"> <!--系统状态将在这里显示--> </div> </div> <!--动画监控--> <div class="bg-gray-800 p-3 rounded border border-gray-700"> <h4 class="text-pink-400 font-semibold mb-2 flex items-center"> <i class="fas fa-play-circle mr-2"></i>动画监控 </h4> <div id="animation-status" class="space-y-1"> <!--动画状态将在这里显示--> </div> </div> <!--快速操作--> <div class="bg-gray-800 p-3 rounded border border-gray-700"> <h4 class="text-red-400 font-semibold mb-2 flex items-center"> <i class="fas fa-tools mr-2"></i>快速操作 </h4> <div class="grid grid-cols-2 gap-2"> <button id="clear-cache" class="bg-red-600 hover:bg-red-700 px-2 py-1 rounded text-xs transition-colors"> <i class="fas fa-trash mr-1"></i>清理缓存 </button> <button id="force-gc" class="bg-yellow-600 hover:bg-yellow-700 px-2 py-1 rounded text-xs transition-colors"> <i class="fas fa-recycle mr-1"></i>垃圾回收 </button> <button id="restart-animations" class="bg-blue-600 hover:bg-blue-700 px-2 py-1 rounded text-xs transition-colors"> <i class="fas fa-redo mr-1"></i>重启动画 </button> <button id="optimize-performance" class="bg-green-600 hover:bg-green-700 px-2 py-1 rounded text-xs transition-colors"> <i class="fas fa-rocket mr-1"></i>性能优化 </button> </div> </div> </div> <!--最小化状态--> <div id="minimized-content" class="p-2 hidden"> <div class="flex items-center justify-between"> <div class="flex items-center space-x-2"> <div class="w-2 h-2 bg-green-500 rounded-full animate-pulse"></div> <span class="text-xs">监控中</span> </div> <div class="flex items-center space-x-2 text-xs"> <span id="mini-fps">--</span> <span class="text-gray-400">FPS</span> <span id="mini-memory">--</span> <span class="text-gray-400">MB</span> </div> </div> </div> `;document.body.appendChild(dashboard);const floatingButton=document.createElement('button');floatingButton.id='dashboard-toggle';floatingButton.innerHTML='<i class="fas fa-chart-line"></i>';document.body.appendChild(floatingButton);if(window.floatingButtonsManager){window.floatingButtonsManager.registerButton('dashboard',{element: floatingButton,preferredPosition: 'top-right-1',type: 'dashboard',priority: 4,title: 'Toggle Performance Dashboard(Ctrl+Shift+P)',icon: 'fas fa-chart-line',onClick:()=>{this.toggle();}});}else{floatingButton.className='fixed top-20 right-4 z-40 bg-gradient-to-r from-cyan-600 to-blue-600 hover:from-cyan-700 hover:to-blue-700 text-white p-3 rounded-full shadow-lg transition-all duration-300 transform hover:scale-110';floatingButton.title='Toggle Performance Dashboard(Ctrl+Shift+P)';floatingButton.addEventListener('click',()=>{this.toggle();});}}setupEventListeners(){document.getElementById('dashboard-toggle').addEventListener('click',()=>{this.toggle();});document.getElementById('close-dashboard').addEventListener('click',()=>{this.hide();});document.getElementById('minimize-dashboard').addEventListener('click',()=>{this.toggleMinimize();});document.getElementById('settings-dashboard').addEventListener('click',()=>{this.showSettings();});document.getElementById('clear-cache').addEventListener('click',()=>{this.clearCache();});document.getElementById('force-gc').addEventListener('click',()=>{this.forceGarbageCollection();});document.getElementById('restart-animations').addEventListener('click',()=>{this.restartAnimations();});document.getElementById('optimize-performance').addEventListener('click',()=>{this.optimizePerformance();});document.addEventListener('keydown',(e)=>{if(e.ctrlKey && e.shiftKey && e.key==='P'){e.preventDefault();this.toggle();}});this.makeDraggable();}makeDraggable(){const dashboard=document.getElementById('performance-dashboard');const header=dashboard.querySelector('.bg-gray-800');let isDragging=false;let startX,startY,startLeft,startTop;header.addEventListener('mousedown',(e)=>{isDragging=true;startX=e.clientX;startY=e.clientY;const rect=dashboard.getBoundingClientRect();startLeft=rect.left;startTop=rect.top;dashboard.style.position='fixed';dashboard.style.zIndex='9999';document.addEventListener('mousemove',handleMouseMove);document.addEventListener('mouseup',handleMouseUp);});function handleMouseMove(e){if(!isDragging)return;const deltaX=e.clientX-startX;const deltaY=e.clientY-startY;dashboard.style.left=`${startLeft+deltaX}px`;dashboard.style.top=`${startTop+deltaY}px`;dashboard.style.right='auto';}function handleMouseUp(){isDragging=false;document.removeEventListener('mousemove',handleMouseMove);document.removeEventListener('mouseup',handleMouseUp);}}initializeCharts(){this.charts.fps=this.createChart('fps-chart','rgba(59,130,246,0.8)','rgba(59,130,246,0.2)');this.charts.memory=this.createChart('memory-chart','rgba(34,197,94,0.8)','rgba(34,197,94,0.2)');this.charts.cpu=this.createChart('cpu-chart','rgba(234,179,8,0.8)','rgba(234,179,8,0.2)');}createChart(canvasId,strokeColor,fillColor){const canvas=document.getElementById(canvasId);const ctx=canvas.getContext('2d');return{canvas: canvas,ctx: ctx,strokeColor: strokeColor,fillColor: fillColor,data: []};}drawChart(chart,data,max=null){const ctx=chart.ctx;const canvas=chart.canvas;const width=canvas.width;const height=canvas.height;ctx.clearRect(0,0,width,height);if(data.length < 2)return;const maxValue=max || Math.max(...data,1);ctx.strokeStyle='rgba(75,85,99,0.3)';ctx.lineWidth=1;for(let i=0;i <=4;i++){const y=(height/4)*i;ctx.beginPath();ctx.moveTo(0,y);ctx.lineTo(width,y);ctx.stroke();}for(let i=0;i <=10;i++){const x=(width/10)*i;ctx.beginPath();ctx.moveTo(x,0);ctx.lineTo(x,height);ctx.stroke();}ctx.fillStyle=chart.fillColor;ctx.beginPath();ctx.moveTo(0,height);data.forEach((value,index)=>{const x=(width/(data.length-1))*index;const y=height-(height*(value/maxValue));if(index===0){ctx.lineTo(x,y);}else{ctx.lineTo(x,y);}});ctx.lineTo(width,height);ctx.closePath();ctx.fill();ctx.strokeStyle=chart.strokeColor;ctx.lineWidth=2;ctx.beginPath();data.forEach((value,index)=>{const x=(width/(data.length-1))*index;const y=height-(height*(value/maxValue));if(index===0){ctx.moveTo(x,y);}else{ctx.lineTo(x,y);}});ctx.stroke();ctx.fillStyle=chart.strokeColor;data.forEach((value,index)=>{const x=(width/(data.length-1))*index;const y=height-(height*(value/maxValue));ctx.beginPath();ctx.arc(x,y,2,0,2*Math.PI);ctx.fill();});}startMonitoring(){this.updateInterval=setInterval(()=>{if(this.isVisible){this.updateMetrics();this.updateCharts();this.updateSystemStatus();this.updateAnimationStatus();}},1000);}async updateMetrics(){const fps=await this.measureFPS();this.metrics.fps.push(fps);if(this.metrics.fps.length > this.maxDataPoints){this.metrics.fps.shift();}document.getElementById('fps-value').textContent=fps;document.getElementById('mini-fps').textContent=fps;let memory=0;if(performance.memory){memory=Math.round(performance.memory.usedJSHeapSize/1024/1024);}this.metrics.memory.push(memory);if(this.metrics.memory.length > this.maxDataPoints){this.metrics.memory.shift();}document.getElementById('memory-value').textContent=memory;document.getElementById('mini-memory').textContent=memory;const cpu=this.estimateCPUUsage();this.metrics.cpu.push(cpu);if(this.metrics.cpu.length > this.maxDataPoints){this.metrics.cpu.shift();}document.getElementById('cpu-value').textContent=cpu;const network=await this.measureNetworkLatency();this.metrics.network.push(network);if(this.metrics.network.length > this.maxDataPoints){this.metrics.network.shift();}document.getElementById('network-value').textContent=network;}updateCharts(){if(this.charts.fps && this.metrics.fps.length > 0){this.drawChart(this.charts.fps,this.metrics.fps,120);}if(this.charts.memory && this.metrics.memory.length > 0){this.drawChart(this.charts.memory,this.metrics.memory);}if(this.charts.cpu && this.metrics.cpu.length > 0){this.drawChart(this.charts.cpu,this.metrics.cpu,100);}}updateSystemStatus(){const container=document.getElementById('system-status-grid');const systems=[{name: '系统集成管理器',status: !!window.systemIntegrationManager,key: 'integration'},{name: '音效系统',status: !!window.audioEnhancer,key: 'audio'},{name: '手势交互',status: !!window.gestureInteraction,key: 'gesture'},{name: '数据可视化',status: !!window.dataVisualization,key: 'data'},{name: '社交自定义',status: !!window.socialCustomization,key: 'social'},{name: '调试控制台',status: !!window.advancedDebugConsole,key: 'debug'}];container.innerHTML=systems.map(system=>{const statusColor=system.status ? 'text-green-400' : 'text-red-400';const statusIcon=system.status ? 'fas fa-check-circle' : 'fas fa-times-circle';return ` <div class="flex items-center justify-between text-xs"> <span class="text-gray-300">${system.name}</span> <span class="${statusColor}"> <i class="${statusIcon}mr-1"></i> ${system.status ? '运行' : '停止'}</span> </div> `;}).join('');}updateAnimationStatus(){const container=document.getElementById('animation-status');const animations=[{name: 'C++动画系统',active: !!document.getElementById('cpp-animation-container')},{name: '量子粒子',active: document.querySelectorAll('.quantum-particle').length > 0},{name: '3D背景',active: !!document.querySelector('canvas')},{name: 'GSAP动画',active: !!window.gsap}];container.innerHTML=animations.map(anim=>{const statusColor=anim.active ? 'text-green-400' : 'text-gray-400';const statusIcon=anim.active ? 'fas fa-play-circle' : 'fas fa-pause-circle';return ` <div class="flex items-center justify-between text-xs"> <span class="text-gray-300">${anim.name}</span> <span class="${statusColor}"> <i class="${statusIcon}mr-1"></i> ${anim.active ? '活跃' : '暂停'}</span> </div> `;}).join('');}async measureFPS(){return new Promise((resolve)=>{let frames=0;const startTime=performance.now();function countFrame(){frames++;if(performance.now()-startTime < 1000){requestAnimationFrame(countFrame);}else{resolve(frames);}}requestAnimationFrame(countFrame);});}estimateCPUUsage(){const start=performance.now();let iterations=0;while(performance.now()-start < 10){iterations++;}return Math.min(Math.round((1000000-iterations)/10000),100);}async measureNetworkLatency(){const start=performance.now();try{await fetch('/ping',{method: 'HEAD'});return Math.round(performance.now()-start);}catch{return Math.floor(Math.random()*50)+10;}}toggle(){if(this.isVisible){this.hide();}else{this.show();}}show(){const dashboard=document.getElementById('performance-dashboard');dashboard.classList.remove('hidden');this.isVisible=true;this.updateMetrics();}hide(){const dashboard=document.getElementById('performance-dashboard');dashboard.classList.add('hidden');this.isVisible=false;}toggleMinimize(){const content=document.getElementById('dashboard-content');const minimized=document.getElementById('minimized-content');const dashboard=document.getElementById('performance-dashboard');if(this.isMinimized){content.classList.remove('hidden');minimized.classList.add('hidden');dashboard.style.height='auto';this.isMinimized=false;}else{content.classList.add('hidden');minimized.classList.remove('hidden');dashboard.style.height='60px';this.isMinimized=true;}}showSettings(){const modal=document.createElement('div');modal.className='fixed inset-0 z-[9999] flex items-center justify-center bg-black/50 backdrop-blur-sm';modal.innerHTML=` <div class="bg-gray-800 text-white p-6 rounded-lg border border-gray-700 max-w-md w-full mx-4"> <h3 class="text-cyan-400 font-bold mb-4 flex items-center"> <i class="fas fa-cog mr-2"></i>性能监控设置 </h3> <div class="space-y-4"> <div> <label class="block text-sm font-medium mb-1">更新间隔(秒)</label> <input type="range" min="0.5" max="5" step="0.5" value="1" id="update-interval" class="w-full"> <span id="interval-value" class="text-xs text-gray-400">1秒</span> </div> <div> <label class="block text-sm font-medium mb-1">最大数据点</label> <input type="range" min="20" max="100" step="10" value="50" id="max-data-points" class="w-full"> <span id="points-value" class="text-xs text-gray-400">50点</span> </div> <div class="space-y-2"> <label class="flex items-center"> <input type="checkbox" id="auto-optimize" checked class="mr-2"> 自动性能优化 </label> <label class="flex items-center"> <input type="checkbox" id="show-alerts" checked class="mr-2"> 显示性能警告 </label> <label class="flex items-center"> <input type="checkbox" id="detailed-logging" class="mr-2"> 详细日志记录 </label> </div> </div> <div class="flex justify-end space-x-2 mt-6"> <button id="cancel-settings" class="bg-gray-600 hover:bg-gray-700 px-4 py-2 rounded text-sm"> 取消 </button> <button id="save-settings" class="bg-blue-600 hover:bg-blue-700 px-4 py-2 rounded text-sm"> 保存 </button> </div> </div> `;document.body.appendChild(modal);modal.querySelector('#update-interval').addEventListener('input',(e)=>{modal.querySelector('#interval-value').textContent=`${e.target.value}秒`;});modal.querySelector('#max-data-points').addEventListener('input',(e)=>{modal.querySelector('#points-value').textContent=`${e.target.value}点`;});modal.querySelector('#cancel-settings').addEventListener('click',()=>{document.body.removeChild(modal);});modal.querySelector('#save-settings').addEventListener('click',()=>{console.log('设置已保存');document.body.removeChild(modal);});modal.addEventListener('click',(e)=>{if(e.target===modal){document.body.removeChild(modal);}});}clearCache(){if(caches){caches.keys().then(keys=>{keys.forEach(key=> caches.delete(key));});}console.log('缓存已清理');}forceGarbageCollection(){if(window.gc){window.gc();}console.log('垃圾回收已执行');}restartAnimations(){if(window.cppAnimationSystem){window.cppAnimationSystem.restart();}console.log('动画系统已重启');}optimizePerformance(){this.clearCache();this.forceGarbageCollection();const particles=document.querySelectorAll('.quantum-particle');if(particles.length > 100){for(let i=100;i < particles.length;i++){particles[i].remove();}}console.log('性能优化已执行');}}window.realTimePerformanceDashboard=new RealTimePerformanceDashboard();console.log('📊 Real-Time Performance Dashboard 已加载');