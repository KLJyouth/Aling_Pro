class AlingI18nManager{constructor(options={}){this.options={defaultLocale: 'zh-CN',fallbackLocale: 'en-US',loadPath: '/assets/locales/{{lng}}/{{ns}}.json',defaultNamespace: 'common',namespaces: ['common','ui','errors','forms'],enableCache: true,enableInterpolation: true,enablePlurals: true,enableDateFormat: true,enableNumberFormat: true,missingKeyHandler: null,postProcessor: null,debug: false,...options};this.currentLocale=this.options.defaultLocale;this.translations=new Map();this.formatters=new Map();this.loadedNamespaces=new Set();this.observers=new Set();this.cache=new Map();this.init();}async init(){this.detectUserLocale();this.initFormatters();await this.loadNamespace(this.options.defaultNamespace);this.setupDOMObserver();console.log('✅ AlingAi 国际化管理器初始化完成');}detectUserLocale(){const urlParams=new URLSearchParams(window.location.search);const urlLang=urlParams.get('lang');const storedLang=localStorage.getItem('preferred_language');const browserLang=navigator.language || navigator.languages?.[0];const preferredLocale=urlLang || storedLang || browserLang || this.options.defaultLocale;this.setLocale(preferredLocale);}initFormatters(){this.formatters.set('date',new Map());this.formatters.set('number',new Map());this.formatters.set('currency',new Map());this.formatters.set('relative',new Map());}async setLocale(locale){if(this.currentLocale===locale)return;const oldLocale=this.currentLocale;this.currentLocale=locale;localStorage.setItem('preferred_language',locale);await this.loadLocaleData(locale);document.documentElement.lang=locale;this.translatePage();this.notifyLocaleChange(locale,oldLocale);this.emit('locale:changed',{locale,oldLocale,translations: this.getTranslations(locale)});}getLocale(){return this.currentLocale;}async loadLocaleData(locale){const promises=this.options.namespaces.map(namespace=> this.loadNamespace(namespace,locale));await Promise.all(promises);}async loadNamespace(namespace,locale=this.currentLocale){const key=`${locale}:${namespace}`;if(this.options.enableCache && this.cache.has(key)){const cached=this.cache.get(key);this.setTranslations(locale,namespace,cached);return cached;}try{const url=this.options.loadPath .replace('{{lng}}',locale).replace('{{ns}}',namespace);const response=await fetch(url);if(!response.ok){if(locale !==this.options.fallbackLocale){return await this.loadNamespace(namespace,this.options.fallbackLocale);}throw new Error(`Failed to load ${namespace}for ${locale}`);}const translations=await response.json();if(this.options.enableCache){this.cache.set(key,translations);}this.setTranslations(locale,namespace,translations);this.loadedNamespaces.add(key);if(this.options.debug){console.log(`翻译加载完成: ${key}`,translations);}return translations;}catch(error){console.error(`加载翻译失败: ${key}`,error);if(locale !==this.options.fallbackLocale){return await this.loadNamespace(namespace,this.options.fallbackLocale);}return{};}}setTranslations(locale,namespace,translations){if(!this.translations.has(locale)){this.translations.set(locale,new Map());}this.translations.get(locale).set(namespace,translations);}getTranslations(locale=this.currentLocale,namespace=null){const localeData=this.translations.get(locale);if(!localeData)return{};if(namespace){return localeData.get(namespace)||{};}const merged={};localeData.forEach((translations,ns)=>{Object.assign(merged,translations);});return merged;}t(key,options={}){const{lng=this.currentLocale,ns=this.options.defaultNamespace,defaultValue=key,interpolation={},count=null,context=null}=options;let fullKey=key;if(ns && !key.includes(':')){fullKey=`${ns}:${key}`;}const [namespace,...keyParts]=fullKey.split(':');const actualKey=keyParts.join(':')|| namespace;const actualNs=keyParts.length > 0 ? namespace : ns;let translation=this.getTranslation(lng,actualNs,actualKey);if(!translation && lng !==this.options.fallbackLocale){translation=this.getTranslation(this.options.fallbackLocale,actualNs,actualKey);}if(!translation){translation=defaultValue;if(this.options.missingKeyHandler){this.options.missingKeyHandler(key,lng,ns);}}if(this.options.enablePlurals && count !==null){translation=this.handlePlurals(translation,count,lng);}if(context){const contextKey=`${actualKey}_${context}`;const contextTranslation=this.getTranslation(lng,actualNs,contextKey);if(contextTranslation){translation=contextTranslation;}}if(this.options.enableInterpolation && typeof translation==='string'){translation=this.interpolate(translation,interpolation);}if(this.options.postProcessor){translation=this.options.postProcessor(translation,key,options);}return translation;}getTranslation(locale,namespace,key){const localeData=this.translations.get(locale);if(!localeData)return null;const nsData=localeData.get(namespace);if(!nsData)return null;return this.getNestedValue(nsData,key);}getNestedValue(obj,path){return path.split('.').reduce((current,key)=>{return current && current[key] !==undefined ? current[key] : null;},obj);}handlePlurals(translation,count,locale){if(typeof translation==='string')return translation;if(typeof translation !=='object')return translation;const rule=this.getPluralRule(count,locale);const pluralKey=this.getPluralKey(rule);return translation[pluralKey] || translation.other || translation.one || '';}getPluralRule(count,locale){const rules={'zh-CN':()=> 'other','en-US':(n)=> n===1 ? 'one' : 'other','ru-RU':(n)=>{if(n % 10===1 && n % 100 !==11)return 'one';if(n % 10 >=2 && n % 10 <=4 &&(n % 100 < 10 || n % 100 >=20))return 'few';return 'many';}};const rule=rules[locale] || rules['en-US'];return rule(count);}getPluralKey(rule){const keyMap={'zero': 'zero','one': 'one','two': 'two','few': 'few','many': 'many','other': 'other'};return keyMap[rule] || 'other';}interpolate(text,values){return text.replace(/\{\{([^}]+)\}\}/g,(match,key)=>{const value=this.getNestedValue(values,key.trim());return value !==null && value !==undefined ? value : match;});}formatDate(date,options={}){const{locale=this.currentLocale,format='short',...formatOptions}=options;const dateObj=typeof date==='string' || typeof date==='number' ? new Date(date): date;const formats={short:{year: 'numeric',month: 'short',day: 'numeric'},long:{year: 'numeric',month: 'long',day: 'numeric',weekday: 'long'},time:{hour: '2-digit',minute: '2-digit'},datetime:{year: 'numeric',month: 'short',day: 'numeric',hour: '2-digit',minute: '2-digit'}};const formatConfig=formats[format] || formatOptions;const key=`${locale}-${JSON.stringify(formatConfig)}`;let formatter=this.formatters.get('date').get(key);if(!formatter){formatter=new Intl.DateTimeFormat(locale,formatConfig);this.formatters.get('date').set(key,formatter);}return formatter.format(dateObj);}formatNumber(number,options={}){const{locale=this.currentLocale,style='decimal',...formatOptions}=options;const key=`${locale}-${style}-${JSON.stringify(formatOptions)}`;let formatter=this.formatters.get('number').get(key);if(!formatter){formatter=new Intl.NumberFormat(locale,{style,...formatOptions});this.formatters.get('number').set(key,formatter);}return formatter.format(number);}formatCurrency(amount,currency='USD',options={}){const{locale=this.currentLocale,...formatOptions}=options;return this.formatNumber(amount,{locale,style: 'currency',currency,...formatOptions});}formatRelativeTime(date,options={}){const{locale=this.currentLocale,numeric='auto'}=options;const dateObj=typeof date==='string' || typeof date==='number' ? new Date(date): date;const now=new Date();const diffMs=dateObj.getTime()-now.getTime();const diffSec=Math.round(diffMs/1000);const diffMin=Math.round(diffSec/60);const diffHour=Math.round(diffMin/60);const diffDay=Math.round(diffHour/24);const key=`${locale}-${numeric}`;let formatter=this.formatters.get('relative').get(key);if(!formatter){formatter=new Intl.RelativeTimeFormat(locale,{numeric});this.formatters.get('relative').set(key,formatter);}if(Math.abs(diffSec)< 60){return formatter.format(diffSec,'second');}else if(Math.abs(diffMin)< 60){return formatter.format(diffMin,'minute');}else if(Math.abs(diffHour)< 24){return formatter.format(diffHour,'hour');}else{return formatter.format(diffDay,'day');}}setupDOMObserver(){const observer=new MutationObserver((mutations)=>{mutations.forEach((mutation)=>{mutation.addedNodes.forEach((node)=>{if(node.nodeType===Node.ELEMENT_NODE){this.translateElement(node);}});});});observer.observe(document.body,{childList: true,subtree: true});}translatePage(){this.translateElement(document.body);}translateElement(element){const elements=element.querySelectorAll('[data-i18n]');elements.forEach(el=>{const key=el.getAttribute('data-i18n');const options=this.parseDataAttributes(el);if(key){const translation=this.t(key,options);const attr=el.getAttribute('data-i18n-attr');if(attr){el.setAttribute(attr,translation);}else{el.textContent=translation;}}});if(element.hasAttribute && element.hasAttribute('data-i18n')){const key=element.getAttribute('data-i18n');const options=this.parseDataAttributes(element);if(key){const translation=this.t(key,options);const attr=element.getAttribute('data-i18n-attr');if(attr){element.setAttribute(attr,translation);}else{element.textContent=translation;}}}}parseDataAttributes(element){const options={};const interpolation=element.getAttribute('data-i18n-values');if(interpolation){try{options.interpolation=JSON.parse(interpolation);}catch(e){console.warn('无效的插值数据:',interpolation);}}const count=element.getAttribute('data-i18n-count');if(count){options.count=parseInt(count,10);}const context=element.getAttribute('data-i18n-context');if(context){options.context=context;}const ns=element.getAttribute('data-i18n-ns');if(ns){options.ns=ns;}return options;}onLocaleChange(callback){this.observers.add(callback);return()=>{this.observers.delete(callback);};}notifyLocaleChange(newLocale,oldLocale){this.observers.forEach(callback=>{try{callback(newLocale,oldLocale);}catch(error){console.error('语言变化观察者执行失败:',error);}});}getSupportedLocales(){return Array.from(this.translations.keys());}isLocaleSupported(locale){return this.translations.has(locale);}addTranslations(locale,namespace,translations){if(!this.translations.has(locale)){this.translations.set(locale,new Map());}const localeData=this.translations.get(locale);const existing=localeData.get(namespace)||{};const merged=this.deepMerge(existing,translations);localeData.set(namespace,merged);if(locale===this.currentLocale){this.translatePage();}}deepMerge(target,source){const result={...target};for(const key in source){if(source[key] && typeof source[key]==='object' && !Array.isArray(source[key])){result[key]=this.deepMerge(result[key] ||{},source[key]);}else{result[key]=source[key];}}return result;}emit(eventName,data){const event=new CustomEvent(`i18n:${eventName}`,{detail: data});document.dispatchEvent(event);}destroy(){this.translations.clear();this.formatters.clear();this.cache.clear();this.observers.clear();this.loadedNamespaces.clear();}}function createI18nHelpers(i18n){return{t:(key,options)=> i18n.t(key,options),tDate:(date,options)=> i18n.formatDate(date,options),tNumber:(number,options)=> i18n.formatNumber(number,options),tCurrency:(amount,currency,options)=> i18n.formatCurrency(amount,currency,options),tRelative:(date,options)=> i18n.formatRelativeTime(date,options),setLocale:(locale)=> i18n.setLocale(locale),getLocale:()=> i18n.getLocale()};}window.AlingI18nManager=AlingI18nManager;window.createI18nHelpers=createI18nHelpers;window.i18n=new AlingI18nManager();window.$t=window.i18n.t.bind(window.i18n);window.$tDate=window.i18n.formatDate.bind(window.i18n);window.$tNumber=window.i18n.formatNumber.bind(window.i18n);window.$tCurrency=window.i18n.formatCurrency.bind(window.i18n);window.$tRelative=window.i18n.formatRelativeTime.bind(window.i18n);console.log('✅ AlingAi 国际化管理器已加载');