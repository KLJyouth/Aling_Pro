class QuantumChatIntegrator{constructor(){this.wsConnection=null;this.quantumBallSystem=null;this.chatSystem=null;this.isConnected=false;this.reconnectAttempts=0;this.maxReconnectAttempts=5;this.reconnectInterval=3000;this.quantumSphereRef=null;this.isAuthenticated=false;this.currentAnimation=null;this.animationQueue=[];this.isAnimating=false;this.eventListeners=new Map();this.init();}setQuantumSphereReference(quantumSphereObjects){this.quantumSphereRef=quantumSphereObjects;console.log('🎯 量子球系统引用已设置',Object.keys(quantumSphereObjects));}async init(){console.log('🌊 初始化量子球-聊天集成系统...');await this.waitForQuantumBallSystem();await this.initWebSocketConnection();this.setupChatEventListeners();this.setupPageEventListeners();console.log('✅ 量子球-聊天集成系统初始化完成');}async waitForQuantumBallSystem(){return new Promise((resolve)=>{const checkQuantumSystem=()=>{const hasQuantumParticleSystem=window.quantumParticleSystem || document.getElementById('backgroundContainer')|| window.QuantumParticleSystem;const hasQuantumAnimationSystem=window.quantumAnimation || window.QuantumAnimationSystem;if(hasQuantumParticleSystem && hasQuantumAnimationSystem){this.quantumBallSystem=window.quantumParticleSystem || window.QuantumParticleSystem || this.createQuantumBallProxy();console.log('🎯 量子球系统和动画系统已就绪');resolve();}else{console.log('⏳ 等待量子系统初始化...',{quantumParticleSystem: !!hasQuantumParticleSystem,quantumAnimationSystem: !!hasQuantumAnimationSystem});setTimeout(checkQuantumSystem,500);}};checkQuantumSystem();});}createQuantumBallProxy(){return{updateState:(state)=>{console.log('📊 量子球状态更新:',state);this.triggerVisualFeedback(state);},triggerAnimation:(type,data)=>{console.log('🎬 触发量子球动画:',type,data);this.triggerChatEvent(type,data);}};}triggerVisualFeedback(state){console.log('🎨 应用视觉反馈:',state);const container=document.getElementById('backgroundContainer');if(container && state.mode){container.className=`quantum-${state.mode}`;if(state.colors && state.colors.length > 0){this.applyColorAnimation(container,state.colors);}if(state.effects && state.effects.length > 0){this.applyEffectAnimation(container,state.effects);}}const quantumLoader=document.getElementById('quantumLoader');if(quantumLoader && state.visible){quantumLoader.style.display='flex';setTimeout(()=>{quantumLoader.style.display='none';},state.duration || 2000);}}async initWebSocketConnection(){try{const wsUrl=`ws: console.log('🔌 连接WebSocket:',wsUrl);this.wsConnection=new WebSocket(wsUrl);this.wsConnection.onopen=()=>{console.log('✅ WebSocket连接已建立');this.isConnected=true;this.reconnectAttempts=0;this.sendWebSocketMessage({type: 'quantumBallSync',action: 'init',data:{page: window.location.pathname,timestamp: new Date().toISOString()}});this.emit('connected');};this.wsConnection.onmessage=(event)=>{try{const data=JSON.parse(event.data);this.handleWebSocketMessage(data);}catch(error){console.error('❌ WebSocket消息解析失败:',error);}};this.wsConnection.onclose=()=>{console.log('🔌 WebSocket连接已关闭');this.isConnected=false;this.emit('disconnected');this.attemptReconnection();};this.wsConnection.onerror=(error)=>{console.error('❌ WebSocket连接错误:',error);this.emit('error',error);};}catch(error){console.error('❌ WebSocket初始化失败:',error);this.emit('error',error);}}async attemptReconnection(){if(this.reconnectAttempts >=this.maxReconnectAttempts){console.error('❌ WebSocket重连次数已达上限');return;}this.reconnectAttempts++;console.log(`🔄 尝试重连WebSocket(${this.reconnectAttempts}/${this.maxReconnectAttempts})...`);setTimeout(()=>{this.initWebSocketConnection();},this.reconnectInterval);}handleWebSocketMessage(data){console.log('📨 收到WebSocket消息:',data);switch(data.type){case 'quantumBallAnimation': this.handleQuantumBallAnimation(data);break;case 'chatResponse': this.handleChatResponse(data);break;case 'systemNotification': this.handleSystemNotification(data);break;default: console.log('🤷 未知消息类型:',data.type);}}handleQuantumBallAnimation(data){console.log('🎭 处理量子球动画:',data);if(data.animation){this.addAnimationToQueue(data.eventType,data.animation,data.data);}this.emit('quantumBallAnimation',data);}handleChatResponse(data){console.log('💬 处理聊天响应:',data);this.triggerChatEvent('aiResponseReceived',data);this.emit('chatResponse',data);}handleSystemNotification(data){console.log('📢 系统通知:',data);this.emit('systemNotification',data);}emit(event,data){if(this.eventListeners.has(event)){this.eventListeners.get(event).forEach(callback=>{try{callback(data);}catch(error){console.error(`❌ 事件监听器执行失败(${event}):`,error);}});}}on(event,callback){if(!this.eventListeners.has(event)){this.eventListeners.set(event,[]);}this.eventListeners.get(event).push(callback);}off(event,callback){if(this.eventListeners.has(event)){const listeners=this.eventListeners.get(event);const index=listeners.indexOf(callback);if(index >-1){listeners.splice(index,1);}}}addAnimationToQueue(eventType,animation,chatData){this.animationQueue.push({type: eventType,animation: animation,data: chatData,timestamp: Date.now()});this.processAnimationQueue();this.emit('quantumBallAnimation',{eventType,animation,chatData});}async processAnimationQueue(){if(this.isAnimating || this.animationQueue.length===0){return;}this.isAnimating=true;while(this.animationQueue.length > 0){const animationItem=this.animationQueue.shift();await this.executeAnimation(animationItem);}this.isAnimating=false;}async executeAnimation(animationItem){const{type,animation,data}=animationItem;console.log(`🎭 执行动画: ${type}`,animation);try{if(this.quantumBallSystem && this.quantumBallSystem.triggerAnimation){this.quantumBallSystem.triggerAnimation(type,animation);}else{await this.executeAnimationFallback(type,animation);}if(animation.duration){await new Promise(resolve=> setTimeout(resolve,animation.duration));}}catch(error){console.error('❌ 执行动画失败:',error);}}async executeAnimationFallback(type,animation){const container=document.getElementById('backgroundContainer');if(!container)return;const animationClass=`quantum-animation-${type}`;container.classList.add(animationClass);if(animation.colors){this.applyColorAnimation(container,animation.colors);}if(animation.effects){this.applyEffectAnimation(container,animation.effects);}setTimeout(()=>{container.classList.remove(animationClass);},animation.duration || 2000);}applyColorAnimation(container,colors){console.log('🎨 应用颜色动画:',colors);const gradient=`linear-gradient(45deg,${colors.join(',')})`;container.style.background=gradient;setTimeout(()=>{container.style.background='';},3000);}applyEffectAnimation(container,effects){console.log('✨ 应用效果动画:',effects);effects.forEach(effect=>{container.classList.add(`effect-${effect}`);});setTimeout(()=>{effects.forEach(effect=>{container.classList.remove(`effect-${effect}`);});},2000);}setupChatEventListeners(){console.log('📡 设置聊天事件监听器...');document.addEventListener('chatMessageSent',(event)=>{this.handleChatMessageSent(event.detail);});document.addEventListener('chatResponseReceived',(event)=>{this.handleChatResponseReceived(event.detail);});document.addEventListener('chatError',(event)=>{this.handleChatError(event.detail);});if(window.chatInstance){this.integrateChatInstance(window.chatInstance);}document.addEventListener('chatInstanceCreated',(event)=>{this.integrateChatInstance(event.detail);});}integrateChatInstance(chatInstance){console.log('🔗 集成聊天实例...');this.chatSystem=chatInstance;if(chatInstance.core && chatInstance.core.on){chatInstance.core.on('messageSent',(data)=>{this.triggerChatEvent('userMessageSent',data);});chatInstance.core.on('responseReceived',(data)=>{this.triggerChatEvent('aiResponseReceived',data);});chatInstance.core.on('error',(data)=>{this.triggerChatEvent('chatError',data);});}if(chatInstance.api && chatInstance.api.sendMessage){const originalSendMessage=chatInstance.api.sendMessage.bind(chatInstance.api);chatInstance.api.sendMessage=async(message,options={})=>{this.triggerChatEvent('userMessageSent',{message,options});try{this.triggerChatEvent('aiThinking',{message});const result=await originalSendMessage(message,options);this.triggerChatEvent('aiResponseReceived',{message,response: result,options});return result;}catch(error){this.triggerChatEvent('chatError',{message,error,options});throw error;}};}}handleChatMessageSent(data){console.log('💬 用户消息发送:',data);this.triggerChatEvent('userMessageSent',data);}handleChatResponseReceived(data){console.log('🤖 AI响应接收:',data);this.triggerChatEvent('aiResponseReceived',data);}handleChatError(data){console.log('❌ 聊天错误:',data);this.triggerChatEvent('chatError',data);}triggerChatEvent(eventType,data){console.log(`🚀 触发聊天事件: ${eventType}`,data);if(this.quantumSphereRef){this.applyAnimationToQuantumSphere(eventType,data);}if(this.isConnected && this.wsConnection){this.sendWebSocketMessage({type: 'chatEvent',eventType: eventType,data: data,timestamp: new Date().toISOString()});}else{console.log('🎨 使用本地动画效果(WebSocket未连接)');this.applyLocalAnimationEffect(eventType,data);}document.dispatchEvent(new CustomEvent('quantumChatEvent',{detail:{eventType,data}}));switch(eventType){case 'userMessageSent': this.triggerUserMessageAnimation(data);break;case 'aiThinking': this.triggerAIThinkingAnimation();break;case 'aiResponseReceived': this.triggerAIResponseAnimation(data);break;case 'chatError': this.triggerErrorAnimation(data);break;}if(this.wsConnection && this.wsConnection.readyState===WebSocket.OPEN){this.wsConnection.send(JSON.stringify({type: 'chat_event',eventType: eventType,data: data,timestamp: Date.now()}));}return true;}applyLocalAnimationEffect(eventType,data){console.log(`🎨 应用本地动画效果: ${eventType}`,data);const container=document.getElementById('backgroundContainer');if(container){container.classList.add(`quantum-${eventType}`);setTimeout(()=>{container.classList.remove(`quantum-${eventType}`);},2000);}}applyAnimationToQuantumSphere(eventType,data){console.log(`🌟 应用量子球动画: ${eventType}`,data);if(!this.quantumSphereRef)return;switch(eventType){case 'userMessageSent': this.applyUserMessageAnimation(this.quantumSphereRef,data);break;case 'aiThinking': this.applyAIThinkingAnimation(this.quantumSphereRef,data);break;case 'aiResponseReceived': this.applyAIResponseAnimation(this.quantumSphereRef,data);break;case 'chatError': this.applyErrorAnimation(this.quantumSphereRef,data);break;}}applyUserMessageAnimation(quantumSphere,data){console.log('👤 应用用户消息动画');}applyAIThinkingAnimation(waveForm,connectionLines){console.log('🤔 应用AI思考动画');}applyAIResponseAnimation(quantumSphere,lightBeams){console.log('🤖 应用AI响应动画');}applyErrorAnimation(quantumSphere,particleCloud){console.log('❌ 应用错误动画');}setupPageEventListeners(){console.log('🔧 设置页面事件监听器...');document.addEventListener('visibilitychange',()=>{if(document.hidden){this.triggerQuantumBallMode('sleep');}else{this.triggerQuantumBallMode('active');}});window.addEventListener('resize',()=>{this.triggerQuantumBallMode('resize');});}triggerQuantumBallMode(mode){console.log(`🎚️ 切换量子球模式: ${mode}`);this.sendWebSocketMessage({type: 'quantumBallMode',mode: mode,timestamp: new Date().toISOString()});this.emit('quantumBallModeChange',{mode});}sendWebSocketMessage(message){if(this.wsConnection && this.wsConnection.readyState===WebSocket.OPEN){this.wsConnection.send(JSON.stringify(message));}else{console.warn('⚠️ WebSocket未连接，无法发送消息:',message);}}triggerUserMessageAnimation(data){console.log('👤 触发用户消息动画',data);const animation={type: 'userMessage',colors: ['#4CAF50','#81C784'],effects: ['pulse','glow'],duration: 1500};this.addAnimationToQueue('userMessageSent',animation,data);}triggerAIThinkingAnimation(){console.log('🤔 触发AI思考动画');const animation={type: 'aiThinking',colors: ['#FF9800','#FFB74D'],effects: ['wave','shimmer'],duration: 2000};this.addAnimationToQueue('aiThinking',animation,{});}triggerAIResponseAnimation(data){console.log('🤖 触发AI响应动画',data);const animation={type: 'aiResponse',colors: ['#2196F3','#64B5F6'],effects: ['burst','sparkle'],duration: 1800};this.addAnimationToQueue('aiResponseReceived',animation,data);}triggerErrorAnimation(data){console.log('❌ 触发错误动画',data);const animation={type: 'error',colors: ['#F44336','#EF5350'],effects: ['shake','fade'],duration: 1000};this.addAnimationToQueue('chatError',animation,data);}triggerQuantumAnimation(type,data={}){console.log(`🌀 触发量子动画: ${type}`,data);const defaultAnimations={click:{colors: ['#9C27B0','#BA68C8'],effects: ['ripple','zoom'],duration: 1000},hover:{colors: ['#673AB7','#9575CD'],effects: ['glow'],duration: 500},idle:{colors: ['#3F51B5','#7986CB'],effects: ['breathe'],duration: 3000}};const animation={...defaultAnimations[type],...data};this.addAnimationToQueue(type,animation,data);}async checkAuthentication(){try{const response=await fetch('/api/v1/auth/check',{method: 'GET',headers:{'Content-Type': 'application/json','X-Requested-With': 'XMLHttpRequest'}});if(response.ok){const result=await response.json();this.isAuthenticated=result.success && result.data?.authenticated;return this.isAuthenticated;}}catch(error){console.warn('认证检查失败:',error);}this.isAuthenticated=false;return false;}testIntegration(){console.log('🧪 开始测试量子球-聊天集成...');const testAnimations=[ 'userMessageSent','aiThinking','aiResponseReceived','chatError' ];testAnimations.forEach((animation,index)=>{setTimeout(()=>{this.triggerChatEvent(animation,{test: true,message: `测试动画: ${animation}`,timestamp: new Date().toISOString()});},index*3000);});}getSystemStatus(){return{isConnected: this.isConnected,isAuthenticated: this.isAuthenticated,reconnectAttempts: this.reconnectAttempts,hasQuantumBallSystem: !!this.quantumBallSystem,hasChatSystem: !!this.chatSystem,animationQueueLength: this.animationQueue.length,isAnimating: this.isAnimating,currentPage: window.location.pathname};}async initialize(){console.log('🚀 QuantumChatIntegrator 公共初始化开始...');try{if(this.isConnected){console.log('✅ QuantumChatIntegrator 已经初始化，跳过重复初始化');return Promise.resolve();}await this.checkAuthentication();await this.init();console.log('✅ QuantumChatIntegrator 公共初始化完成');return Promise.resolve();}catch(error){console.error('❌ QuantumChatIntegrator 初始化失败:',error);throw error;}}saveToLocalStorage(key,data){try{localStorage.setItem(key,JSON.stringify(data));console.log(`💾 数据已保存到localStorage: ${key}`);}catch(error){console.warn('localStorage保存失败:',error);}}loadFromLocalStorage(key){try{const data=localStorage.getItem(key);return data ? JSON.parse(data): null;}catch(error){console.warn('localStorage读取失败:',error);return null;}}removeFromLocalStorage(key){try{localStorage.removeItem(key);console.log(`🗑️ 已从localStorage删除: ${key}`);}catch(error){console.warn('localStorage删除失败:',error);}}}let quantumChatIntegrator=null;document.addEventListener('DOMContentLoaded',()=>{setTimeout(()=>{try{quantumChatIntegrator=new QuantumChatIntegrator();window.quantumChatIntegrator=quantumChatIntegrator;console.log('🌊 量子球-聊天集成器已全局初始化');document.dispatchEvent(new CustomEvent('quantumChatIntegratorReady',{detail: quantumChatIntegrator}));}catch(error){console.error('❌ 量子球-聊天集成器初始化失败:',error);}},1000);});if(typeof window !=='undefined'){window.initializeQuantumChatIntegrator=function(){if(window.quantumChatIntegrator){console.log('🌊 量子球-聊天集成器手动初始化...');return window.quantumChatIntegrator;}else{console.warn('⚠️ 量子球-聊天集成器尚未就绪，请稍后重试');return null;}};}if(typeof module !=='undefined' && module.exports){module.exports=QuantumChatIntegrator;}if(typeof window !=='undefined'){window.QuantumChatIntegrator=QuantumChatIntegrator;}console.log('📦 量子球-聊天集成模块已加载');