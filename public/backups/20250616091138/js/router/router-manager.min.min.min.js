class AlingRouterManager{constructor(options={}){this.options={mode: 'history',base: '/',linkSelector: 'a[data-router-link]',containerSelector: '#app-content',loadingSelector: '#loading',errorSelector: '#error',enableCache: true,cacheSize: 10,transitionDuration: 300,scrollToTop: true,...options};this.routes=new Map();this.guards=new Map();this.cache=new Map();this.history=[];this.currentRoute=null;this.isNavigating=false;this.components=new Map();this.init();}init(){this.setupEventListeners();this.bindLinks();this.handleInitialRoute();console.log('✅ AlingAi 路由管理器初始化完成');}addRoute(path,config){if(typeof config==='function'){config={component: config};}const route={path: this.normalizePath(path),component: config.component,title: config.title,meta: config.meta ||{},beforeEnter: config.beforeEnter,children: config.children || [],params:{},query:{},...config};route.paramNames=this.extractParamNames(path);route.regex=this.pathToRegex(path);this.routes.set(path,route);if(config.children && config.children.length > 0){config.children.forEach(child=>{const childPath=this.joinPaths(path,child.path);this.addRoute(childPath,{...child,parent: route});});}return this;}addRoutes(routes){routes.forEach(route=>{this.addRoute(route.path,route);});return this;}addGuard(type,guard){if(!this.guards.has(type)){this.guards.set(type,[]);}this.guards.get(type).push(guard);return this;}pathToRegex(path){const paramRegex=/:([^\/]+)/g;const regexStr=path.replace(paramRegex,'([^/]+)');return new RegExp(`^${regexStr}$`);}extractParamNames(path){const paramRegex=/:([^\/]+)/g;const params=[];let match;while((match=paramRegex.exec(path))!==null){params.push(match[1]);}return params;}normalizePath(path){if(!path.startsWith('/')){path='/'+path;}return path.replace(/\/+/g,'/').replace(/\/$/,'')|| '/';}joinPaths(parent,child){return this.normalizePath(parent+'/'+child);}parseCurrentPath(){let path,query;if(this.options.mode==='hash'){const hash=window.location.hash.slice(1);[path,query]=hash.split('?');}else{path=window.location.pathname;query=window.location.search.slice(1);}return{path: this.normalizePath(path),query: this.parseQuery(query || ''),fullPath: path+(query ? '?'+query : '')};}parseQuery(queryString){const query={};if(!queryString)return query;queryString.split('&').forEach(param=>{const [key,value]=param.split('=');if(key){query[decodeURIComponent(key)]=decodeURIComponent(value || '');}});return query;}stringifyQuery(query){const params=[];for(const [key,value] of Object.entries(query)){if(value !==null && value !==undefined && value !==''){params.push(`${encodeURIComponent(key)}=${encodeURIComponent(value)}`);}}return params.join('&');}matchRoute(path){for(const [routePath,route] of this.routes){const match=path.match(route.regex);if(match){const params={};route.paramNames.forEach((name,index)=>{params[name]=match[index+1];});return{...route,params,matched: match};}}return null;}setupEventListeners(){window.addEventListener('popstate',(e)=>{this.handleRouteChange();});document.addEventListener('click',(e)=>{this.handleLinkClick(e);});}bindLinks(){document.querySelectorAll(this.options.linkSelector).forEach(link=>{link.addEventListener('click',(e)=>{e.preventDefault();const to=link.getAttribute('href')|| link.getAttribute('data-to');if(to){this.push(to);}});});}handleLinkClick(e){const link=e.target.closest('a');if(!link)return;if(link.hasAttribute('data-router-link')|| link.getAttribute('href')?.startsWith('/')){e.preventDefault();const to=link.getAttribute('href');if(to && !link.hasAttribute('target')){this.push(to);}}}handleInitialRoute(){this.handleRouteChange();}async handleRouteChange(){if(this.isNavigating)return;const{path,query,fullPath}=this.parseCurrentPath();const route=this.matchRoute(path);if(!route){this.handleNotFound(path);return;}const newRoute={...route,path,fullPath,query,hash: window.location.hash};try{const canNavigate=await this.executeGuards('beforeEach',newRoute,this.currentRoute);if(!canNavigate)return;if(route.beforeEnter){const canEnter=await route.beforeEnter(newRoute,this.currentRoute);if(!canEnter)return;}await this.executeGuards('beforeResolve',newRoute,this.currentRoute);await this.renderRoute(newRoute);const oldRoute=this.currentRoute;this.currentRoute=newRoute;this.history.push(newRoute);await this.executeGuards('afterEach',newRoute,oldRoute);if(route.title){document.title=route.title;}if(this.options.scrollToTop){window.scrollTo(0,0);}this.emit('route:changed',{to: newRoute,from: oldRoute});}catch(error){console.error('路由导航错误:',error);this.handleError(error);}}async executeGuards(type,to,from){const guards=this.guards.get(type)|| [];for(const guard of guards){try{const result=await guard(to,from,(next)=>{if(next===false)return false;if(typeof next==='string'){this.push(next);return false;}return true;});if(result===false)return false;}catch(error){console.error(`路由守卫 ${type}执行错误:`,error);return false;}}return true;}async renderRoute(route){this.isNavigating=true;try{this.showLoading();let component=route.component;if(typeof component==='function'){component=await component();}if(typeof component==='string'){component=await this.loadComponent(component,route);}await this.renderComponent(component,route);this.hideLoading();}catch(error){this.hideLoading();throw error;}finally{this.isNavigating=false;}}async loadComponent(componentPath,route){if(this.options.enableCache && this.cache.has(componentPath)){return this.cache.get(componentPath);}try{let component;if(componentPath.startsWith('http')|| componentPath.endsWith('.js')){const module=await import(componentPath);component=module.default || module;}else if(componentPath.includes('<')){component=componentPath;}else{component=this.components.get(componentPath);if(!component){throw new Error(`Component not found: ${componentPath}`);}}if(this.options.enableCache){this.setCache(componentPath,component);}return component;}catch(error){console.error('组件加载失败:',error);throw error;}}async renderComponent(component,route){const container=document.querySelector(this.options.containerSelector);if(!container){throw new Error('路由容器未找到');}container.style.opacity='0';setTimeout(async()=>{try{if(typeof component==='function'){await component(container,route);}else if(typeof component==='string'){container.innerHTML=component;}else if(component && component.render){await component.render(container,route);}else{throw new Error('无效的组件类型');}this.bindLinks();container.style.opacity='1';}catch(error){container.style.opacity='1';throw error;}},this.options.transitionDuration);}registerComponent(name,component){this.components.set(name,component);return this;}setCache(key,value){if(this.cache.size >=this.options.cacheSize){const firstKey=this.cache.keys().next().value;this.cache.delete(firstKey);}this.cache.set(key,value);}showLoading(){const loading=document.querySelector(this.options.loadingSelector);if(loading){loading.style.display='block';}}hideLoading(){const loading=document.querySelector(this.options.loadingSelector);if(loading){loading.style.display='none';}}handleNotFound(path){const notFoundRoute=this.routes.get('/404')|| this.routes.get('*');if(notFoundRoute){this.renderRoute({...notFoundRoute,path,params:{path},query:{}});}else{this.handleError(new Error(`页面未找到: ${path}`));}}handleError(error){console.error('路由错误:',error);const errorContainer=document.querySelector(this.options.errorSelector);if(errorContainer){errorContainer.innerHTML=` <div class="error-message"> <h3>页面加载失败</h3> <p>${error.message}</p> <button onclick="location.reload()">重新加载</button> </div> `;errorContainer.style.display='block';}this.emit('route:error',{error});}push(path,query={}){const queryString=this.stringifyQuery(query);const fullPath=path+(queryString ? '?'+queryString : '');if(this.options.mode==='hash'){window.location.hash=fullPath;}else{window.history.pushState(null,'',this.options.base+fullPath);this.handleRouteChange();}}replace(path,query={}){const queryString=this.stringifyQuery(query);const fullPath=path+(queryString ? '?'+queryString : '');if(this.options.mode==='hash'){window.location.replace(window.location.href.split('#')[0]+'#'+fullPath);}else{window.history.replaceState(null,'',this.options.base+fullPath);this.handleRouteChange();}}back(){window.history.back();}forward(){window.history.forward();}go(n){window.history.go(n);}getCurrentRoute(){return this.currentRoute;}generatePath(name,params={},query={}){const route=Array.from(this.routes.values()).find(r=> r.name===name);if(!route){throw new Error(`路由 ${name}不存在`);}let path=route.path;route.paramNames.forEach(param=>{if(params[param]){path=path.replace(`:${param}`,params[param]);}});const queryString=this.stringifyQuery(query);return path+(queryString ? '?'+queryString : '');}getHistory(){return [...this.history];}clearCache(){this.cache.clear();}emit(eventName,data){const event=new CustomEvent(eventName,{detail: data});document.dispatchEvent(event);}destroy(){window.removeEventListener('popstate',this.handleRouteChange);document.removeEventListener('click',this.handleLinkClick);this.routes.clear();this.guards.clear();this.cache.clear();this.components.clear();this.history=[];this.currentRoute=null;}}class RouterUtils{static createBreadcrumb(route,routes){const breadcrumb=[];let current=route;while(current){breadcrumb.unshift({name: current.meta?.title || current.title,path: current.path,route: current});current=current.parent;}return breadcrumb;}static isActiveRoute(currentPath,targetPath,exact=false){if(exact){return currentPath===targetPath;}return currentPath.startsWith(targetPath);}static parseRouteConfig(config){const routes=[];config.forEach(item=>{const route={path: item.path,component: item.component,title: item.title,meta: item.meta ||{},children: item.children || []};routes.push(route);});return routes;}}window.AlingRouterManager=AlingRouterManager;window.RouterUtils=RouterUtils;window.router=new AlingRouterManager();console.log('✅ AlingAi 路由管理器已加载');