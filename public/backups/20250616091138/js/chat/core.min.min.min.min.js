export class ChatCore{constructor(){this.messageHistory=[];this.currentState='idle';this.currentUser=null;this.messageQueue=[];this.currentSession=null;this.isInitialized=false;this.isAuthenticated=false;this.apiEndpoints={chat: '/api/v1/chat/messages',sessions: '/api/v1/chat/sessions',conversations: '/api/v1/chat/conversations',auth: '/api/v1/auth/check'};}async initialize(){try{await this.checkUserAuthentication();if(this.isAuthenticated){console.log('🔐 用户已认证，从API加载聊天历史');await this.loadChatHistoryFromAPI();}else{console.log('👤 访客用户，从本地存储加载聊天历史');await this.loadChatHistoryFromLocal();}this.isInitialized=true;return true;}catch(error){console.error('Failed to initialize ChatCore:',error);await this.loadChatHistoryFromLocal();this.isInitialized=true;return false;}}async checkUserAuthentication(){try{const response=await fetch(this.apiEndpoints.auth,{method: 'GET',headers:{'Content-Type': 'application/json','X-Requested-With': 'XMLHttpRequest'}});if(response.ok){const result=await response.json();const authenticated=result.success && result.data?.authenticated;this.isAuthenticated=authenticated;if(authenticated && result.data.user){this.currentUser=result.data.user;}return authenticated;}}catch(error){console.warn('认证检查失败:',error);}this.isAuthenticated=false;return false;}async checkAuthentication(){return await this.checkUserAuthentication();}async loadChatHistoryFromAPI(){try{const response=await fetch(`${this.apiEndpoints.conversations}?limit=1`,{method: 'GET',headers:{'Content-Type': 'application/json','X-Requested-With': 'XMLHttpRequest'}});if(response.ok){const result=await response.json();if(result.success && result.data && result.data.length > 0){const conversation=result.data[0];if(conversation.messages && conversation.messages.length > 0){this.messageHistory=conversation.messages.map(msg=>({id: msg.id || Date.now().toString(),type: msg.sender==='user' ? 'user' : 'ai',content: msg.content,timestamp: new Date(msg.created_at || Date.now())}));this.currentSession=conversation.id;localStorage.setItem('currentSessionId',conversation.id);console.log('✅ 从API加载聊天历史');return true;}}}}catch(error){console.warn('从API加载聊天历史失败:',error);}return false;}async loadChatHistoryFromLocal(){try{const userInfo=localStorage.getItem('currentUser');if(userInfo){try{this.currentUser=JSON.parse(userInfo);}catch(e){console.warn('Invalid user data in localStorage');localStorage.removeItem('currentUser');}}const storedHistory=localStorage.getItem('chatHistory');if(storedHistory){try{this.messageHistory=JSON.parse(storedHistory);console.log('📱 从本地存储加载聊天历史');}catch(e){console.warn('Invalid chat history in localStorage');localStorage.removeItem('chatHistory');this.messageHistory=[];}}const currentSessionId=localStorage.getItem('currentSessionId');if(currentSessionId){this.currentSession=currentSessionId;}}catch(error){console.error('Failed to load chat history from localStorage:',error);this.messageHistory=[];}}async processUserMessage(message){const messageObj={id: Date.now().toString(),type: 'user',content: message,timestamp: new Date()};this.messageHistory.push(messageObj);this.currentState='waitingForResponse';await this.saveMessage(messageObj);return messageObj;}async processResponse(response){const messageObj={id: Date.now().toString(),type: 'ai',content: response.content,timestamp: new Date()};this.messageHistory.push(messageObj);this.currentState='idle';await this.saveMessage(messageObj);return messageObj;}async saveMessage(messageObj){if(this.isAuthenticated && this.currentUser){try{await this.saveMessageToAPI(messageObj);console.log('💾 消息已保存到数据库');}catch(error){console.warn('Failed to save to database,falling back to localStorage:',error);this._saveMessageToLocal();}}else{console.log('📱 消息已保存到本地存储');this._saveMessageToLocal();}}async saveMessageToAPI(messageObj){try{if(!this.currentSession){await this.createNewSession();}const response=await fetch(this.apiEndpoints.conversations,{method: 'POST',headers:{'Content-Type': 'application/json','X-Requested-With': 'XMLHttpRequest'},body: JSON.stringify({conversation_id: this.currentSession,sender: messageObj.type==='ai' ? 'assistant' : 'user',content: messageObj.content,metadata:{timestamp: messageObj.timestamp,id: messageObj.id}})});if(!response.ok){throw new Error(`API request failed: ${response.status}`);}const result=await response.json();if(!result.success){throw new Error(result.message || 'Failed to save message');}return result;}catch(error){console.error('Error saving message to API:',error);throw error;}}async createNewSession(){try{const response=await fetch(this.apiEndpoints.conversations,{method: 'POST',headers:{'Content-Type': 'application/json','X-Requested-With': 'XMLHttpRequest'},body: JSON.stringify({title: `Chat Session ${new Date().toLocaleString()}`,model: 'deepseek-chat'})});if(!response.ok){throw new Error(`Failed to create session: ${response.status}`);}const result=await response.json();if(result.success && result.data && result.data.id){this.currentSession=result.data.id;localStorage.setItem('currentSessionId',result.data.id);return result.data.id;}throw new Error('Invalid session creation response');}catch(error){console.error('Error creating new session:',error);throw error;}}displayHistory(messages){if(!Array.isArray(messages))return [];this.messageHistory=messages.map(msg=>({id: msg.id || Date.now().toString(),type: msg.role || msg.type,content: msg.content,timestamp: new Date(msg.timestamp || Date.now())}));return this.messageHistory;}getState(){return this.currentState;}async processHistoryMessage(history){if(!Array.isArray(history))return [];return history.map(msg=>({id: msg.id || Date.now().toString(),type: msg.role || msg.type,content: msg.content,timestamp: new Date(msg.timestamp || Date.now())}));}async loadUserSettings(){return{theme: localStorage.getItem('theme')|| 'light',language: localStorage.getItem('language')|| 'zh',enableVoice: localStorage.getItem('enableVoice')==='true',enableTTS: localStorage.getItem('enableTTS')==='true',model: localStorage.getItem('model')|| 'deepseek-chat'};}async saveUserSettings(settings){Object.entries(settings).forEach(([key,value])=>{localStorage.setItem(key,value);});if(settings.theme){document.documentElement.setAttribute('data-bs-theme',settings.theme);}return settings;}setCurrentUser(user){this.currentUser=user;localStorage.setItem('currentUser',JSON.stringify(user));}async clearHistory(){this.messageHistory=[];if(this.isAuthenticated && this.currentSession){try{const response=await fetch(`${this.apiEndpoints.conversations}/${this.currentSession}`,{method: 'DELETE',headers:{'Content-Type': 'application/json','X-Requested-With': 'XMLHttpRequest'}});if(response.ok){this.currentSession=null;localStorage.removeItem('currentSessionId');console.log('🗑️ 已从数据库清除聊天历史');}}catch(error){console.warn('Failed to clear history from database:',error);}}localStorage.removeItem('chatHistory');localStorage.removeItem('currentSessionId');console.log('🗑️ 已清除本地聊天历史');}async retryLastMessage(){const lastUserMessage=this.messageHistory .filter(msg=> msg.type==='user').pop();if(lastUserMessage){return await this.processUserMessage(lastUserMessage.content);}throw new Error('没有找到可重试的消息');}clearErrors(){this.messageHistory=this.messageHistory.filter(msg=> msg.type !=='error');this._saveMessageToLocal();}getSessionStats(){const userMessages=this.messageHistory.filter(msg=> msg.type==='user').length;const aiMessages=this.messageHistory.filter(msg=> msg.type==='assistant' || msg.type==='ai').length;const errors=this.messageHistory.filter(msg=> msg.type==='error').length;return{totalMessages: this.messageHistory.length,userMessages,aiMessages,errors,sessionDuration: this._getSessionDuration()};}_getSessionDuration(){if(this.messageHistory.length===0)return 0;const firstMessage=this.messageHistory[0];const lastMessage=this.messageHistory[this.messageHistory.length-1];return new Date(lastMessage.timestamp)-new Date(firstMessage.timestamp);}exportHistory(format='json'){switch(format){case 'json': return JSON.stringify(this.messageHistory,null,2);case 'text': return this.messageHistory .map(msg=> `[${msg.timestamp}] ${msg.type}: ${msg.content}`).join('\n');case 'markdown': return this.messageHistory .map(msg=>{const type=msg.type==='user' ? '**用户**' : '**AI助手**';return `${type}: ${msg.content}\n`;}).join('\n');default: throw new Error('不支持的导出格式');}}_saveMessageToLocal(){try{const recentHistory=this.messageHistory.slice(-100);localStorage.setItem('chatHistory',JSON.stringify(recentHistory));if(this.currentSession){localStorage.setItem('currentSessionId',this.currentSession);}}catch(error){console.error('Error saving chat history to localStorage:',error);}}async getChatHistory(sessionId=null){if(this.isAuthenticated){try{return await this.loadChatHistoryFromAPI();}catch(error){console.warn('Failed to load from API,using local storage:',error);}}return this.messageHistory;}async syncToDatabase(){if(!this.isAuthenticated || this.messageHistory.length===0){return false;}try{await this.createNewSession();for(const message of this.messageHistory){await this.saveMessageToAPI(message);}localStorage.removeItem('chatHistory');console.log('🔄 本地数据已同步到数据库');return true;}catch(error){console.error('Failed to sync to database:',error);return false;}}}export function initChat(){const instance=new ChatCore();instance.initialize().catch(err=>{console.error('ChatCore 初始化失败:',err);});return instance;}