import{UIUtils}from './utils/ui-utils.js';import{MessageRenderer}from './message-renderer.js';export class ChatUI{constructor(){this.callbacks={onLogin:()=> console.warn('onLogin callback not set'),onSendMessage:()=> console.warn('onSendMessage callback not set'),onSelectSession:()=> console.warn('onSelectSession callback not set'),onSpeak:()=> console.warn('onSpeak callback not set'),onRegenerate:()=> console.warn('onRegenerate callback not set')};this.isInitialized=false;this.currentLang='zh';this.canUseSpeech=false;this.messageRenderer=null;}async initialize(){try{if(document.readyState==='loading'){await new Promise(resolve=> document.addEventListener('DOMContentLoaded',resolve));}await this._initializeLanguage();this._bindDOMElements();this._validateRequiredElements();this.messageRenderer=new MessageRenderer(this.dom.chatMessages);this.messageRenderer.setRegenerateCallback((messageId)=>{this.callCallback('onRegenerate',messageId);});this._initEventListeners();this._initCodeHighlight();this._initializeSettings();const token=localStorage.getItem('token');const guestMode=localStorage.getItem('guestMode');if(!token && !guestMode){console.log('未检测到登录token且未选择访客模式，显示登录模态框');setTimeout(()=>{this.showLoginModal();},1000);}else if(guestMode==='true'){console.log('检测到访客模式');this.updateUserStatus('访客模式');UIUtils.showToast('当前为访客模式，功能受限','info');}this.isInitialized=true;console.log('ChatUI initialized successfully');}catch(error){console.error('ChatUI initialization failed:',error);UIUtils.showError('界面初始化失败');throw error;}}_bindDOMElements(){this.dom={loginModal: document.getElementById('loginModal'),loginButton: document.getElementById('loginButton'),guestModeButton: document.getElementById('guestModeButton'),loginUsername: document.getElementById('loginUsername'),loginPassword: document.getElementById('loginPassword'),loginError: document.getElementById('loginError'),userStatus: document.getElementById('userStatus'),messageInput: document.getElementById('messageInput'),sendButton: document.getElementById('sendButton'),chatMessages: document.getElementById('chatMessages'),recordButton: document.getElementById('recordButton'),imageGenButton: document.getElementById('imageGenButton'),ttsButton: document.getElementById('ttsButton'),historyButton: document.getElementById('historyBtn'),historySidebar: document.getElementById('historySidebar'),closeHistory: document.getElementById('closeHistory'),settingsBtn: document.getElementById('settingsBtn'),historySearch: document.getElementById('historySearch'),historyList: document.getElementById('historyList'),loadingOverlay: document.getElementById('loadingOverlay'),settingsModal: document.getElementById('settingsModal'),langSwitchBtn: document.getElementById('langSwitchBtn')};}_validateRequiredElements(){const requiredElements=['messageInput','sendButton','chatMessages'];const missingElements=[];for(const element of requiredElements){if(!this.dom[element]){missingElements.push(element);}}if(missingElements.length > 0){console.warn(`部分DOM元素未找到: ${missingElements.join(',')}`);}}_initEventListeners(){this._initLoginEvents();this._initMessageEvents();this._initHistoryEvents();this._initVoiceEvents();this._initSettingsEvents();}_initLoginEvents(){if(this.dom.loginButton){this.dom.loginButton.addEventListener('click',async(e)=>{e.preventDefault();const username=this.dom.loginUsername?.value?.trim();const password=this.dom.loginPassword?.value?.trim();if(!username || !password){this.showLoginError('请输入用户名和密码');return;}try{if(typeof auth !=='undefined' && auth.login){const result=await auth.login(username,password);if(result.success){this.hideLoginModal();this.updateUserStatus(`欢迎,${result.user?.username || '用户'}`);UIUtils.showToast('登录成功','success');this.clearLoginForm();}else{this.showLoginError(result.error || '登录失败');}}else{const response=await fetch(API_ENDPOINTS.AUTH_LOGIN,{method: 'POST',headers:{'Content-Type': 'application/json'},body: JSON.stringify({username,password})});const data=await response.json();if(data.success && data.token){localStorage.setItem('token',data.token);localStorage.setItem('auth_token',data.token);localStorage.setItem('user_data',JSON.stringify(data.user));this.hideLoginModal();this.updateUserStatus(`欢迎,${data.user?.username || '用户'}`);UIUtils.showToast('登录成功','success');this.clearLoginForm();}else{this.showLoginError(data.error || '登录失败');}}}catch(error){console.error('Login error:',error);this.showLoginError('网络错误，请稍后重试');}});}if(this.dom.guestModeButton){this.dom.guestModeButton.addEventListener('click',()=>{console.log('进入访客模式');localStorage.setItem('guestMode','true');this.hideLoginModal();this.updateUserStatus('访客模式');UIUtils.showToast('已进入访客模式，功能受限','info');});}}_initMessageEvents(){if(this.dom.sendButton){this.dom.sendButton.addEventListener('click',()=> this.sendMessage());}if(this.dom.messageInput){this.dom.messageInput.addEventListener('keypress',(e)=>{if(e.key==='Enter' && !e.shiftKey){e.preventDefault();this.sendMessage();}});this.dom.messageInput.addEventListener('input',(e)=>{const hasText=e.target.value.trim().length > 0;if(this.dom.sendButton){this.dom.sendButton.disabled=!hasText;}});}}_initHistoryEvents(){this.dom.historyButton?.addEventListener('click',()=>{this.toggleHistorySidebar();});this.dom.closeHistory?.addEventListener('click',()=>{this.toggleHistorySidebar(false);});this.dom.historySearch?.addEventListener('input',(e)=>{this.filterHistoryItems(e.target.value.toLowerCase());});}_initVoiceEvents(){this.dom.recordButton?.addEventListener('click',()=>{this.callCallback('onVoiceRecord');});this.dom.ttsButton?.addEventListener('click',()=>{this.callCallback('onTTSToggle');});}_initImageEvents(){this.dom.imageGenButton?.addEventListener('click',()=>{this.callCallback('onImageGenerate');});}_initSettingsEvents(){this.dom.settingsBtn?.addEventListener('click',()=>{this.showSettings();});this.dom.langSwitchBtn?.addEventListener('click',()=>{this.switchLanguage();});}setCallback(name,fn){if(typeof fn==='function'){this.callbacks[name]=fn;}else{console.error(`Invalid callback for ${name}`);}}setCallbacks(callbacks){if(callbacks && typeof callbacks==='object'){Object.keys(callbacks).forEach(name=>{this.setCallback(name,callbacks[name]);});}}callCallback(name,...args){try{return this.callbacks[name](...args);}catch(error){console.error(`Error in ${name}callback:`,error);UIUtils.showError('操作失败');}}sendMessage(){const message=this.dom.messageInput.value.trim();if(message){this.disableSendButton();this.dom.messageInput.value='';this.callCallback('onSendMessage',message);this.dom.messageInput.focus();}}async addMessage(message){if(!this.isInitialized){throw new Error('ChatUI not initialized');}const processedMessage={id: message.id || Date.now().toString(),type: message.type==='user' ? 'user' : 'ai',content: message.content,timestamp: message.timestamp || new Date()};await this.messageRenderer.render(processedMessage);this.scrollToBottom();if(processedMessage.type==='ai'){this.enableSendButton();}}scrollToBottom(){if(this.dom.chatMessages){this.dom.chatMessages.scrollTop=this.dom.chatMessages.scrollHeight;}}showLoading(message='处理中...'){const loadingId='loading-'+Date.now();const loadingMessage={id: loadingId,type: 'loading',content: message,timestamp: new Date().toISOString()};this.addMessage(loadingMessage);return loadingId;}hideLoading(loadingId){const loadingElement=document.querySelector(`[data-message-id="${loadingId}"]`);if(loadingElement){loadingElement.remove();}}showError(message,details=''){const errorMessage={id: 'error-'+Date.now(),type: 'error',content: message,details: details,timestamp: new Date().toISOString()};this.addMessage(errorMessage);if(typeof notifications !=='undefined'){notifications.show(message,'error',details);}}showSuccess(message){if(typeof notifications !=='undefined'){notifications.show(message,'success');}}showNetworkError(){this.showError('网络连接异常','请检查网络连接后重试');}showAPIError(error){const message=error.message || '服务器响应异常';this.showError(message,'请稍后重试或联系技术支持');}showLoginModal(){if(this.dom.loginModal){const loginModal=new bootstrap.Modal(this.dom.loginModal);loginModal.show();}}hideLoginModal(){if(this.dom.loginModal){const loginModal=bootstrap.Modal.getInstance(this.dom.loginModal);if(loginModal){loginModal.hide();}}}showSettings(){if(this.dom.settingsModal){const settingsModal=new bootstrap.Modal(this.dom.settingsModal);settingsModal.show();}}hideSettings(){if(this.dom.settingsModal){const settingsModal=bootstrap.Modal.getInstance(this.dom.settingsModal);if(settingsModal){settingsModal.hide();}}}renderSessionList(sessions){if(!this.dom.historyList || !sessions || !Array.isArray(sessions)){return;}this.dom.historyList.innerHTML='';if(sessions.length===0){this.dom.historyList.innerHTML=` <div class="text-center text-muted p-3"> <i class="bi bi-chat-text mb-2 fs-3"></i> <p>暂无历史会话</p> </div> `;return;}sessions.forEach(session=>{const item=document.createElement('a');item.href='#';item.className='list-group-item list-group-item-action d-flex justify-content-between align-items-center';item.dataset.sessionId=session.id;const date=new Date(session.timestamp || Date.now());const formattedDate=date.toLocaleDateString('zh-CN',{year: 'numeric',month: 'numeric',day: 'numeric'});item.innerHTML=` <div class="d-flex flex-column"> <span class="fw-bold text-truncate" style="max-width: 180px;"> ${session.title || '未命名对话'}</span> <small class="text-muted">${formattedDate}</small> </div> <span class="badge bg-primary rounded-pill">${session.messageCount || 0}</span> `;item.addEventListener('click',(e)=>{e.preventDefault();this.callCallback('onSelectSession',session.id);this.dom.historyList.querySelectorAll('.active').forEach(el=> el.classList.remove('active'));item.classList.add('active');if(window.innerWidth < 992){this.toggleHistorySidebar(false);}});this.dom.historyList.appendChild(item);});}renderHistory(messages){if(!this.dom.chatMessages || !messages || !Array.isArray(messages)){return;}this.dom.chatMessages.innerHTML='';if(messages.length===0){this.showWelcomeMessage();return;}messages.forEach(message=> this.addMessage(message));}showWelcomeMessage(){const welcomeDiv=document.createElement('div');welcomeDiv.className='text-center my-5 py-5';welcomeDiv.innerHTML=` <img src="logo.svg" alt="Logo" width="80" height="80" class="mb-4"> <h2 class="mb-4">欢迎使用智能助手</h2> <p class="mb-4 text-muted">我可以帮助您回答问题、编写内容、提供创意灵感等</p> <div class="d-flex justify-content-center flex-wrap gap-2 mt-4"> <button class="btn btn-outline-primary suggestion-btn"> <i class="bi bi-lightbulb"></i> 推荐一本好书 </button> <button class="btn btn-outline-primary suggestion-btn"> <i class="bi bi-code-square"></i> 帮我写一个函数 </button> <button class="btn btn-outline-primary suggestion-btn"> <i class="bi bi-translate"></i> 翻译一段文字 </button> <button class="btn btn-outline-primary suggestion-btn"> <i class="bi bi-card-text"></i> 写一篇短文 </button> </div> `;welcomeDiv.querySelectorAll('.suggestion-btn').forEach(btn=>{btn.addEventListener('click',()=>{this.dom.messageInput.value=btn.textContent.trim();this.dom.messageInput.focus();this.dom.sendButton.removeAttribute('disabled');});});this.dom.chatMessages.appendChild(welcomeDiv);}toggleHistorySidebar(show){if(!this.dom.historySidebar)return;const sidebar=bootstrap.Offcanvas.getInstance(this.dom.historySidebar)|| new bootstrap.Offcanvas(this.dom.historySidebar);if(show===undefined){sidebar.toggle();}else if(show){sidebar.show();}else{sidebar.hide();}}cleanup(){if(this.messageRenderer){this.messageRenderer.cleanup();}}_initCodeHighlight(){const link=document.createElement('link');link.rel='stylesheet';link.href='https: document.head.appendChild(link);const script=document.createElement('script');script.src='https: script.onload=()=>{hljs.highlightAll();};document.head.appendChild(script);}initImageUpload(){const fileInput=document.createElement('input');fileInput.type='file';fileInput.accept='image/*';fileInput.style.display='none';document.body.appendChild(fileInput);const uploadButton=document.createElement('button');uploadButton.className='image-upload-button';uploadButton.innerHTML='<i class="fas fa-image"></i>';uploadButton.title='上传图片';const inputContainer=this.dom.messageInput.parentElement;inputContainer.insertBefore(uploadButton,this.dom.messageInput);uploadButton.addEventListener('click',()=> fileInput.click());fileInput.addEventListener('change',this.handleImageUpload.bind(this));}async handleImageUpload(event){const file=event.target.files[0];if(!file)return;try{const formData=new FormData();formData.append('image',file);const response=await fetch(API_ENDPOINTS.UPLOAD_IMAGE,{method: 'POST',body: formData});if(!response.ok)throw new Error('上传失败');const data=await response.json();const imageUrl=data.url;const imageMarkdown=`![图片](${imageUrl})`;this.insertTextAtCursor(imageMarkdown);}catch(error){this.showError('图片上传失败：'+error.message);}event.target.value='';}insertTextAtCursor(text){const input=this.dom.messageInput;const start=input.selectionStart;const end=input.selectionEnd;const before=input.value.substring(0,start);const after=input.value.substring(end);input.value=before+text+after;input.selectionStart=input.selectionEnd=start+text.length;input.focus();}async login(email,password){const res=await fetch(API_ENDPOINTS.AUTH_LOGIN,{method: 'POST',headers:{'Content-Type': 'application/json'},body: JSON.stringify({email,password})});const data=await res.json();if(data.success && data.token){localStorage.setItem('token',data.token);}return data;}async register(username,email,password){const res=await fetch(API_ENDPOINTS.AUTH_REGISTER,{method: 'POST',headers:{'Content-Type': 'application/json'},body: JSON.stringify({username,email,password})});const data=await res.json();if(data.success && data.token){localStorage.setItem('token',data.token);}return data;}async fetchWithAuth(url,options={}){const token=localStorage.getItem('token');options.headers=options.headers ||{};if(token){options.headers['Authorization']='Bearer '+token;}return fetch(url,options);}async switchLanguage(){this.currentLang=this.currentLang==='zh' ? 'en' : 'zh';const t=this.i18n[this.currentLang];document.getElementById('headerTitle').textContent=t.title;document.getElementById('langSwitchBtn').textContent=this.currentLang==='zh' ? 'EN' : '中';document.getElementById('messageInput').placeholder=t.inputPlaceholder;document.getElementById('sendButton').innerHTML=`<i class="bi bi-send"></i> ${t.send}`;document.getElementById('recordButton').innerHTML=`<i class="bi bi-mic"></i> ${t.voice}`;document.getElementById('imageGenButton').innerHTML=`<i class="bi bi-image"></i> ${t.image}`;document.getElementById('ttsButton').innerHTML=`<i class="bi bi-play-circle"></i> ${t.tts}`;}enableSpeechSynthesis(){this.canUseSpeech=true;console.log('Speech synthesis enabled');}async _initializeLanguage(){this.currentLang='zh';this.canUseSpeech=false;this.i18n={zh:{title: 'AI智能助手',inputPlaceholder: '输入消息...',send: '发送',voice: '语音输入',image: '生成图片',tts: '播放语音'},en:{title: 'AI Assistant',inputPlaceholder: 'Type a message...',send: 'Send',voice: 'Voice',image: 'Image',tts: 'TTS'}};await this.switchLanguage();}_initializeSettings(){const darkMode=localStorage.getItem('darkMode')==='true';const voiceInput=localStorage.getItem('voiceInput')==='true';const autoTTS=localStorage.getItem('autoTTS')==='true';if(darkMode){document.documentElement.setAttribute('data-bs-theme','dark');}const darkModeSwitch=document.getElementById('darkModeSwitch');if(darkModeSwitch)darkModeSwitch.checked=darkMode;const voiceInputSwitch=document.getElementById('voiceInputSwitch');if(voiceInputSwitch)voiceInputSwitch.checked=voiceInput;const autoTTSSwitch=document.getElementById('autoTTSSwitch');if(autoTTSSwitch)autoTTSSwitch.checked=autoTTS;document.getElementById('darkModeSwitch')?.addEventListener('change',(e)=>{document.documentElement.setAttribute('data-bs-theme',e.target.checked ? 'dark' : 'light');localStorage.setItem('darkMode',e.target.checked);});document.getElementById('voiceInputSwitch')?.addEventListener('change',(e)=>{localStorage.setItem('voiceInput',e.target.checked);});document.getElementById('autoTTSSwitch')?.addEventListener('change',(e)=>{localStorage.setItem('autoTTS',e.target.checked);});}updateUserStatus(status){if(this.dom.userStatus){this.dom.userStatus.textContent=status;}}clearUserStatus(){if(this.dom.userStatus){this.dom.userStatus.textContent='';}}enableSendButton(){if(this.dom.sendButton && this.dom.messageInput){const hasText=this.dom.messageInput.value.trim().length > 0;this.dom.sendButton.disabled=!hasText;if(hasText){this.dom.messageInput.focus();}}}disableSendButton(){if(this.dom.sendButton){this.dom.sendButton.disabled=true;}}showLoginError(message){if(this.dom.loginError){this.dom.loginError.textContent=message;this.dom.loginError.classList.remove('d-none');}UIUtils.showError(message);}clearLoginForm(){if(this.dom.loginUsername)this.dom.loginUsername.value='';if(this.dom.loginPassword)this.dom.loginPassword.value='';if(this.dom.loginError)this.dom.loginError.classList.add('d-none');}}