export class ApiManagement { constructor() { this.baseURL = window.location.origin; this.endpoints = { auth: '/api/auth', chat: '/api/chat', user: '/api/user', dashboard: '/api/dashboard' }; this.defaultHeaders = { 'Content-Type': 'application/json', 'Accept': 'application/json' }; this.requestQueue = []; this.isInitialized = false; } async init() { try { this.setupInterceptors(); this.loadAuthToken(); this.isInitialized = true; console.log('🔌 API Management initialized successfully'); } catch (error) { console.error('❌ API Management initialization failed:', error); } } setupInterceptors() { this.requestInterceptor = (config) => { const token = this.getAuthToken(); if (token) { config.headers = { ...config.headers, 'Authorization': `Bearer ${token}` }; } return config; }; this.responseInterceptor = (response) => { return response; }; } loadAuthToken() { try { const token = localStorage.getItem('authToken'); if (token) { this.authToken = token; } } catch (error) { console.warn('⚠️ Failed to load auth token:', error); } } getAuthToken() { return this.authToken || localStorage.getItem('authToken'); } setAuthToken(token) { this.authToken = token; try { localStorage.setItem('authToken', token); } catch (error) { console.warn('⚠️ Failed to save auth token:', error); } } async request(url, options = {}) { try { const config = { method: 'GET', headers: { ...this.defaultHeaders }, ...options }; const processedConfig = this.requestInterceptor(config); const response = await fetch(url, processedConfig); if (!response.ok) { throw new Error(`HTTP error! status: ${response.status}`); } const data = await response.json(); return this.responseInterceptor(data); } catch (error) { console.error('🔌 API request failed:', error); throw error; } } async get(endpoint, params = {}) { const url = new URL(endpoint, this.baseURL); Object.keys(params).forEach(key => { url.searchParams.append(key, params[key]); }); return this.request(url.toString(), { method: 'GET' }); } async post(endpoint, data = {}) { return this.request(endpoint, { method: 'POST', body: JSON.stringify(data) }); } async put(endpoint, data = {}) { return this.request(endpoint, { method: 'PUT', body: JSON.stringify(data) }); } async delete(endpoint) { return this.request(endpoint, { method: 'DELETE' }); } auth = { login: async (credentials) => { const response = await this.post(this.endpoints.auth + '/login', credentials); if (response.token) { this.setAuthToken(response.token); } return response; }, logout: async () => { try { await this.post(this.endpoints.auth + '/logout'); } finally { this.authToken = null; localStorage.removeItem('authToken'); } }, register: async (userData) => { return this.post(this.endpoints.auth + '/register', userData); }, forgotPassword: async (email) => { return this.post(this.endpoints.auth + '/forgot-password', { email }); }, resetPassword: async (token, newPassword) => { return this.post(this.endpoints.auth + '/reset-password', { token, newPassword }); } }; chat = { sendMessage: async (message) => { return this.post(this.endpoints.chat + '/message', { message }); }, getHistory: async (limit = 50) => { return this.get(this.endpoints.chat + '/history', { limit }); }, clearHistory: async () => { return this.delete(this.endpoints.chat + '/history'); } }; user = { getProfile: async () => { return this.get(this.endpoints.user + '/profile'); }, updateProfile: async (profileData) => { return this.put(this.endpoints.user + '/profile', profileData); }, getSettings: async () => { return this.get(this.endpoints.user + '/settings'); }, updateSettings: async (settings) => { return this.put(this.endpoints.user + '/settings', settings); } }; dashboard = { getMetrics: async () => { return this.get(this.endpoints.dashboard + '/metrics'); }, getChartData: async (chartType) => { return this.get(this.endpoints.dashboard + '/charts/' + chartType); } }; getStatus() { return { isInitialized: this.isInitialized, hasAuthToken: !!this.getAuthToken(), baseURL: this.baseURL, queueLength: this.requestQueue.length }; } } const apiManagement = new ApiManagement(); if (document.readyState === 'loading') { document.addEventListener('DOMContentLoaded', () => { apiManagement.init(); }); } else { apiManagement.init(); } window.apiManagement = apiManagement; export default apiManagement;