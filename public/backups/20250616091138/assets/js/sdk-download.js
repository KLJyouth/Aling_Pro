 class SDKDownloadManager { constructor() { this.apiEndpoint = '/scripts/sdk_generator.php'; this.downloadInProgress = false; this.init(); } init() { this.bindEvents(); this.updateDownloadStats(); setInterval(() => this.updateDownloadStats(), 30000); // 每30秒更新一次统计信息 } bindEvents() { // 绑定下载按钮事件 document.querySelectorAll('.sdk-download-btn').forEach(btn => { btn.addEventListener('click', (e) => { e.preventDefault(); const language = btn.dataset.language; const version = btn.dataset.version || 'latest'; this.downloadSDK(language, version, btn); }); }); // 绑定自定义下载表单 const customForm = document.getElementById('customDownloadForm'); if (customForm) { customForm.addEventListener('submit', (e) => { e.preventDefault(); this.handleCustomDownload(); }); } } async downloadSDK(language, version, button) { if (this.downloadInProgress) { this.showNotification('已有下载任务正在进行中，请稍候...', 'warning'); return; } this.downloadInProgress = true; this.updateButtonState(button, 'loading'); try { // 显示进度对话框 this.showProgressDialog(); // 生成SDK const response = await fetch(this.apiEndpoint, { method: 'POST', headers: { 'Content-Type': 'application/x-www-form-urlencoded', }, body: `language=${encodeURIComponent(language)}&version=${encodeURIComponent(version)}` }); const result = await response.json(); if (result.success) { // 更新进度为生成完成 this.updateProgress(80, '正在准备下载...'); // 开始下载 await this.startDownload(result); // 记录下载统计 this.recordDownload(language, version); this.showNotification(`${language.toUpperCase()} SDK 下载成功！`, 'success'); } else { throw new Error(result.error || '生成SDK失败'); } } catch (error) { console.error('下载失败:', error); this.showNotification(`下载失败: ${error.message}`, 'error'); } finally { this.downloadInProgress = false; this.updateButtonState(button, 'normal'); this.hideProgressDialog(); } } async startDownload(sdkInfo) { return new Promise((resolve, reject) => { // 创建下载链接 const link = document.createElement('a'); link.href = sdkInfo.download_url; link.download = sdkInfo.filename; link.style.display = 'none'; // 监听下载完成 link.addEventListener('click', () => { this.updateProgress(100, '下载完成！'); setTimeout(resolve, 1000); }); document.body.appendChild(link); link.click(); document.body.removeChild(link); }); } handleCustomDownload() { const formData = new FormData(document.getElementById('customDownloadForm')); const language = formData.get('language'); const version = formData.get('version'); const includeExamples = formData.get('include_examples'); const includeTests = formData.get('include_tests'); // 找到对应的下载按钮 const button = document.querySelector(`[data-language="${language}"]`); if (button) { button.dataset.version = version; button.dataset.includeExamples = includeExamples; button.dataset.includeTests = includeTests; this.downloadSDK(language, version, button); } } updateButtonState(button, state) { const icon = button.querySelector('i'); const text = button.querySelector('.btn-text'); button.disabled = state === 'loading'; switch (state) { case 'loading': icon.className = 'fas fa-spinner fa-spin'; text.textContent = '生成中...'; button.classList.add('btn-loading'); break; case 'normal': default: icon.className = 'fas fa-download'; text.textContent = '下载 SDK'; button.classList.remove('btn-loading'); break; } } showProgressDialog() { const dialog = document.getElementById('downloadProgressDialog'); if (dialog) { dialog.style.display = 'flex'; this.updateProgress(0, '正在生成SDK...'); } } hideProgressDialog() { const dialog = document.getElementById('downloadProgressDialog'); if (dialog) { setTimeout(() => { dialog.style.display = 'none'; }, 1500); } } updateProgress(percent, message) { const progressBar = document.querySelector('#downloadProgressDialog .progress-bar'); const progressText = document.querySelector('#downloadProgressDialog .progress-text'); if (progressBar) { progressBar.style.width = `${percent}%`; } if (progressText) { progressText.textContent = message; } // 模拟进度更新 if (percent < 100) { setTimeout(() => { this.updateProgress(Math.min(percent + 20, 80), message); }, 500); } } showNotification(message, type = 'info') { // 创建通知元素 const notification = document.createElement('div'); notification.className = `notification notification-${type}`; notification.innerHTML = ` <i class="fas fa-${this.getNotificationIcon(type)}"></i> <span>${message}</span> <button class="notification-close" onclick="this.parentElement.remove()"> <i class="fas fa-times"></i> </button> `; // 添加到页面 const container = document.querySelector('.notification-container') || document.body; container.appendChild(notification); // 自动移除 setTimeout(() => { if (notification.parentElement) { notification.remove(); } }, 5000); // 添加入场动画 setTimeout(() => { notification.classList.add('show'); }, 100); } getNotificationIcon(type) { const icons = { success: 'check-circle', error: 'exclamation-circle', warning: 'exclamation-triangle', info: 'info-circle' }; return icons[type] || 'info-circle'; } recordDownload(language, version) { // 记录下载统计到localStorage const stats = JSON.parse(localStorage.getItem('sdkDownloadStats') || '{}'); const key = `${language}_${version}`; stats[key] = (stats[key] || 0) + 1; stats.total = (stats.total || 0) + 1; stats.lastDownload = new Date().toISOString(); localStorage.setItem('sdkDownloadStats', JSON.stringify(stats)); } async updateDownloadStats() { try { // 从服务器获取下载统计 const response = await fetch('/api/sdk-stats'); if (response.ok) { const stats = await response.json(); this.displayStats(stats); } } catch (error) { console.warn('无法获取下载统计:', error); } } displayStats(stats) { // 更新页面上的统计信息 const elements = { totalDownloads: document.querySelector('.stat-total-downloads'), popularLanguage: document.querySelector('.stat-popular-language'), lastUpdate: document.querySelector('.stat-last-update') }; if (elements.totalDownloads) { elements.totalDownloads.textContent = stats.total || 0; } if (elements.popularLanguage) { elements.popularLanguage.textContent = stats.popular || 'PHP'; } if (elements.lastUpdate) { elements.lastUpdate.textContent = stats.lastUpdate || '刚刚'; } } // 清理过期的下载文件（由服务器端调用） async cleanupExpiredFiles() { try { const response = await fetch('/scripts/cleanup_downloads.php', { method: 'POST' }); const result = await response.json(); console.log('清理结果:', result); } catch (error) { console.error('清理失败:', error); } } } // 页面加载完成后初始化 document.addEventListener('DOMContentLoaded', () => { window.sdkManager = new SDKDownloadManager(); }); // 定期清理过期文件（每5分钟） setInterval(() => { if (window.sdkManager) { window.sdkManager.cleanupExpiredFiles(); } }, 5 * 60 * 1000); // 导出为全局可用 window.SDKDownloadManager = SDKDownloadManager; 