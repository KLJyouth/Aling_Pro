<?php
/**
 * AlingAi Pro 5.0 - Êñá‰ª∂Â§πÂêàÂπ∂Â∑•ÂÖ?
 * Â∞ÜÊ†πÁõÆÂΩï‰∏ã‰∏épublicÊñá‰ª∂Â§πÂÜÖÈáçÂêçÁöÑÊñá‰ª∂Â§πÂêàÂπ∂Âà∞publicÊñá‰ª∂Â§πÂÜÖ
 */

echo "üîÑ AlingAi Pro 5.0 - Êñá‰ª∂Â§πÂêàÂπ∂Â∑•ÂÖ∑\n";
echo "======================================================================\n";

class FolderMerger 
{
    private $rootPath;
    private $publicPath;
    private $duplicateFolders = [];
    private $mergedFolders = [];
    private $skippedFiles = [];
    private $errors = [];

    public function __construct($rootPath) {
        $this->rootPath = rtrim($rootPath, '/\\'];
        $this->publicPath = $this->rootPath . DIRECTORY_SEPARATOR . 'public';
        
        if (!is_dir($this->publicPath)) {
            throw new Exception("PublicÊñá‰ª∂Â§π‰∏çÂ≠òÂú®: {$this->publicPath}"];
        }
    }

    public function findDuplicateFolders() {
        echo "üîç Êü•ÊâæÈáçÂêçÊñá‰ª∂Â§?..\n";
        echo "----------------------------------------\n";
        
        $rootFolders = $this->getFolders($this->rootPath];
        $publicFolders = $this->getFolders($this->publicPath];
        
        $this->duplicateFolders = array_intersect($rootFolders, $publicFolders];
        
        echo "Ê†πÁõÆÂΩïÊñá‰ª∂Â§π: " . count($rootFolders) . " ‰∏™\n";
        echo "PublicÊñá‰ª∂Â§? " . count($publicFolders) . " ‰∏™\n";
        echo "ÈáçÂêçÊñá‰ª∂Â§? " . count($this->duplicateFolders) . " ‰∏™\n\n";
        
        if (empty($this->duplicateFolders)) {
            echo "‚ú?Êú™ÂèëÁé∞ÈáçÂêçÊñá‰ª∂Â§π\n";
            return false;
        }
        
        echo "üìã ÂèëÁé∞‰ª•‰∏ãÈáçÂêçÊñá‰ª∂Â§?\n";
        foreach ($this->duplicateFolders as $folder) {
            echo "   ‚Ä?$folder\n";
        }
        echo "\n";
        
        return true;
    }

    private function getFolders($path) {
        $folders = [];
        
        if (!is_dir($path)) {
            return $folders;
        }
        
        $items = scandir($path];
        foreach ($items as $item) {
            if ($item === '.' || $item === '..') {
                continue;
            }
            
            $fullPath = $path . DIRECTORY_SEPARATOR . $item;
            if (is_dir($fullPath)) {
                $folders[] = $item;
            }
        }
        
        return $folders;
    }

    public function mergeFolders($dryRun = false) {
        if (empty($this->duplicateFolders)) {
            echo "‚ö†Ô∏è Ê≤°ÊúâÈáçÂêçÊñá‰ª∂Â§πÈúÄË¶ÅÂêàÂπ∂\n";
            return false;
        }
        
        echo ($dryRun ? "üîç È¢ÑËßàÊ®°Âºè" : "üîÑ ÊâßË°åÂêàÂπ∂") . " - ÂêàÂπ∂ÈáçÂêçÊñá‰ª∂Â§?..\n";
        echo "----------------------------------------\n";
        
        foreach ($this->duplicateFolders as $folderName) {
            $this->mergeFolder($folderName, $dryRun];
        }
        
        return true;
    }

    private function mergeFolder($folderName, $dryRun = false) {
        $sourcePath = $this->rootPath . DIRECTORY_SEPARATOR . $folderName;
        $targetPath = $this->publicPath . DIRECTORY_SEPARATOR . $folderName;
        
        echo "üìÅ Â§ÑÁêÜÊñá‰ª∂Â§? $folderName\n";
        echo "   Ê∫êË∑ØÂæ? $sourcePath\n";
        echo "   ÁõÆÊ†áË∑ØÂæÑ: $targetPath\n";
        
        if (!is_dir($sourcePath)) {
            echo "   ‚ö†Ô∏è Ê∫êÊñá‰ª∂Â§π‰∏çÂ≠òÂú®ÔºåË∑≥Ëøá\n\n";
            return;
        }
        
        if (!is_dir($targetPath)) {
            echo "   üìÇ ÁõÆÊ†áÊñá‰ª∂Â§π‰∏çÂ≠òÂú®ÔºåÂ∞ÜÊï¥‰∏™ÁßªÂä®\n";
            if (!$dryRun) {
                if ($this->moveDirectory($sourcePath, $targetPath)) {
                    echo "   ‚ú?ÁßªÂä®ÊàêÂäü\n";
                    $this->mergedFolders[] = $folderName;
                } else {
                    echo "   ‚ù?ÁßªÂä®Â§±Ë¥•\n";
                    $this->errors[] = "ÁßªÂä®Êñá‰ª∂Â§πÂ§±Ë¥? $folderName";
                }
            } else {
                echo "   üîç [È¢ÑËßà] Â∞ÜÁßªÂä®Êï¥‰∏™Êñá‰ª∂Â§π\n";
            }
        } else {
            echo "   üîÄ ÁõÆÊ†áÊñá‰ª∂Â§πÂ∑≤Â≠òÂú®ÔºåÂêàÂπ∂ÂÜÖÂÆπ\n";
            $this->mergeDirectoryContents($sourcePath, $targetPath, $dryRun];
        }
        
        echo "\n";
    }

    private function mergeDirectoryContents($sourcePath, $targetPath, $dryRun = false) {
        $iterator = new RecursiveIteratorIterator(
            new RecursiveDirectoryIterator($sourcePath, RecursiveDirectoryIterator::SKIP_DOTS],
            RecursiveIteratorIterator::SELF_FIRST
        ];
        
        $movedCount = 0;
        $skippedCount = 0;
        
        foreach ($iterator as $item) {
            $relativePath = substr($item->getPathname(), strlen($sourcePath) + 1];
            $targetItemPath = $targetPath . DIRECTORY_SEPARATOR . $relativePath;
            
            if ($item->isDir()) {
                if (!is_dir($targetItemPath)) {
                    if (!$dryRun) {
                        if (mkdir($targetItemPath, 0755, true)) {
                            echo "     üìÇ ÂàõÂª∫ÁõÆÂΩï: $relativePath\n";
                        } else {
                            echo "     ‚ù?ÂàõÂª∫ÁõÆÂΩïÂ§±Ë¥•: $relativePath\n";
                            $this->errors[] = "ÂàõÂª∫ÁõÆÂΩïÂ§±Ë¥•: $relativePath";
                        }
                    } else {
                        echo "     üîç [È¢ÑËßà] Â∞ÜÂàõÂª∫ÁõÆÂΩ? $relativePath\n";
                    }
                }
            } else {
                if (!file_exists($targetItemPath)) {
                    if (!$dryRun) {
                        // Á°Æ‰øùÁõÆÊ†áÁõÆÂΩïÂ≠òÂú®
                        $targetDir = dirname($targetItemPath];
                        if (!is_dir($targetDir)) {
                            mkdir($targetDir, 0755, true];
                        }
                        
                        if (copy($item->getPathname(), $targetItemPath)) {
                            echo "     üìÑ Â§çÂà∂Êñá‰ª∂: $relativePath\n";
                            $movedCount++;
                        } else {
                            echo "     ‚ù?Â§çÂà∂Êñá‰ª∂Â§±Ë¥•: $relativePath\n";
                            $this->errors[] = "Â§çÂà∂Êñá‰ª∂Â§±Ë¥•: $relativePath";
                        }
                    } else {
                        echo "     üîç [È¢ÑËßà] Â∞ÜÂ§çÂà∂Êñá‰ª? $relativePath\n";
                        $movedCount++;
                    }
                } else {
                    echo "     ‚ö†Ô∏è Êñá‰ª∂Â∑≤Â≠òÂú®ÔºåË∑≥Ëøá: $relativePath\n";
                    $this->skippedFiles[] = $relativePath;
                    $skippedCount++;
                }
            }
        }
        
        echo "     üìä ÁªüËÆ°: ÁßªÂä® $movedCount ‰∏™Êñá‰ª∂ÔºåË∑≥Ëøá $skippedCount ‰∏™Êñá‰ª∂\n";
    }

    private function moveDirectory($source, $target) {
        return rename($source, $target];
    }

    public function deleteOriginalFolders($dryRun = false) {
        if (empty($this->duplicateFolders)) {
            echo "‚ö†Ô∏è Ê≤°ÊúâÂéüÂßãÊñá‰ª∂Â§πÈúÄË¶ÅÂà†Èô§\n";
            return false;
        }
        
        echo ($dryRun ? "üîç È¢ÑËßàÊ®°Âºè" : "üóëÔ∏?ÊâßË°åÂà†Èô§") . " - Âà†Èô§ÂéüÂßãÈáçÂêçÊñá‰ª∂Â§?..\n";
        echo "----------------------------------------\n";
        
        foreach ($this->duplicateFolders as $folderName) {
            $folderPath = $this->rootPath . DIRECTORY_SEPARATOR . $folderName;
            
            if (!is_dir($folderPath)) {
                echo "üìÅ $folderName - Â∑≤‰∏çÂ≠òÂú®ÔºåË∑≥Ëøá\n";
                continue;
            }
            
            if (!$dryRun) {
                if ($this->deleteDirectory($folderPath)) {
                    echo "‚ú?Âà†Èô§ÊàêÂäü: $folderName\n";
                } else {
                    echo "‚ù?Âà†Èô§Â§±Ë¥•: $folderName\n";
                    $this->errors[] = "Âà†Èô§Êñá‰ª∂Â§πÂ§±Ë¥? $folderName";
                }
            } else {
                echo "üîç [È¢ÑËßà] Â∞ÜÂà†Èô? $folderName\n";
            }
        }
        
        echo "\n";
        return true;
    }

    private function deleteDirectory($dir) {
        if (!is_dir($dir)) {
            return false;
        }
        
        $iterator = new RecursiveIteratorIterator(
            new RecursiveDirectoryIterator($dir, RecursiveDirectoryIterator::SKIP_DOTS],
            RecursiveIteratorIterator::CHILD_FIRST
        ];
        
        foreach ($iterator as $item) {
            if ($item->isDir()) {
                if (!rmdir($item->getPathname())) {
                    return false;
                }
            } else {
                if (!unlink($item->getPathname())) {
                    return false;
                }
            }
        }
        
        return rmdir($dir];
    }

    public function generateReport() {
        echo "üìã ÂêàÂπ∂Êìç‰ΩúÊä•Âëä\n";
        echo "======================================================================\n";
        
        echo "üìä ÁªüËÆ°‰ø°ÊÅØ:\n";
        echo "   üîç ÂèëÁé∞ÈáçÂêçÊñá‰ª∂Â§? " . count($this->duplicateFolders) . " ‰∏™\n";
        echo "   ‚ú?ÊàêÂäüÂêàÂπ∂Êñá‰ª∂Â§? " . count($this->mergedFolders) . " ‰∏™\n";
        echo "   ‚ö†Ô∏è Ë∑≥ËøáÁöÑÊñá‰ª? " . count($this->skippedFiles) . " ‰∏™\n";
        echo "   ‚ù?ÈîôËØØÊï∞Èáè: " . count($this->errors) . " ‰∏™\n\n";
        
        if (!empty($this->duplicateFolders)) {
            echo "üìÅ Â§ÑÁêÜÁöÑÈáçÂêçÊñá‰ª∂Â§π:\n";
            foreach ($this->duplicateFolders as $folder) {
                echo "   ‚Ä?$folder\n";
            }
            echo "\n";
        }
        
        if (!empty($this->skippedFiles)) {
            echo "‚ö†Ô∏è Ë∑≥ËøáÁöÑÊñá‰ª?(Ââ?0‰∏?:\n";
            $showFiles = array_slice($this->skippedFiles, 0, 10];
            foreach ($showFiles as $file) {
                echo "   ‚Ä?$file\n";
            }
            if (count($this->skippedFiles) > 10) {
                echo "   ... ËøòÊúâ " . (count($this->skippedFiles) - 10) . " ‰∏™Êñá‰ª∂\n";
            }
            echo "\n";
        }
        
        if (!empty($this->errors)) {
            echo "‚ù?ÈîôËØØÂàóË°®:\n";
            foreach ($this->errors as $error) {
                echo "   ‚Ä?$error\n";
            }
            echo "\n";
        }
        
        $success = count($this->errors) === 0;
        $score = empty($this->duplicateFolders) ? 100 : round((count($this->duplicateFolders) - count($this->errors)) / count($this->duplicateFolders) * 100];
        
        echo "üéØ ÂêàÂπ∂ÁªìÊûú:\n";
        if ($success) {
            echo "   üéâ ÂÖ®ÈÉ®ÊàêÂäüÔºÅÊâÄÊúâÈáçÂêçÊñá‰ª∂Â§πÂ∑≤ÂêàÂπ∂\n";
        } else {
            echo "   ‚ö†Ô∏è ÈÉ®ÂàÜÊàêÂäüÔºåÊàêÂäüÁéá: {$score}%\n";
        }
        
        echo "\nüí° Âª∫ËÆÆ:\n";
        echo "   üìã Ê£ÄÊü•ÂêàÂπ∂ÂêéÁöÑÊñá‰ª∂Â§πÁªìÊûÑ\n";
        echo "   üß™ ËøêË°åÁ≥ªÁªüÊµãËØïÁ°Æ‰øùÂäüËÉΩÊ≠£Â∏∏\n";
        echo "   üìä Â¶ÇÊúâÈúÄË¶ÅÔºåÂèØÊâãÂä®Â§ÑÁêÜË∑≥ËøáÁöÑÊñá‰ª∂\n";
        
        echo "\n======================================================================\n";
        echo "üéØ Êñá‰ª∂Â§πÂêàÂπ∂ÂÆåÊàêÔºÅ\n";
        echo "‚è?ÂÆåÊàêÊó∂Èó¥: " . date('Y-m-d H:i:s') . "\n";
        
        return $success;
    }
}

// ‰ΩøÁî®ËØ¥Êòé
function showUsage() {
    echo "‰ΩøÁî®ÊñπÊ≥ï:\n";
    echo "  php folder_merger.php [ÈÄâÈ°π]\n\n";
    echo "ÈÄâÈ°π:\n";
    echo "  --preview    È¢ÑËßàÊ®°ÂºèÔºå‰∏çÊâßË°åÂÆûÈôÖÊìç‰Ωú\n";
    echo "  --execute    ÊâßË°åÊ®°ÂºèÔºåÂÆûÈôÖÂêàÂπ∂ÂíåÂà†Èô§Êñá‰ª∂Â§π\n";
    echo "  --help       ÊòæÁ§∫Ê≠§Â∏ÆÂä©‰ø°ÊÅØ\n\n";
    echo "Á§∫‰æã:\n";
    echo "  php folder_merger.php --preview   # È¢ÑËßàÂ∞ÜË¶ÅÊâßË°åÁöÑÊìç‰Ωú\n";
    echo "  php folder_merger.php --execute   # ÊâßË°åÂÆûÈôÖÁöÑÂêàÂπ∂Êìç‰Ωú\n";
}

// ‰∏ªÁ®ãÂ∫?
try {
    $mode = isset($argv[1]) ? $argv[1] : '--help';
    
    if ($mode === '--help') {
        showUsage(];
        exit(0];
    }
    
    $dryRun = ($mode === '--preview'];
    $execute = ($mode === '--execute'];
    
    if (!$dryRun && !$execute) {
        echo "‚ù?Êó†ÊïàÁöÑÂèÇÊï? $mode\n\n";
        showUsage(];
        exit(1];
    }
    
    echo "ÂêØÂä®Êñá‰ª∂Â§πÂêàÂπ∂Â∑•ÂÖ?..\n";
    echo "Ê®°Âºè: " . ($dryRun ? "È¢ÑËßàÊ®°Âºè" : "ÊâßË°åÊ®°Âºè") . "\n\n";
    
    $rootPath = __DIR__ . '/..';
    $merger = new FolderMerger($rootPath];
    
    // Êü•ÊâæÈáçÂêçÊñá‰ª∂Â§?
    if (!$merger->findDuplicateFolders()) {
        exit(0];
    }
    
    // ÂêàÂπ∂Êñá‰ª∂Â§?
    $merger->mergeFolders($dryRun];
    
    // Âà†Èô§ÂéüÂßãÊñá‰ª∂Â§?
    if ($execute) {
        $merger->deleteOriginalFolders($dryRun];
    }
    
    // ÁîüÊàêÊä•Âëä
    $success = $merger->generateReport(];
    
    exit($success ? 0 : 1];
    
} catch (Exception $e) {
    echo "‚ù?ÈîôËØØ: " . $e->getMessage() . "\n";
    exit(1];
}

