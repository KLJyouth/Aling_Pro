class StateManager{constructor(){this.state=new Proxy({},{set:(target,property,value)=>{const oldValue=target[property];target[property]=value;this.notifySubscribers(property,value,oldValue);return true;}});this.subscribers=new Map();this.middlewares=[];this.history=[];this.maxHistorySize=50;}getState(key=null){if(key===null){return{...this.state};}return this.getNestedValue(this.state,key);}setState(key,value){const action={type: 'SET_STATE',key,value,timestamp: Date.now()};const processedAction=this.executeMiddlewares(action);if(processedAction===null){return;}this.addToHistory(key,this.getNestedValue(this.state,key),value);this.setNestedValue(this.state,key,value);}setBatchState(updates){const action={type: 'SET_BATCH_STATE',updates,timestamp: Date.now()};const processedAction=this.executeMiddlewares(action);if(processedAction===null){return;}Object.entries(updates).forEach(([key,value])=>{this.addToHistory(key,this.getNestedValue(this.state,key),value);this.setNestedValue(this.state,key,value);});}subscribe(key,callback){if(!this.subscribers.has(key)){this.subscribers.set(key,new Set());}this.subscribers.get(key).add(callback);return()=>{this.unsubscribe(key,callback);};}unsubscribe(key,callback){if(this.subscribers.has(key)){this.subscribers.get(key).delete(callback);}}notifySubscribers(key,newValue,oldValue){if(this.subscribers.has(key)){this.subscribers.get(key).forEach(callback=>{try{callback(newValue,oldValue,key);}catch(error){console.error('状态订阅者回调错误:',error);}});}const keyParts=key.split('.');for(let i=keyParts.length-1;i > 0;i--){const parentKey=keyParts.slice(0,i).join('.');if(this.subscribers.has(parentKey)){const parentValue=this.getNestedValue(this.state,parentKey);this.subscribers.get(parentKey).forEach(callback=>{try{callback(parentValue,undefined,parentKey);}catch(error){console.error('状态订阅者回调错误:',error);}});}}if(this.subscribers.has('*')){this.subscribers.get('*').forEach(callback=>{try{callback(newValue,oldValue,key);}catch(error){console.error('状态订阅者回调错误:',error);}});}}addMiddleware(middleware){this.middlewares.push(middleware);}executeMiddlewares(action){let currentAction=action;for(const middleware of this.middlewares){try{currentAction=middleware(currentAction,this.state);if(currentAction===null || currentAction===false){return null;}}catch(error){console.error('中间件执行错误:',error);return null;}}return currentAction;}addToHistory(key,oldValue,newValue){this.history.push({key,oldValue: this.deepClone(oldValue),newValue: this.deepClone(newValue),timestamp: Date.now()});if(this.history.length > this.maxHistorySize){this.history.shift();}}getHistory(key=null){if(key===null){return [...this.history];}return this.history.filter(record=> record.key===key);}clearHistory(){this.history=[];}undo(key=null){if(this.history.length===0){return false;}let targetRecord;if(key===null){targetRecord=this.history.pop();}else{const index=this.history.findLastIndex(record=> record.key===key);if(index===-1){return false;}targetRecord=this.history.splice(index,1)[0];}this.setNestedValue(this.state,targetRecord.key,targetRecord.oldValue);return true;}getNestedValue(obj,path){return path.split('.').reduce((current,key)=>{return current && current[key] !==undefined ? current[key] : undefined;},obj);}setNestedValue(obj,path,value){const keys=path.split('.');const lastKey=keys.pop();const target=keys.reduce((current,key)=>{if(current[key]===undefined || current[key]===null){current[key]={};}return current[key];},obj);target[lastKey]=value;}deepClone(obj){if(obj===null || typeof obj !=='object'){return obj;}if(obj instanceof Date){return new Date(obj);}if(Array.isArray(obj)){return obj.map(item=> this.deepClone(item));}const cloned={};for(const key in obj){if(obj.hasOwnProperty(key)){cloned[key]=this.deepClone(obj[key]);}}return cloned;}reset(key=null){if(key===null){Object.keys(this.state).forEach(k=>{delete this.state[k];});}else{this.setNestedValue(this.state,key,undefined);}}computed(key,computeFn,dependencies=[]){const compute=()=>{try{const result=computeFn(this.state);this.setState(key,result);}catch(error){console.error('计算属性错误:',error);}};compute();dependencies.forEach(dep=>{this.subscribe(dep,compute);});if(dependencies.length===0){this.subscribe('*',compute);}}reactive(initialState={}){const reactiveObj={...initialState};Object.keys(reactiveObj).forEach(key=>{this.setState(key,reactiveObj[key]);});return new Proxy(reactiveObj,{get:(target,property)=>{return this.getState(property.toString());},set:(target,property,value)=>{this.setState(property.toString(),value);return true;}});}persist(key,storageKey=null){const actualStorageKey=storageKey || `state_${key}`;try{const stored=localStorage.getItem(actualStorageKey);if(stored){const value=JSON.parse(stored);this.setState(key,value);}}catch(error){console.error('恢复持久化状态失败:',error);}this.subscribe(key,(value)=>{try{localStorage.setItem(actualStorageKey,JSON.stringify(value));}catch(error){console.error('保存持久化状态失败:',error);}});}getDebugInfo(){return{state: this.getState(),subscribers: Array.from(this.subscribers.keys()),middlewares: this.middlewares.length,historySize: this.history.length};}}const loggingMiddleware=(action,state)=>{if(window.app && window.app.config.debug){}return action;};const validationMiddleware=(action,state)=>{return action;};export{StateManager,loggingMiddleware,validationMiddleware};