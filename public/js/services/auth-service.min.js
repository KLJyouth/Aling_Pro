class AuthService{constructor(httpClient){this.http=httpClient;this.currentUser=null;this.token=null;this.refreshTimer=null;this.eventBus=new EventTarget();this.init();}init(){this.token=localStorage.getItem('auth_token');if(this.token){this.http.setDefaultHeaders({'Authorization': `Bearer ${this.token}`});}}async checkAuthStatus(){if(!this.token){return false;}try{const response=await this.http.get('/auth/me');this.currentUser=response.data.user;this.setupTokenRefresh();this.emit('authenticated',this.currentUser);return true;}catch(error){console.error('认证检查失败:',error);this.logout();return false;}}async login(credentials){try{const response=await this.http.post('/auth/login',credentials);if(response.data.success){this.token=response.data.token;this.currentUser=response.data.user;localStorage.setItem('auth_token',this.token);this.http.setDefaultHeaders({'Authorization': `Bearer ${this.token}`});this.setupTokenRefresh();this.emit('authenticated',this.currentUser);return{success: true,user: this.currentUser,token: this.token};}else{return{success: false,message: response.data.message || '登录失败'};}}catch(error){console.error('登录失败:',error);return{success: false,message: error.response?.data?.message || '登录失败，请检查网络连接'};}}async register(userData){try{const response=await this.http.post('/auth/register',userData);if(response.data.success){return{success: true,message: response.data.message || '注册成功',user: response.data.user};}else{return{success: false,message: response.data.message || '注册失败'};}}catch(error){console.error('注册失败:',error);return{success: false,message: error.response?.data?.message || '注册失败，请检查网络连接'};}}async logout(){try{if(this.token){await this.http.post('/auth/logout');}}catch(error){console.error('登出请求失败:',error);}finally{this.clearAuthData();this.emit('unauthenticated');}}async refreshToken(){try{const response=await this.http.post('/auth/refresh');if(response.data.success){this.token=response.data.token;localStorage.setItem('auth_token',this.token);this.http.setDefaultHeaders({'Authorization': `Bearer ${this.token}`});this.setupTokenRefresh();this.emit('tokenRefreshed',this.token);return true;}else{throw new Error('Token刷新失败');}}catch(error){console.error('Token刷新失败:',error);this.logout();return false;}}async changePassword(oldPassword,newPassword){try{const response=await this.http.post('/auth/change-password',{old_password: oldPassword,new_password: newPassword});if(response.data.success){return{success: true,message: response.data.message || '密码修改成功'};}else{return{success: false,message: response.data.message || '密码修改失败'};}}catch(error){console.error('修改密码失败:',error);return{success: false,message: error.response?.data?.message || '密码修改失败'};}}async forgotPassword(email){try{const response=await this.http.post('/auth/forgot-password',{email});if(response.data.success){return{success: true,message: response.data.message || '重置链接已发送到您的邮箱'};}else{return{success: false,message: response.data.message || '发送失败'};}}catch(error){console.error('发送重置邮件失败:',error);return{success: false,message: error.response?.data?.message || '发送失败'};}}async resetPassword(token,newPassword){try{const response=await this.http.post('/auth/reset-password',{token,password: newPassword});if(response.data.success){return{success: true,message: response.data.message || '密码重置成功'};}else{return{success: false,message: response.data.message || '密码重置失败'};}}catch(error){console.error('重置密码失败:',error);return{success: false,message: error.response?.data?.message || '密码重置失败'};}}async verifyEmail(token){try{const response=await this.http.post('/auth/verify-email',{token});if(response.data.success){if(this.currentUser){this.currentUser.email_verified=true;this.emit('userUpdated',this.currentUser);}return{success: true,message: response.data.message || '邮箱验证成功'};}else{return{success: false,message: response.data.message || '邮箱验证失败'};}}catch(error){console.error('邮箱验证失败:',error);return{success: false,message: error.response?.data?.message || '邮箱验证失败'};}}async resendVerificationEmail(){try{const response=await this.http.post('/auth/resend-verification');if(response.data.success){return{success: true,message: response.data.message || '验证邮件已重新发送'};}else{return{success: false,message: response.data.message || '发送失败'};}}catch(error){console.error('重发验证邮件失败:',error);return{success: false,message: error.response?.data?.message || '发送失败'};}}async updateProfile(userData){try{const response=await this.http.put('/user/profile',userData);if(response.data.success){this.currentUser={...this.currentUser,...response.data.user};this.emit('userUpdated',this.currentUser);return{success: true,message: response.data.message || '个人信息更新成功',user: this.currentUser};}else{return{success: false,message: response.data.message || '更新失败'};}}catch(error){console.error('更新用户信息失败:',error);return{success: false,message: error.response?.data?.message || '更新失败'};}}setupTokenRefresh(){if(this.refreshTimer){clearTimeout(this.refreshTimer);}try{const payload=JSON.parse(atob(this.token.split('.')[1]));const expirationTime=payload.exp*1000;const currentTime=Date.now();const timeUntilExpiry=expirationTime-currentTime;const refreshTime=Math.max(timeUntilExpiry-5*60*1000,0);if(refreshTime > 0){this.refreshTimer=setTimeout(()=>{this.refreshToken();},refreshTime);}else{this.refreshToken();}}catch(error){console.error('解析token失败:',error);this.refreshTimer=setTimeout(()=>{this.refreshToken();},55*60*1000);}}clearAuthData(){this.currentUser=null;this.token=null;localStorage.removeItem('auth_token');this.http.setDefaultHeaders({'Authorization': undefined});if(this.refreshTimer){clearTimeout(this.refreshTimer);this.refreshTimer=null;}}hasPermission(permission){if(!this.currentUser){return false;}if(this.currentUser.role==='admin'){return true;}return this.currentUser.permissions?.includes(permission)|| false;}hasRole(role){return this.currentUser?.role===role;}getCurrentUser(){return this.currentUser;}getToken(){return this.token;}isAuthenticated(){return !!this.token && !!this.currentUser;}on(eventName,handler){this.eventBus.addEventListener(eventName,handler);}off(eventName,handler){this.eventBus.removeEventListener(eventName,handler);}emit(eventName,data=null){this.eventBus.dispatchEvent(new CustomEvent(eventName,{detail: data}));}}export{AuthService};