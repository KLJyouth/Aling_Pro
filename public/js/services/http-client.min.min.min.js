class HttpClient{constructor(baseURL=''){this.baseURL=baseURL;this.defaultHeaders={'Content-Type': 'application/json','Accept': 'application/json','X-Requested-With': 'XMLHttpRequest'};this.interceptors={request: [],response: []};this.setupInterceptors();}setupInterceptors(){this.addRequestInterceptor((config)=>{const token=localStorage.getItem('auth_token');if(token){config.headers.Authorization=`Bearer ${token}`;}return config;});this.addResponseInterceptor((response)=> response,(error)=>{if(error.status===401){localStorage.removeItem('auth_token');window.location.href='/login';}else if(error.status===403){window.app.getService('notifications').error('权限不足','您没有权限执行此操作');}else if(error.status >=500){window.app.getService('notifications').error('服务器错误','服务器暂时不可用，请稍后重试');}return Promise.reject(error);});}addRequestInterceptor(fulfilled,rejected){this.interceptors.request.push({fulfilled,rejected});}addResponseInterceptor(fulfilled,rejected){this.interceptors.response.push({fulfilled,rejected});}async executeRequestInterceptors(config){for(const interceptor of this.interceptors.request){try{config=await interceptor.fulfilled(config);}catch(error){if(interceptor.rejected){await interceptor.rejected(error);}throw error;}}return config;}async executeResponseInterceptors(response,error=null){for(const interceptor of this.interceptors.response){try{if(error){if(interceptor.rejected){response=await interceptor.rejected(error);}}else{response=await interceptor.fulfilled(response);}}catch(err){error=err;}}if(error){throw error;}return response;}async request(config){try{const finalConfig={method: 'GET',headers:{...this.defaultHeaders},...config,url: this.baseURL+config.url};const interceptedConfig=await this.executeRequestInterceptors(finalConfig);const response=await fetch(interceptedConfig.url,{method: interceptedConfig.method,headers: interceptedConfig.headers,body: interceptedConfig.data ? JSON.stringify(interceptedConfig.data): undefined,credentials: 'same-origin'});let data;const contentType=response.headers.get('content-type');if(contentType && contentType.includes('application/json')){data=await response.json();}else{data=await response.text();}const result={data,status: response.status,statusText: response.statusText,headers: response.headers,config: interceptedConfig};if(!response.ok){const error=new Error(`HTTP ${response.status}: ${response.statusText}`);error.response=result;error.status=response.status;return await this.executeResponseInterceptors(null,error);}return await this.executeResponseInterceptors(result);}catch(error){if(!error.response){error.message='网络错误，请检查您的网络连接';}return await this.executeResponseInterceptors(null,error);}}async get(url,params={},config={}){const urlObj=new URL(this.baseURL+url,window.location.origin);Object.keys(params).forEach(key=>{if(params[key] !==undefined && params[key] !==null){urlObj.searchParams.append(key,params[key]);}});return this.request({...config,method: 'GET',url: urlObj.pathname+urlObj.search});}async post(url,data={},config={}){return this.request({...config,method: 'POST',url,data});}async put(url,data={},config={}){return this.request({...config,method: 'PUT',url,data});}async delete(url,config={}){return this.request({...config,method: 'DELETE',url});}async patch(url,data={},config={}){return this.request({...config,method: 'PATCH',url,data});}async upload(url,file,options={}){const formData=new FormData();formData.append('file',file);if(options.fields){Object.keys(options.fields).forEach(key=>{formData.append(key,options.fields[key]);});}const config={method: 'POST',url,headers:{...this.defaultHeaders,'Content-Type': undefined},body: formData};const interceptedConfig=await this.executeRequestInterceptors(config);try{const response=await fetch(this.baseURL+interceptedConfig.url,{method: interceptedConfig.method,headers: Object.fromEntries(Object.entries(interceptedConfig.headers).filter(([key,value])=> value !==undefined)),body: interceptedConfig.body,credentials: 'same-origin'});let data;const contentType=response.headers.get('content-type');if(contentType && contentType.includes('application/json')){data=await response.json();}else{data=await response.text();}const result={data,status: response.status,statusText: response.statusText,headers: response.headers,config: interceptedConfig};if(!response.ok){const error=new Error(`HTTP ${response.status}: ${response.statusText}`);error.response=result;error.status=response.status;return await this.executeResponseInterceptors(null,error);}return await this.executeResponseInterceptors(result);}catch(error){if(!error.response){error.message='文件上传失败，请检查网络连接';}return await this.executeResponseInterceptors(null,error);}}async all(requests){try{const results=await Promise.allSettled(requests);return results.map(result=>{if(result.status==='fulfilled'){return result.value;}else{throw result.reason;}});}catch(error){throw new Error('并发请求失败: '+error.message);}}setDefaultHeaders(headers){this.defaultHeaders={...this.defaultHeaders,...headers};}setBaseURL(baseURL){this.baseURL=baseURL;}create(config={}){return new HttpClient(config.baseURL || this.baseURL);}}export{HttpClient};