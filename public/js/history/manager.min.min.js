export class HistoryManager{constructor(){this.sessions=[];this.currentSession=null;this.callbacks={onSelectHistory:()=> console.warn('onSelectHistory callback not set')};}setCallback(name,fn){if(typeof fn==='function'){this.callbacks[name]=fn;}else{console.error(`Invalid callback for ${name}`);}}callCallback(name,...args){try{return this.callbacks[name](...args);}catch(error){console.error(`Error in ${name}callback:`,error);}}async loadSessions(userName){try{this.loadFromLocalStorage();const response=await fetch('/api/chat/sessions');if(!response.ok){throw new Error('加载会话失败');}const data=await response.json();if(data.success){this.sessions=data.sessions;this.saveToLocalStorage();}return this.sessions;}catch(error){console.error('加载会话失败:',error);return this.sessions;}}async getSessionDetails(sessionId){try{const cachedSession=this.sessions.find(s=> s.id===sessionId);if(cachedSession && cachedSession.messages){return cachedSession;}const response=await fetch(`/api/chat/sessions/${sessionId}`);if(!response.ok){throw new Error('加载会话详情失败');}const data=await response.json();if(data.success){const index=this.sessions.findIndex(s=> s.id===sessionId);if(index !==-1){this.sessions[index]={...this.sessions[index],...data.session};}else{this.sessions.push(data.session);}this.saveToLocalStorage();return data.session;}}catch(error){console.error('加载会话详情失败:',error);throw error;}}async createSession(){try{const response=await fetch('/api/chat/sessions',{method: 'POST',headers:{'Content-Type': 'application/json'}});if(!response.ok){throw new Error('创建会话失败');}const data=await response.json();if(data.success){const newSession={id: data.sessionId,messages: [],createdAt: new Date().toISOString(),lastActive: new Date().toISOString()};this.sessions.unshift(newSession);this.currentSession=newSession;this.saveToLocalStorage();return newSession;}}catch(error){console.error('创建会话失败:',error);throw error;}}async deleteSession(sessionId){try{const response=await fetch(`/api/chat/sessions/${sessionId}`,{method: 'DELETE'});if(!response.ok){throw new Error('删除会话失败');}const data=await response.json();if(data.success){this.sessions=this.sessions.filter(s=> s.id !==sessionId);if(this.currentSession?.id===sessionId){this.currentSession=null;}this.saveToLocalStorage();return true;}}catch(error){console.error('删除会话失败:',error);throw error;}}async addMessage(message){if(!this.currentSession){await this.createSession();}try{const response=await fetch(`/api/chat/sessions/${this.currentSession.id}/messages`,{method: 'POST',headers:{'Content-Type': 'application/json'},body: JSON.stringify(message)});if(!response.ok){throw new Error('添加消息失败');}const data=await response.json();if(data.success){this.currentSession.messages.push(message);this.currentSession.lastActive=new Date().toISOString();this.saveToLocalStorage();this.callCallback('onHistoryChange',this.currentSession);return true;}}catch(error){console.error('添加消息失败:',error);throw error;}}saveToLocalStorage(){try{localStorage.setItem('chatSessions',JSON.stringify({sessions: this.sessions,currentSession: this.currentSession,timestamp: new Date().toISOString()}));}catch(error){console.error('保存到本地存储失败:',error);}}loadFromLocalStorage(){try{const data=JSON.parse(localStorage.getItem('chatSessions'));if(data && data.timestamp){const expired=new Date()-new Date(data.timestamp)> 24*60*60*1000;if(!expired){this.sessions=data.sessions || [];this.currentSession=data.currentSession;}}}catch(error){console.error('从本地存储加载失败:',error);}}}export function initHistoryManager(){return new HistoryManager();}