export function formatDate(date,format='YYYY-MM-DD HH:mm:ss'){const d=new Date(date);if(isNaN(d.getTime()))return '';const pad=(num)=> num.toString().padStart(2,'0');const replacements={'YYYY': d.getFullYear(),'MM': pad(d.getMonth()+1),'DD': pad(d.getDate()),'HH': pad(d.getHours()),'mm': pad(d.getMinutes()),'ss': pad(d.getSeconds())};return format.replace(/YYYY|MM|DD|HH|mm|ss/g,match=> replacements[match]);}export function validateUsername(username){return typeof username==='string' && username.length >=3 && username.length <=20 &&/^[a-zA-Z0-9_]+$/.test(username);}export function validateMessage(message){return typeof message==='string' && message.trim().length > 0 && message.length <=1000;}export function safeQuerySelector(selector,parent=document){try{return parent.querySelector(selector);}catch(error){console.error('Invalid selector:',selector,error);return null;}}export function debounce(func,delay=300){let timer;return function(...args){clearTimeout(timer);timer=setTimeout(()=>{func.apply(this,args);},delay);};}export function throttle(func,limit=300){let lastFunc;let lastRan;return function(...args){if(!lastRan){func.apply(this,args);lastRan=Date.now();}else{clearTimeout(lastFunc);lastFunc=setTimeout(()=>{if(Date.now()-lastRan >=limit){func.apply(this,args);lastRan=Date.now();}},limit-(Date.now()-lastRan));}};}export function deepMerge(target,source){const output=Object.assign({},target);if(typeof target !=='object' || typeof source !=='object'){return source;}for(const key in source){if(source.hasOwnProperty(key)){if(typeof source[key]==='object' && !Array.isArray(source[key])){output[key]=deepMerge(target[key] ||{},source[key]);}else{output[key]=source[key];}}}return output;}