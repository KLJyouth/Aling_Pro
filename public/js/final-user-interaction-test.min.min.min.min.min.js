class FinalUserInteractionTest{constructor(){this.testSequence=[];this.currentStep=0;this.startTime=Date.now();}async runFullUserSimulation(){try{await this.waitForPageReady();await this.simulateInitialVisit();await this.simulateGuestModeActivation();await this.simulateMessageConversation();await this.simulateUIInteractions();await this.simulateAdvancedFeatures();this.showFinalResults();}catch(error){console.error('❌ 用户交互测试失败:',error);this.showFinalResults();}}async waitForPageReady(){this.logStep('等待页面完全加载和初始化');let retries=0;const maxRetries=20;while(retries < maxRetries){if(window.chatInstance && document.getElementById('messageInput')&& document.getElementById('sendButton')&& typeof MessageProcessor !=='undefined'){this.logSuccess('页面已准备就绪');return;}await this.sleep(500);retries++;}throw new Error('页面加载超时');}async simulateInitialVisit(){this.logStep('模拟用户首次访问');const messagesContainer=document.getElementById('chatMessages');const welcomeMessage=messagesContainer.querySelector('[data-message-id="welcome"]');if(welcomeMessage){this.logSuccess('欢迎消息已显示');}else{this.logWarning('未找到欢迎消息');}const loginModal=document.getElementById('loginModal');if(loginModal){this.logSuccess('登录模态框存在');}}async simulateGuestModeActivation(){this.logStep('模拟用户选择访客模式');const guestButton=document.getElementById('guestModeButton');if(guestButton){guestButton.click();await this.sleep(500);const guestMode=localStorage.getItem('guestMode');if(guestMode==='true'){this.logSuccess('访客模式已激活');}else{this.logWarning('访客模式可能未正确设置');}}else{this.logWarning('未找到访客模式按钮');}}async simulateMessageConversation(){this.logStep('模拟用户发送消息对话');const messageInput=document.getElementById('messageInput');const sendButton=document.getElementById('sendButton');if(!messageInput || !sendButton){throw new Error('消息输入组件不可用');}const conversations=[{user: "你好，我想测试一下这个聊天功能",expectedKeywords: ["您好","测试","聊天"]},{user: "请告诉我今天的天气如何？",expectedKeywords: ["天气","今天"]},{user: "这里有一些**粗体文字**和 `代码示例`",expectedKeywords: ["粗体","代码"]}];for(let i=0;i < conversations.length;i++){const conv=conversations[i];this.logStep(`发送第${i+1}条消息: "${conv.user}"`);const messagesContainer=document.getElementById('chatMessages');const messageCountBefore=messagesContainer.children.length;messageInput.value=conv.user;messageInput.dispatchEvent(new Event('input',{bubbles: true}));await this.sleep(100);sendButton.click();await this.sleep(2000);const messageCountAfter=messagesContainer.children.length;if(messageCountAfter > messageCountBefore){this.logSuccess(`消息已发送，消息数量从 ${messageCountBefore}增加到 ${messageCountAfter}`);const latestMessages=Array.from(messagesContainer.children).slice(-2);if(latestMessages.length >=1){const userMessage=latestMessages.find(msg=> msg.classList.contains('user'));const aiMessage=latestMessages.find(msg=> msg.classList.contains('assistant'));if(userMessage){this.logSuccess('用户消息正确显示');}if(aiMessage){this.logSuccess('AI回复正确显示');const copyBtn=aiMessage.querySelector('.copy-button');const regenerateBtn=aiMessage.querySelector('.regenerate-button');const speakBtn=aiMessage.querySelector('.speak-button');if(copyBtn && regenerateBtn && speakBtn){this.logSuccess('AI消息操作按钮完整');}else{this.logWarning('AI消息操作按钮可能缺失');}}}}else{this.logWarning(`消息可能未正确发送或显示(消息数量未变化: ${messageCountBefore})`);}await this.sleep(1000);}}async simulateUIInteractions(){this.logStep('模拟用户界面交互');const buttons=[{id: 'settingsBtn',name: '设置按钮'},{id: 'historyBtn',name: '历史记录按钮'},{id: 'langSwitchBtn',name: '语言切换按钮'}];for(const btn of buttons){const element=document.getElementById(btn.id);if(element && element.onclick){this.logStep(`测试${btn.name}`);try{element.click();this.logSuccess(`${btn.name}点击成功`);}catch(error){this.logWarning(`${btn.name}点击失败: ${error.message}`);}await this.sleep(300);}else{this.logWarning(`${btn.name}不可用或缺少事件处理器`);}}const messagesContainer=document.getElementById('chatMessages');const aiMessages=messagesContainer.querySelectorAll('.message.assistant');if(aiMessages.length > 0){const latestAiMessage=aiMessages[aiMessages.length-1];const copyButton=latestAiMessage.querySelector('.copy-button');if(copyButton){this.logStep('测试复制按钮');try{copyButton.click();this.logSuccess('复制按钮点击成功');}catch(error){this.logWarning(`复制按钮失败: ${error.message}`);}}}}async simulateAdvancedFeatures(){this.logStep('测试高级功能');const messageInput=document.getElementById('messageInput');if(messageInput){this.logStep('测试Enter键发送消息');messageInput.value='这是通过Enter键发送的测试消息';messageInput.focus();const enterEvent=new KeyboardEvent('keydown',{key: 'Enter',code: 'Enter',keyCode: 13,which: 13,bubbles: true});messageInput.dispatchEvent(enterEvent);await this.sleep(1000);if(messageInput.value===''){this.logSuccess('Enter键发送功能正常');}else{this.logWarning('Enter键发送可能未生效');}}this.logStep('验证控制台API可用性');try{if(typeof manualTestHelper !=='undefined'){this.logSuccess('手动测试助手可用');}if(typeof window.ComprehensiveTest !=='undefined'){this.logSuccess('综合测试类可用');}if(typeof window.MessageFunctionalityTest !=='undefined'){this.logSuccess('消息功能测试类可用');}}catch(error){this.logWarning(`控制台API检查失败: ${error.message}`);}}logStep(message){this.currentStep++;const timestamp=this.getElapsedTime();this.testSequence.push({step: this.currentStep,type: 'step',message,timestamp});}logSuccess(message){const timestamp=this.getElapsedTime();this.testSequence.push({step: this.currentStep,type: 'success',message,timestamp});}logWarning(message){const timestamp=this.getElapsedTime();this.testSequence.push({step: this.currentStep,type: 'warning',message,timestamp});}getElapsedTime(){const elapsed=Date.now()-this.startTime;return `${(elapsed/1000).toFixed(1)}s`;}async sleep(ms){return new Promise(resolve=> setTimeout(resolve,ms));}showFinalResults(){const totalTime=this.getElapsedTime();console.log('\n'+'='.repeat(60));console.log('='.repeat(60));const summary={steps: this.testSequence.filter(t=> t.type==='step').length,successes: this.testSequence.filter(t=> t.type==='success').length,warnings: this.testSequence.filter(t=> t.type==='warning').length};const successRate=summary.steps > 0 ?((summary.successes/(summary.successes+summary.warnings))*100).toFixed(1): 0;this.testSequence.forEach(item=>{const icon=item.type==='step' ? '🔄' : item.type==='success' ? '✅' : '⚠️';});if(summary.warnings===0){}else if(summary.warnings <=2){}else if(summary.warnings <=4){}else{}if(summary.warnings > 0){const warningMessages=this.testSequence .filter(t=> t.type==='warning').map(t=> t.message);warningMessages.forEach((msg,index)=>{});}}}if(document.readyState==='loading'){document.addEventListener('DOMContentLoaded',()=>{setTimeout(async()=>{const test=new FinalUserInteractionTest();await test.runFullUserSimulation();},4000);});}else{setTimeout(async()=>{const test=new FinalUserInteractionTest();await test.runFullUserSimulation();},4000);}window.FinalUserInteractionTest=FinalUserInteractionTest;console.log('手动运行: new FinalUserInteractionTest().runFullUserSimulation()');