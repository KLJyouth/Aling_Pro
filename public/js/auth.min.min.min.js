const auth={apiConfig:{baseUrl: '/api',endpoints:{login: '/api/login.php',register: '/api/register.php',user: '/api/user.php',logout: '/api/login.php'}},isAuthenticated: false,user: null,token: null,refreshTimer: null,init(){this.checkAuthState();this.setupAuthListeners();this.setupTokenRefresh();},checkAuthState(){const token=localStorage.getItem('token')|| localStorage.getItem('auth_token');const user=localStorage.getItem('user_data');if(token && user){try{this.token=token;this.user=JSON.parse(user);this.isAuthenticated=true;localStorage.setItem('token',token);localStorage.setItem('auth_token',token);this.onAuthStateChanged(true);}catch(error){console.error('Auth state parse error:',error);this.logout();}}else if(token){this.token=token;this.isAuthenticated=true;localStorage.setItem('token',token);localStorage.setItem('auth_token',token);this.onAuthStateChanged(true);}else{this.isAuthenticated=false;this.user=null;this.token=null;this.onAuthStateChanged(false);}},showLoginModal(){const loginModal=document.getElementById('login-modal');if(loginModal){loginModal.classList.remove('hidden');loginModal.classList.add('flex');}else{console.warn('登录模态框不存在');}},hideLoginModal(){const loginModal=document.getElementById('loginModal');if(loginModal){loginModal.classList.add('hidden');loginModal.classList.remove('flex');}},setupAuthListeners(){const loginForm=document.getElementById('loginForm');const loginModal=document.getElementById('loginModal');const closeLoginModal=document.getElementById('closeLoginModal');const loginBtn=document.getElementById('loginBtn');const logoutBtn=document.getElementById('logoutBtn');if(loginForm){loginForm.addEventListener('submit',async(e)=>{e.preventDefault();const formData=new FormData(loginForm);await this.login(formData.get('username'),formData.get('password'));});}if(closeLoginModal){closeLoginModal.addEventListener('click',()=>{this.hideLoginModal();});}if(loginBtn){loginBtn.addEventListener('click',()=>{this.showLoginModal();});}if(logoutBtn){logoutBtn.addEventListener('click',()=>{this.logout();});}},async login(username,password,rememberMe=false){try{const response=await fetch(this.apiConfig.endpoints.login,{method: 'POST',headers:{'Content-Type': 'application/json','Accept': 'application/json',},body: JSON.stringify({username: username,password: password,remember_me: rememberMe})});const result=await response.json();if(result.success){this.token=result.token;this.user=result.user;this.isAuthenticated=true;localStorage.setItem('auth_token',this.token);localStorage.setItem('token',this.token);localStorage.setItem('user_data',JSON.stringify(this.user));if(result.session_id){localStorage.setItem('session_id',result.session_id);}if(rememberMe){localStorage.setItem('remember_me','true');}this.onAuthStateChanged(true);this.setupTokenRefresh();this.hideLoginModal();this.showMessage('登录成功','success');return{success: true,user: this.user};}else{throw new Error(result.message || '登录失败');}}catch(error){console.error('Login error:',error);return{success: false,message: error.message};}},async register(userData){try{const response=await fetch(this.apiConfig.endpoints.register,{method: 'POST',headers:{'Content-Type': 'application/json','Accept': 'application/json',},body: JSON.stringify(userData)});const result=await response.json();if(result.success){this.showMessage(result.message || '注册成功','success');return{success: true,user: result.user,message: result.message};}else{throw new Error(result.message || '注册失败');}}catch(error){console.error('Register error:',error);this.showMessage(error.message,'error');return{success: false,message: error.message};}},async logout(){try{if(this.token){await fetch(this.apiConfig.endpoints.logout,{method: 'DELETE',headers:{'Authorization': `Bearer ${this.token}`,'Content-Type': 'application/json','Accept': 'application/json',}});}}catch(error){console.error('Logout API error:',error);}finally{this.clearAuthState();}},clearAuthState(){this.isAuthenticated=false;this.user=null;this.token=null;localStorage.removeItem('auth_token');localStorage.removeItem('token');localStorage.removeItem('user_data');localStorage.removeItem('session_id');localStorage.removeItem('remember_me');if(this.refreshTimer){clearTimeout(this.refreshTimer);this.refreshTimer=null;}this.onAuthStateChanged(false);this.showMessage('已退出登录','info');},}}).catch(err=> console.warn('Logout API call failed:',err));}}catch(error){console.warn('Logout error:',error);}finally{this.isAuthenticated=false;this.user=null;this.token=null;localStorage.removeItem('auth_token');localStorage.removeItem('token');localStorage.removeItem('user_data');localStorage.removeItem('session_id');localStorage.removeItem('remember_me');if(this.refreshTimer){clearInterval(this.refreshTimer);this.refreshTimer=null;}this.onAuthStateChanged(false);if(window.location.pathname !=='/login.html' && window.location.pathname !=='/'){window.location.href='/login.html';}}},async getCurrentUser(){if(!this.token){throw new Error('未登录');}try{const response=await fetch(API_ENDPOINTS.USER_PROFILE,{method: 'GET',headers:{'Authorization': `Bearer ${this.token}`,'Content-Type': 'application/json',}});const result=await response.json();if(result.success){this.user=result.data;localStorage.setItem('user_data',JSON.stringify(this.user));return this.user;}else{throw new Error(result.message || '获取用户信息失败');}}catch(error){console.error('Get current user error:',error);throw error;}},async updateProfile(profileData){if(!this.user || !this.token){throw new Error('未登录');}try{const response=await fetch(API_ENDPOINTS.USER_UPDATE(this.user.id),{method: 'PUT',headers:{'Authorization': `Bearer ${this.token}`,'Content-Type': 'application/json',},body: JSON.stringify(profileData)});const result=await response.json();if(result.success){this.user=result.data;localStorage.setItem('user_data',JSON.stringify(this.user));return this.user;}else{throw new Error(result.message || '更新用户信息失败');}}catch(error){console.error('Update profile error:',error);throw error;}},async changePassword(currentPassword,newPassword){if(!this.token){throw new Error('未登录');}try{const response=await fetch(API_ENDPOINTS.USER_CHANGE_PASSWORD,{method: 'POST',headers:{'Authorization': `Bearer ${this.token}`,'Content-Type': 'application/json',},body: JSON.stringify({currentPassword: currentPassword,newPassword: newPassword})});const result=await response.json();if(result.success){return{success: true,message: result.message};}else{throw new Error(result.message || '修改密码失败');}}catch(error){console.error('Change password error:',error);throw error;}},setupTokenRefresh(){if(this.refreshTimer){clearInterval(this.refreshTimer);}this.refreshTimer=setInterval(()=>{this.checkTokenExpiry();},30*60*1000);},checkTokenExpiry(){if(!this.token){return;}try{const payload=JSON.parse(atob(this.token.split('.')[1]));const exp=payload.exp*1000;const now=Date.now();const timeUntilExpiry=exp-now;if(timeUntilExpiry < 5*60*1000){this.refreshToken();}}catch(error){console.warn('Token expiry check failed:',error);}},async refreshToken(){try{const response=await fetch(API_ENDPOINTS.AUTH_REFRESH,{method: 'POST',headers:{'Authorization': `Bearer ${this.token}`,'Content-Type': 'application/json',}});const result=await response.json();if(result.success){this.token=result.data.token;localStorage.setItem('auth_token',this.token);localStorage.setItem('token',this.token);return true;}else{this.logout();return false;}}catch(error){console.error('Token refresh error:',error);this.logout();return false;}},async authenticatedFetch(url,options={}){if(!this.token){throw new Error('未登录');}const headers={'Authorization': `Bearer ${this.token}`,'Content-Type': 'application/json',...(options.headers ||{})};const response=await fetch(url,{...options,headers});if(response.status===401){const refreshed=await this.refreshToken();if(refreshed){headers['Authorization']=`Bearer ${this.token}`;return fetch(url,{...options,headers});}else{throw new Error('认证失败');}}return response;},hasPermission(permission){if(!this.user){return false;}const userRole=this.user.role;if(userRole==='admin'){return true;}const rolePermissions={'moderator': ['user.read','user.update','chat.read','chat.create','chat.update'],'user': ['user.read.own','user.update.own','chat.read.own','chat.create','chat.update.own']};const permissions=rolePermissions[userRole] || [];return permissions.includes(permission)|| permissions.includes('*');},isAdmin(){return this.user && this.user.role==='admin';},isModerator(){return this.user && ['admin','moderator'].includes(this.user.role);},onAuthStateChanged(isLoggedIn){const authElements=document.querySelectorAll('[data-auth-required]');authElements.forEach(el=>{el.style.display=isLoggedIn ? '' : 'none';});this.updateHeaderUI(isLoggedIn);const event=new CustomEvent('authStateChanged',{detail:{isAuthenticated: isLoggedIn}});document.dispatchEvent(event);},updateHeaderUI(isLoggedIn){const userMenu=document.getElementById('userMenu');const loginBtn=document.getElementById('loginBtn');const logoutBtn=document.getElementById('logoutBtn');const userDisplay=document.getElementById('userDisplay');const userDisplayName=document.getElementById('userDisplayName');if(userMenu && isLoggedIn && this.user){userMenu.classList.remove('hidden');if(userDisplay){userDisplay.textContent=this.user.username || this.user.email || '用户';}if(userDisplayName){userDisplayName.textContent=this.user.username || this.user.name || this.user.email || '用户';}}else if(userMenu){userMenu.classList.add('hidden');}if(loginBtn){loginBtn.style.display=isLoggedIn ? 'none' : 'block';}if(logoutBtn){logoutBtn.style.display=isLoggedIn ? 'block' : 'none';}}};export{auth};