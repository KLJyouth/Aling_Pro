async function runEndToEndChatTest(){const results={passed: 0,failed: 0,tests: []};function addTest(name,passed,details=''){results.tests.push({name,passed,details});if(passed)results.passed++;else results.failed++;}try{try{const healthResponse=await fetch('/health');const healthData=await healthResponse.json();addTest('服务器健康检查',healthResponse.ok && healthData.status==='healthy',`数据库: ${healthData.database}`);}catch(error){addTest('服务器健康检查',false,error.message);}try{const chatResponse=await fetch('/api/chat/deepseek-chat',{method: 'POST',headers:{'Content-Type': 'application/json'},body: JSON.stringify({text: '这是一个API连接测试消息',temperature: 0.7})});const chatData=await chatResponse.json();addTest('聊天API连接',chatResponse.ok && chatData.success,`响应长度: ${chatData.assistantText?.length || 0}`);}catch(error){addTest('聊天API连接',false,error.message);}const requiredElements=[ 'messageInput','sendButton','chatMessages','guestModeButton','recordButton','settingsBtn' ];for(const elementId of requiredElements){const element=document.getElementById(elementId);addTest(`元素 ${elementId}`,element !==null,element ? '存在' : '缺失');}const hasCore=typeof ChatCore !=='undefined';const hasUI=typeof ChatUI !=='undefined';const hasAPI=typeof ChatAPI !=='undefined';const hasInstance=typeof window.chatInstance !=='undefined' && window.chatInstance !==null;addTest('ChatCore模块',hasCore);addTest('ChatUI模块',hasUI);addTest('ChatAPI模块',hasAPI);addTest('chatInstance实例',hasInstance);const guestButton=document.getElementById('guestModeButton');if(guestButton){guestButton.click();await new Promise(resolve=> setTimeout(resolve,500));const guestMode=localStorage.getItem('guestMode');addTest('访客模式激活',guestMode==='true');}else{addTest('访客模式激活',false,'按钮不存在');}const messageInput=document.getElementById('messageInput');const sendButton=document.getElementById('sendButton');if(messageInput && sendButton){const testMessage='这是一条端到端测试消息 '+Date.now();messageInput.value=testMessage;messageInput.dispatchEvent(new Event('input'));addTest('发送按钮启用',!sendButton.disabled);const chatMessages=document.getElementById('chatMessages');const messageCountBefore=chatMessages.children.length;sendButton.click();await new Promise(resolve=> setTimeout(resolve,2000));const messageCountAfter=chatMessages.children.length;addTest('消息添加到界面',messageCountAfter > messageCountBefore,`消息数量: ${messageCountBefore}→ ${messageCountAfter}`);}else{addTest('消息发送测试',false,'输入框或按钮缺失');}if(messageInput){messageInput.value='回车键测试消息';const enterEvent=new KeyboardEvent('keydown',{key: 'Enter',keyCode: 13,which: 13});messageInput.dispatchEvent(enterEvent);addTest('回车键发送',true,'事件已触发');}else{addTest('回车键发送',false,'输入框不存在');}const settingsBtn=document.getElementById('settingsBtn');const historyBtn=document.getElementById('historyBtn');addTest('设置按钮响应',settingsBtn && settingsBtn.onclick !==null);addTest('历史按钮响应',historyBtn && historyBtn.onclick !==null);}catch(error){console.error('测试过程中发生错误:',error);addTest('测试执行',false,error.message);}console.log('\n'+'='.repeat(50));console.log('='.repeat(50));console.log(`📊 成功率: ${Math.round((results.passed/(results.passed+results.failed))*100)}%`);results.tests.forEach(test=>{});if(results.failed > 0){results.tests.filter(t=> !t.passed).forEach(test=>{if(test.name.includes('服务器')){}else if(test.name.includes('API')){}else if(test.name.includes('元素')){}else if(test.name.includes('模块')){}});}return results;}setTimeout(()=>{runEndToEndChatTest().then(results=>{window.testResults=results;});},3000);