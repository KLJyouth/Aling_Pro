class IntegratedDetectionValidator{constructor(){this.testResults=[];this.passedTests=0;this.failedTests=0;}async runAllValidations(){console.log('━'.repeat(60));const validations=[()=> this.validateSystemInitialization(),()=> this.validateCoreDetectionEngine(),()=> this.validateExportFunctions(),()=> this.validateModalFunctions(),()=> this.validateLogManagement(),()=> this.validateKeyboardShortcuts(),()=> this.validateUIUpdates(),()=> this.validateCustomDetection(),()=> this.validateErrorHandling()];for(const validation of validations){try{await validation();}catch(error){this.recordResult('验证异常',false,error.message);}await this.delay(500);}this.showValidationResults();}async validateSystemInitialization(){this.recordResult('检测系统对象存在',typeof window.detectionSystem !=='undefined',window.detectionSystem ? '系统对象已创建' : '系统对象未创建');this.recordResult('初始化函数可用',typeof window.initializeDetectionSystem==='function','初始化函数正常');const requiredElements=[ 'progressCircle','progressText','totalTestsCount','logConsole','completedTestsCount','passedTestsCount' ];for(const elementId of requiredElements){this.recordResult(`HTML元素存在: ${elementId}`,document.getElementById(elementId)!==null,`元素 ${elementId}状态`);}}async validateCoreDetectionEngine(){if(!window.detectionSystem){this.recordResult('核心引擎验证',false,'检测系统未初始化');return;}const system=window.detectionSystem;const coreMethods=[ 'runFullDetection','runQuickDetection','runCustomDetection','startDetection','completeDetection','clearResults','updateProgress','updateSummaryStats','addLog' ];for(const method of coreMethods){this.recordResult(`核心方法: ${method}`,typeof system[method]==='function',`方法 ${method}可用性`);}this.recordResult('测试分类配置',system.testCategories && Object.keys(system.testCategories).length > 0,`配置了 ${Object.keys(system.testCategories ||{}).length}个测试分类`);this.recordResult('测试总数计算',system.totalTests > 0,`总计 ${system.totalTests}个测试项目`);}async validateExportFunctions(){const exportFunctions=[ 'exportResults','exportJSON','exportCSV','exportPDF' ];for(const func of exportFunctions){this.recordResult(`导出函数: ${func}`,typeof window[func]==='function',`函数 ${func}可用性`);}if(window.detectionSystem){const system=window.detectionSystem;this.recordResult('CSV数据生成',typeof system.generateCSVData==='function','CSV数据生成方法可用');this.recordResult('PDF库加载',typeof system.loadJsPDF==='function','PDF库加载方法可用');this.recordResult('JSON下载',typeof system.downloadJSON==='function','JSON下载方法可用');}}async validateModalFunctions(){if(!window.detectionSystem){this.recordResult('模态框验证',false,'检测系统未初始化');return;}const system=window.detectionSystem;const modalMethods=[ 'showSystemInfo','showCustomDetectionModal','collectSystemInfo','displaySystemInfoModal','generateCustomDetectionOptions' ];for(const method of modalMethods){this.recordResult(`模态框方法: ${method}`,typeof system[method]==='function',`方法 ${method}可用性`);}this.recordResult('Bootstrap模态框',typeof window.bootstrap !=='undefined' && typeof bootstrap.Modal==='function','Bootstrap模态框支持');}async validateLogManagement(){const logFunctions=[ 'logInfo','logSuccess','logWarning','logError','clearLog','toggleAutoScroll','exportLog' ];for(const func of logFunctions){this.recordResult(`日志函数: ${func}`,typeof window[func]==='function',`函数 ${func}可用性`);}const logConsole=document.getElementById('logConsole');this.recordResult('日志容器存在',logConsole !==null,'日志显示容器状态');if(logConsole){this.recordResult('自动滚动属性',logConsole.hasAttribute('data-auto-scroll')|| logConsole.getAttribute('data-auto-scroll')!==null,'自动滚动配置');}}async validateKeyboardShortcuts(){const shortcutFunctions=[ 'runQuickDetection','runFullDetection','clearResults','exportResults' ];for(const func of shortcutFunctions){this.recordResult(`快捷键函数: ${func}`,typeof window[func]==='function',`快捷键对应函数 ${func}可用性`);}try{const testEvent=new KeyboardEvent('keydown',{ctrlKey: true,key: 'r'});this.recordResult('键盘事件创建',testEvent instanceof KeyboardEvent,'可以创建键盘事件对象');}catch(error){this.recordResult('键盘事件创建',false,`键盘事件创建失败: ${error.message}`);}}async validateUIUpdates(){if(!window.detectionSystem){this.recordResult('UI更新验证',false,'检测系统未初始化');return;}const system=window.detectionSystem;const uiMethods=[ 'updateProgress','updateSummaryStats','updateCategoryStatus','updateTestStatus','updateControlButtons','updateLastUpdate' ];for(const method of uiMethods){this.recordResult(`UI更新方法: ${method}`,typeof system[method]==='function',`方法 ${method}可用性`);}try{system.updateProgress(50);const progressText=document.getElementById('progressText');this.recordResult('进度更新测试',progressText && progressText.textContent.includes('50'),'进度显示更新正常');}catch(error){this.recordResult('进度更新测试',false,`进度更新失败: ${error.message}`);}}async validateCustomDetection(){if(!window.detectionSystem){this.recordResult('自定义检测验证',false,'检测系统未初始化');return;}const system=window.detectionSystem;const customMethods=[ 'selectAllTests','clearAllTests','runSelectedTests','attachCustomModalEvents','updateSelectedCount','updateCategoryCheckboxes','runCustomDetectionTests' ];for(const method of customMethods){this.recordResult(`自定义检测方法: ${method}`,typeof system[method]==='function',`方法 ${method}可用性`);}this.recordResult('测试名称映射',typeof system.getTestDisplayName==='function','测试名称映射方法可用');if(typeof system.getTestDisplayName==='function'){const testName=system.getTestDisplayName('serverHealth');this.recordResult('测试名称映射功能',testName && testName !=='serverHealth',`映射结果: ${testName}`);}}async validateErrorHandling(){if(!window.detectionSystem){this.recordResult('错误处理验证',false,'检测系统未初始化');return;}const system=window.detectionSystem;try{system.logError('测试错误消息');this.recordResult('错误日志记录',true,'错误日志记录正常');}catch(error){this.recordResult('错误日志记录',false,`错误日志记录失败: ${error.message}`);}try{system.updateProgress(null);this.recordResult('进度更新错误处理',true,'进度更新错误处理正常');}catch(error){this.recordResult('进度更新错误处理',false,`进度更新错误处理失败: ${error.message}`);}try{system.updateTestStatus('non-existent-test','success');this.recordResult('不存在元素处理',true,'不存在元素处理正常');}catch(error){this.recordResult('不存在元素处理',false,`不存在元素处理失败: ${error.message}`);}}recordResult(testName,passed,message){this.testResults.push({name: testName,passed: passed,message: message,timestamp: new Date().toISOString()});if(passed){this.passedTests++;}else{this.failedTests++;}}showValidationResults(){console.log('━'.repeat(60));const successRate=((this.passedTests/this.testResults.length)*100).toFixed(1);if(this.failedTests > 0){this.testResults .filter(result=> !result.passed).forEach(result=>{});}if(successRate >=95){}else if(successRate >=85){}else if(successRate >=70){}else{}this.exportValidationReport();}exportValidationReport(){const report={timestamp: new Date().toISOString(),summary:{totalTests: this.testResults.length,passedTests: this.passedTests,failedTests: this.failedTests,successRate:((this.passedTests/this.testResults.length)*100).toFixed(1)+'%'},details: this.testResults,recommendations: this.generateRecommendations()};if(typeof document !=='undefined'){const blob=new Blob([JSON.stringify(report,null,2)],{type: 'application/json'});const url=URL.createObjectURL(blob);const a=document.createElement('a');a.href=url;a.download=`integrated-detection-validation-${Date.now()}.json`;document.body.appendChild(a);a.click();document.body.removeChild(a);URL.revokeObjectURL(url);}return report;}generateRecommendations(){const recommendations=[];if(this.failedTests > 0){recommendations.push('检查并修复失败的验证项目');}if(this.passedTests/this.testResults.length < 0.9){recommendations.push('建议进行更全面的功能测试');}recommendations.push('定期运行验证以确保系统稳定性');recommendations.push('在新功能开发后重新运行验证');return recommendations;}delay(ms){return new Promise(resolve=> setTimeout(resolve,ms));}}window.detectionValidator=new IntegratedDetectionValidator();window.validateDetectionSystem=()=>{return window.detectionValidator.runAllValidations();};if(typeof document !=='undefined'){document.addEventListener('DOMContentLoaded',()=>{setTimeout(()=>{console.log('💡 输入 validateDetectionSystem()开始验证');console.log('💡 输入 detectionValidator.runAllValidations()运行完整验证');},3000);});}