class RealTimeSecurityDashboard{constructor(){this.isConnected=false;this.socket=null;this.threatData=[];this.statisticsData={};this.geographicData=new Map();this.attackTimeline=[];this.scene=null;this.camera=null;this.renderer=null;this.earth=null;this.threatMarkers=[];this.attackLines=[];this.monitoringStartTime=Date.now();this.totalThreats=0;this.blockedAttacks=0;this.activeConnections=0;this.init();}init(){this.initWebSocket();this.init3DVisualization();this.initRealTimeCharts();this.initControlPanel();this.startDataUpdateLoop();}initWebSocket(){try{this.socket=new WebSocket('ws: this.socket.onopen=()=>{this.isConnected=true;this.updateConnectionStatus('已连接','success');};this.socket.onmessage=(event)=>{try{const data=JSON.parse(event.data);this.handleRealTimeData(data);}catch(error){console.error('解析WebSocket数据失败:',error);}};this.socket.onclose=()=>{this.isConnected=false;this.updateConnectionStatus('已断开','error');setTimeout(()=> this.reconnectWebSocket(),5000);};this.socket.onerror=(error)=>{console.error('WebSocket连接错误:',error);this.updateConnectionStatus('连接错误','error');};}catch(error){console.error('初始化WebSocket失败:',error);this.initHttpPolling();}}handleRealTimeData(data){switch(data.type){case 'threat_detected': this.handleThreatDetection(data.data);break;case 'attack_blocked': this.handleAttackBlocked(data.data);break;case 'statistics_update': this.handleStatisticsUpdate(data.data);break;case 'system_status': this.handleSystemStatus(data.data);break;case 'geographic_update': this.handleGeographicUpdate(data.data);break;default: }}handleThreatDetection(threatData){this.totalThreats++;this.threatData.push(threatData);this.addThreatMarker(threatData);this.updateThreatList(threatData);this.updateStatistics();this.playThreatSound(threatData.threat_level);this.showThreatNotification(threatData);}handleAttackBlocked(attackData){this.blockedAttacks++;this.showBlockedAttack(attackData);this.updateStatistics();}init3DVisualization(){const container=document.getElementById('threat-globe-container');if(!container)return;this.scene=new THREE.Scene();this.scene.background=new THREE.Color(0x000011);this.camera=new THREE.PerspectiveCamera(75,container.clientWidth/container.clientHeight,0.1,1000);this.camera.position.set(0,0,3);this.renderer=new THREE.WebGLRenderer({antialias: true});this.renderer.setSize(container.clientWidth,container.clientHeight);this.renderer.shadowMap.enabled=true;this.renderer.shadowMap.type=THREE.PCFSoftShadowMap;container.appendChild(this.renderer.domElement);this.createEarth();this.addLighting();this.addControls();this.startRenderLoop();window.addEventListener('resize',()=> this.onWindowResize());}createEarth(){const geometry=new THREE.SphereGeometry(1,64,64);const loader=new THREE.TextureLoader();const earthTexture=loader.load('/assets/textures/earth_daymap.jpg');const bumpTexture=loader.load('/assets/textures/earth_normal.jpg');const material=new THREE.MeshPhongMaterial({map: earthTexture,bumpMap: bumpTexture,bumpScale: 0.05,shininess: 100});this.earth=new THREE.Mesh(geometry,material);this.scene.add(this.earth);this.addAtmosphere();}addAtmosphere(){const atmosphereGeometry=new THREE.SphereGeometry(1.05,64,64);const atmosphereMaterial=new THREE.MeshBasicMaterial({color: 0x00aaff,transparent: true,opacity: 0.1,side: THREE.BackSide});const atmosphere=new THREE.Mesh(atmosphereGeometry,atmosphereMaterial);this.scene.add(atmosphere);}addThreatMarker(threatData){const{lat,lon}=this.getCoordinatesFromIP(threatData.ip);const position=this.latLonToVector3(lat,lon,1.02);const color=this.getThreatColor(threatData.threat_level);const geometry=new THREE.SphereGeometry(0.02,16,16);const material=new THREE.MeshBasicMaterial({color: color,transparent: true,opacity: 0.9});const marker=new THREE.Mesh(geometry,material);marker.position.copy(position);marker.userData=threatData;this.scene.add(marker);this.threatMarkers.push(marker);this.addPulseEffect(marker,color);if(threatData.target){this.addAttackLine(threatData);}if(this.threatMarkers.length > 100){const oldMarker=this.threatMarkers.shift();this.scene.remove(oldMarker);}}addPulseEffect(marker,color){const pulseGeometry=new THREE.RingGeometry(0.03,0.08,16);const pulseMaterial=new THREE.MeshBasicMaterial({color: color,transparent: true,opacity: 0.5,side: THREE.DoubleSide});const pulse=new THREE.Mesh(pulseGeometry,pulseMaterial);pulse.position.copy(marker.position);pulse.lookAt(new THREE.Vector3(0,0,0));this.scene.add(pulse);const animatePulse=()=>{const scale=1+0.5*Math.sin(Date.now()*0.01);pulse.scale.setScalar(scale);pulseMaterial.opacity=0.5*Math.abs(Math.sin(Date.now()*0.005));if(this.threatMarkers.includes(marker)){requestAnimationFrame(animatePulse);}else{this.scene.remove(pulse);}};animatePulse();}addAttackLine(threatData){const sourcePos=this.latLonToVector3(threatData.source_lat || 0,threatData.source_lon || 0,1.02);const targetPos=this.latLonToVector3(threatData.target_lat || 0,threatData.target_lon || 0,1.02);const curve=new THREE.QuadraticBezierCurve3(sourcePos,sourcePos.clone().add(targetPos).multiplyScalar(0.7),targetPos);const points=curve.getPoints(50);const geometry=new THREE.BufferGeometry().setFromPoints(points);const material=new THREE.LineBasicMaterial({color: 0xff0000,transparent: true,opacity: 0.8});const line=new THREE.Line(geometry,material);this.scene.add(line);this.attackLines.push(line);this.animateAttackLine(line);}animateAttackLine(line){let opacity=1;const fadeOut=()=>{opacity-=0.02;line.material.opacity=opacity;if(opacity > 0){requestAnimationFrame(fadeOut);}else{this.scene.remove(line);const index=this.attackLines.indexOf(line);if(index >-1){this.attackLines.splice(index,1);}}};setTimeout(fadeOut,3000);}latLonToVector3(lat,lon,radius){const phi=(90-lat)*(Math.PI/180);const theta=(lon+180)*(Math.PI/180);const x=-(radius*Math.sin(phi)*Math.cos(theta));const z=(radius*Math.sin(phi)*Math.sin(theta));const y=(radius*Math.cos(phi));return new THREE.Vector3(x,y,z);}getCoordinatesFromIP(ip){const ipRanges={'192.168':{lat: 39.9042,lon: 116.4074},'10.0':{lat: 31.2304,lon: 121.4737},'172.16':{lat: 22.3193,lon: 114.1694},};for(const [range,coords] of Object.entries(ipRanges)){if(ip.startsWith(range)){return coords;}}return{lat:(Math.random()-0.5)*180,lon:(Math.random()-0.5)*360};}getThreatColor(threatLevel){if(threatLevel >=90)return 0xff0000;if(threatLevel >=70)return 0xff8800;if(threatLevel >=50)return 0xffff00;return 0x00ff00;}initRealTimeCharts(){this.initThreatTrendChart();this.initAttackTypeChart();this.initGeographicChart();this.initTrafficChart();}initThreatTrendChart(){const ctx=document.getElementById('threat-trend-chart');if(!ctx)return;this.threatTrendChart=new Chart(ctx,{type: 'line',data:{labels: [],datasets: [{label: '威胁检测数量',data: [],borderColor: '#ff4444',backgroundColor: 'rgba(255,68,68,0.1)',tension: 0.4}]},options:{responsive: true,animation: false,scales:{x:{type: 'time',time:{unit: 'minute'}},y:{beginAtZero: true}}}});}initAttackTypeChart(){const ctx=document.getElementById('attack-type-chart');if(!ctx)return;this.attackTypeChart=new Chart(ctx,{type: 'doughnut',data:{labels: ['SQL注入','XSS攻击','DDoS','暴力破解','恶意扫描','其他'],datasets: [{data: [0,0,0,0,0,0],backgroundColor: [ '#ff4444','#ff8844','#ffaa44','#44ff44','#4488ff','#8844ff' ]}]},options:{responsive: true,animation: false}});}updateThreatList(threatData){const threatList=document.getElementById('threat-list');if(!threatList)return;const threatItem=document.createElement('div');threatItem.className=`threat-item threat-level-${this.getThreatLevelName(threatData.threat_level)}`;threatItem.innerHTML=` <div class="threat-header"> <span class="threat-ip">${threatData.ip}</span> <span class="threat-level">${threatData.threat_level}</span> <span class="threat-time">${new Date().toLocaleTimeString()}</span> </div> <div class="threat-details"> <span class="threat-type">${threatData.threats.map(t=> t.type).join(',')}</span> <span class="threat-location">${threatData.location?.country || 'Unknown'}</span> </div> <div class="threat-actions"> <button onclick="this.blockIP('${threatData.ip}')" class="btn-block">封禁</button> <button onclick="this.analyzeIP('${threatData.ip}')" class="btn-analyze">分析</button> </div> `;threatList.insertBefore(threatItem,threatList.firstChild);while(threatList.children.length > 50){threatList.removeChild(threatList.lastChild);}}getThreatLevelName(level){if(level >=90)return 'critical';if(level >=70)return 'high';if(level >=50)return 'medium';return 'low';}updateStatistics(){document.getElementById('total-threats').textContent=this.totalThreats;document.getElementById('blocked-attacks').textContent=this.blockedAttacks;const uptime=Math.floor((Date.now()-this.monitoringStartTime)/1000);document.getElementById('uptime').textContent=this.formatUptime(uptime);const threatRate=this.totalThreats/Math.max(uptime/60,1);document.getElementById('threat-rate').textContent=threatRate.toFixed(2)+'/分钟';this.updateCharts();}updateCharts(){const now=new Date();if(this.threatTrendChart){this.threatTrendChart.data.labels.push(now);this.threatTrendChart.data.datasets[0].data.push(this.totalThreats);if(this.threatTrendChart.data.labels.length > 30){this.threatTrendChart.data.labels.shift();this.threatTrendChart.data.datasets[0].data.shift();}this.threatTrendChart.update('none');}}playThreatSound(threatLevel){if(!this.soundEnabled)return;const audioContext=new(window.AudioContext || window.webkitAudioContext)();const oscillator=audioContext.createOscillator();const gainNode=audioContext.createGain();oscillator.connect(gainNode);gainNode.connect(audioContext.destination);let frequency=440;if(threatLevel >=90)frequency=880;else if(threatLevel >=70)frequency=660;else if(threatLevel >=50)frequency=550;oscillator.frequency.setValueAtTime(frequency,audioContext.currentTime);oscillator.type='sine';gainNode.gain.setValueAtTime(0,audioContext.currentTime);gainNode.gain.linearRampToValueAtTime(0.3,audioContext.currentTime+0.01);gainNode.gain.exponentialRampToValueAtTime(0.01,audioContext.currentTime+0.5);oscillator.start(audioContext.currentTime);oscillator.stop(audioContext.currentTime+0.5);}showThreatNotification(threatData){const notification=document.createElement('div');notification.className=`threat-notification threat-level-${this.getThreatLevelName(threatData.threat_level)}`;notification.innerHTML=` <div class="notification-icon">🚨</div> <div class="notification-content"> <div class="notification-title">检测到威胁</div> <div class="notification-details"> IP: ${threatData.ip}| 级别: ${threatData.threat_level}| 类型: ${threatData.threats.map(t=> t.type).join(',')}</div> </div> <button class="notification-close" onclick="this.parentElement.remove()">×</button> `;const container=document.getElementById('notifications-container')|| document.body;container.appendChild(notification);setTimeout(()=>{if(notification.parentElement){notification.remove();}},10000);}formatUptime(seconds){const hours=Math.floor(seconds/3600);const minutes=Math.floor((seconds % 3600)/60);const secs=seconds % 60;return `${hours.toString().padStart(2,'0')}:${minutes.toString().padStart(2,'0')}:${secs.toString().padStart(2,'0')}`;}startDataUpdateLoop(){setInterval(()=>{if(this.isConnected){this.requestDataUpdate();}else{this.fetchDataViaHttp();}},5000);}requestDataUpdate(){if(this.socket && this.socket.readyState===WebSocket.OPEN){this.socket.send(JSON.stringify({type: 'request_update',timestamp: Date.now()}));}}async fetchDataViaHttp(){try{const response=await fetch('/api/real-time-monitoring/status');const data=await response.json();if(data.success){this.handleStatisticsUpdate(data.data);}}catch(error){console.error('获取监控数据失败:',error);}}initControlPanel(){const monitorToggle=document.getElementById('monitor-toggle');if(monitorToggle){monitorToggle.addEventListener('change',(e)=>{this.toggleMonitoring(e.target.checked);});}const soundToggle=document.getElementById('sound-toggle');if(soundToggle){this.soundEnabled=soundToggle.checked;soundToggle.addEventListener('change',(e)=>{this.soundEnabled=e.target.checked;});}const rotateToggle=document.getElementById('rotate-toggle');if(rotateToggle){this.autoRotate=rotateToggle.checked;rotateToggle.addEventListener('change',(e)=>{this.autoRotate=e.target.checked;});}}async toggleMonitoring(enabled){try{const response=await fetch('/api/real-time-monitoring/toggle',{method: 'POST',headers:{'Content-Type': 'application/json'},body: JSON.stringify({enabled})});const result=await response.json();if(result.success){this.updateConnectionStatus(enabled ? '监控中' : '已停止',enabled ? 'success' : 'warning');}}catch(error){console.error('切换监控状态失败:',error);}}updateConnectionStatus(status,type){const statusElement=document.getElementById('connection-status');if(statusElement){statusElement.textContent=status;statusElement.className=`status ${type}`;}}startRenderLoop(){const animate=()=>{requestAnimationFrame(animate);if(this.earth && this.autoRotate){this.earth.rotation.y+=0.002;}if(this.renderer && this.scene && this.camera){this.renderer.render(this.scene,this.camera);}};animate();}onWindowResize(){if(!this.camera || !this.renderer)return;const container=document.getElementById('threat-globe-container');if(!container)return;this.camera.aspect=container.clientWidth/container.clientHeight;this.camera.updateProjectionMatrix();this.renderer.setSize(container.clientWidth,container.clientHeight);}reconnectWebSocket(){if(!this.isConnected){this.initWebSocket();}}initHttpPolling(){this.updateConnectionStatus('HTTP轮询','warning');this.startDataUpdateLoop();}addLighting(){const ambientLight=new THREE.AmbientLight(0x404040,0.3);this.scene.add(ambientLight);const directionalLight=new THREE.DirectionalLight(0xffffff,1);directionalLight.position.set(5,5,5);directionalLight.castShadow=true;this.scene.add(directionalLight);}addControls(){this.controls=new THREE.OrbitControls(this.camera,this.renderer.domElement);this.controls.enableDamping=true;this.controls.dampingFactor=0.05;this.controls.enableZoom=true;this.controls.enablePan=false;}handleStatisticsUpdate(data){this.statisticsData=data;this.updateStatistics();}handleSystemStatus(data){}handleGeographicUpdate(data){this.geographicData.set(data.country,data);}showBlockedAttack(attackData){}async blockIP(ip){if(!confirm(`确定要封禁IP ${ip}吗？`))return;try{const response=await fetch('/api/security/block-ip',{method: 'POST',headers:{'Content-Type': 'application/json'},body: JSON.stringify({ip,duration: 3600})});const result=await response.json();if(result.success){alert(`IP ${ip}已被封禁`);}else{alert(`封禁失败: ${result.message}`);}}catch(error){console.error('封禁IP失败:',error);alert('封禁操作失败');}}async analyzeIP(ip){try{const response=await fetch(`/api/security/analyze-ip?ip=${ip}`);const result=await response.json();if(result.success){this.showIPAnalysisModal(ip,result.data);}}catch(error){console.error('分析IP失败:',error);}}showIPAnalysisModal(ip,analysis){const modal=document.createElement('div');modal.className='ip-analysis-modal';modal.innerHTML=` <div class="modal-content"> <div class="modal-header"> <h3>IP分析报告: ${ip}</h3> <button class="modal-close" onclick="this.closest('.ip-analysis-modal').remove()">×</button> </div> <div class="modal-body"> <div class="analysis-section"> <h4>基本信息</h4> <p>国家: ${analysis.country || 'Unknown'}</p> <p>城市: ${analysis.city || 'Unknown'}</p> <p>ISP: ${analysis.isp || 'Unknown'}</p> </div> <div class="analysis-section"> <h4>威胁评估</h4> <p>风险等级: ${analysis.risk_level || 'Unknown'}</p> <p>威胁类型: ${analysis.threat_types?.join(',')|| 'None'}</p> <p>检测次数: ${analysis.detection_count || 0}</p> </div> <div class="analysis-section"> <h4>历史记录</h4> <div class="history-list"> ${analysis.history?.map(h=> ` <div class="history-item"> <span>${h.timestamp}</span> <span>${h.action}</span> </div> `).join('')|| '<p>无历史记录</p>'}</div> </div> </div> </div> `;document.body.appendChild(modal);}}let securityDashboard;document.addEventListener('DOMContentLoaded',()=>{securityDashboard=new RealTimeSecurityDashboard();window.securityDashboard=securityDashboard;});window.RealTimeSecurityDashboard=RealTimeSecurityDashboard;