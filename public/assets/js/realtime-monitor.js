try {
 class RealTimeMonitor { constructor() { this.isMonitoring = false; this.monitorInterval = null; this.errorCount = 0; this.lastErrors = []; this.statusHistory = []; } startMonitoring() { if (this.isMonitoring) {  return; }  this.isMonitoring = true; // 监控控制台错误 this.setupErrorCapture(); // 定期检查系统状态 this.monitorInterval = setInterval(() => { this.checkSystemStatus(); }, 2000); // 监控DOM变化 this.setupDOMObserver();  } stopMonitoring() { if (!this.isMonitoring) return; this.isMonitoring = false; if (this.monitorInterval) { clearInterval(this.monitorInterval); }  } setupErrorCapture() { // 保存原始的错误处理方法 const originalError = window.console.error; const originalWarn = window.console.warn; window.console.error = (...args) => { this.errorCount++; const errorMsg = args.join(' '); this.lastErrors.push({ type: 'error', message: errorMsg, timestamp: new Date().toISOString() }); // 保持错误历史在合理范围内 if (this.lastErrors.length > 10) { this.lastErrors.shift(); }  originalError.apply(console, args); }; window.console.warn = (...args) => { const warnMsg = args.join(' ');  originalWarn.apply(console, args); }; // 监控未捕获的错误 window.addEventListener('error', (event) => { this.errorCount++; const errorInfo = { type: 'uncaught', message: event.message, filename: event.filename, lineno: event.lineno, colno: event.colno, timestamp: new Date().toISOString() }; this.lastErrors.push(errorInfo);  }); } checkSystemStatus() { const status = { timestamp: new Date().toISOString(), chatContainer: !!document.getElementById('chatContainer'), messageInput: !!document.getElementById('messageInput'), sendButton: !!document.getElementById('sendButton'), messageCount: document.querySelectorAll('.message').length, hasGlobalChatCore: typeof window.ChatCore !== 'undefined', hasGlobalChatUI: typeof window.ChatUI !== 'undefined', hasGlobalChatAPI: typeof window.ChatAPI !== 'undefined', hasMessageProcessor: typeof window.MessageProcessor !== 'undefined', hasMessageRenderer: typeof window.MessageRenderer !== 'undefined', errorCount: this.errorCount, recentErrors: this.lastErrors.slice(-3) }; // 检查关键功能 if (typeof window.MessageProcessor !== 'undefined') { status.processorMethods = { processUserMessage: typeof MessageProcessor.processUserMessage === 'function', processAssistantMessage: typeof MessageProcessor.processAssistantMessage === 'function', escapeHtml: typeof MessageProcessor.escapeHtml === 'function' }; } this.statusHistory.push(status); if (this.statusHistory.length > 20) { this.statusHistory.shift(); } // 报告状态变化 this.reportStatusChanges(status); // 暴露状态到全局 window.currentSystemStatus = status; } reportStatusChanges(currentStatus) { const previousStatus = this.statusHistory[this.statusHistory.length - 2]; if (!previousStatus) return; // 检查消息数量变化 if (currentStatus.messageCount !== previousStatus.messageCount) {  } // 检查错误增加 if (currentStatus.errorCount > previousStatus.errorCount) {  if (currentStatus.recentErrors.length > 0) { const latestError = currentStatus.recentErrors[currentStatus.recentErrors.length - 1];  } } // 检查关键组件丢失 const criticalComponents = ['chatContainer', 'hasGlobalChatCore', 'hasMessageProcessor']; for (const component of criticalComponents) { if (previousStatus[component] && !currentStatus[component]) {  } else if (!previousStatus[component] && currentStatus[component]) {  } } } setupDOMObserver() { const chatContainer = document.getElementById('chatContainer'); if (!chatContainer) {  return; } const observer = new MutationObserver((mutations) => { mutations.forEach((mutation) => { if (mutation.type === 'childList') { mutation.addedNodes.forEach((node) => { if (node.nodeType === Node.ELEMENT_NODE && node.classList?.contains('message')) {  this.validateNewMessage(node); } }); } }); }); observer.observe(chatContainer, { childList: true, subtree: true });  } validateNewMessage(messageElement) { const checks = [ { name: '消息内容', test: () => messageElement.textContent && messageElement.textContent.trim().length > 0 }, { name: '消息类型类', test: () => messageElement.classList.contains('user-message') || messageElement.classList.contains('assistant-message') }, { name: '消息结构', test: () => messageElement.querySelector('.message-content') !== null } ]; let passed = 0; checks.forEach(check => { if (check.test()) { passed++;  } else {  } });  } generateStatusReport() { const currentStatus = this.statusHistory[this.statusHistory.length - 1]; if (!currentStatus) {  return; } console.log('\n' + '='.repeat(50));  console.log('='.repeat(50)); console.log(`🕒 当前时间: ${new Date().toLocaleString()}`);          if (currentStatus.processorMethods) {  Object.entries(currentStatus.processorMethods).forEach(([method, exists]) => {  }); } if (currentStatus.recentErrors.length > 0) {  currentStatus.recentErrors.forEach((error, index) => {  }); } console.log('='.repeat(50)); } // 手动触发测试 async testMessageSending() {  const messageInput = document.getElementById('messageInput'); const sendButton = document.getElementById('sendButton'); if (!messageInput || !sendButton) {  return false; } const testMessage = `测试消息 - ${new Date().toLocaleTimeString()}`; // 输入测试消息 messageInput.value = testMessage;  // 记录当前消息数量 const beforeCount = document.querySelectorAll('.message').length; // 触发发送 sendButton.click();  // 等待并检查结果 await new Promise(resolve => setTimeout(resolve, 2000)); const afterCount = document.querySelectorAll('.message').length; const success = afterCount > beforeCount;   return success; } } // 创建全局监控实例 window.realtimeMonitor = new RealTimeMonitor(); // 页面加载后自动开始监控 if (document.readyState === 'loading') { document.addEventListener('DOMContentLoaded', () => { setTimeout(() => { window.realtimeMonitor.startMonitoring(); console.log('💡 提示: 使用 realtimeMonitor.generateStatusReport() 查看状态报告'); console.log('💡 提示: 使用 realtimeMonitor.testMessageSending() 测试消息发送'); }, 1000); }); } else { setTimeout(() => { window.realtimeMonitor.startMonitoring(); console.log('💡 提示: 使用 realtimeMonitor.generateStatusReport() 查看状态报告'); console.log('💡 提示: 使用 realtimeMonitor.testMessageSending() 测试消息发送'); }, 1000); } 
} catch (error) {
    console.error(error);
    // 处理错误
}
