 class SystemIntegrationManager { constructor() { this.systems = new Map(); this.initialized = false; this.status = 'initializing'; this.config = { enableAudio: true, enableGestures: true, enableDataVisualization: true, enableSocialFeatures: true, enablePerformanceMonitoring: true, autoOptimize: true, debugMode: false }; this.systemDependencies = { 'audio': [], 'gestures': ['audio'], 'dataVisualization': ['performance'], 'social': ['audio', 'gestures'], 'performance': [], 'animation': ['audio', 'performance'] }; this.init(); } async init() {  try { // 等待DOM完全加载 if (document.readyState !== 'complete') { await new Promise(resolve => { window.addEventListener('load', resolve); }); } // 按依赖顺序初始化系统 await this.initializeSystems(); // 设置系统间通信 this.setupInterSystemCommunication(); // 启动健康监控 this.startHealthMonitoring(); // 设置全局错误处理 this.setupErrorHandling(); this.status = 'running'; this.initialized = true;  this.displaySystemStatus(); } catch (error) { console.error('❌ 系统初始化失败:', error); this.status = 'error'; this.handleInitializationError(error); } } async initializeSystems() { const initOrder = this.calculateInitOrder(); for (const systemName of initOrder) { if (!this.config[`enable${this.capitalizeFirst(systemName)}`]) { console.log(`⏭️ 跳过系统: ${systemName} (已禁用)`); continue; } try { await this.initializeSystem(systemName);  } catch (error) { console.warn(`⚠️ 系统初始化失败: ${systemName}`, error); // 处理依赖失败 this.handleSystemFailure(systemName, error); } } } calculateInitOrder() { const order = []; const visited = new Set(); const visiting = new Set(); const dfs = (system) => { if (visiting.has(system)) { throw new Error(`循环依赖检测: ${system}`); } if (visited.has(system)) return; visiting.add(system); const deps = this.systemDependencies[system] || []; deps.forEach(dep => { dfs(dep); }); visiting.delete(system); visited.add(system); order.push(system); }; Object.keys(this.systemDependencies).forEach(system => { dfs(system); }); return order; } async initializeSystem(systemName) { const startTime = performance.now(); switch (systemName) { case 'performance': await this.initPerformanceSystem(); break; case 'audio': await this.initAudioSystem(); break; case 'gestures': await this.initGestureSystem(); break; case 'dataVisualization': await this.initDataVisualizationSystem(); break; case 'social': await this.initSocialSystem(); break; case 'animation': await this.initAnimationSystem(); break; default: throw new Error(`未知系统: ${systemName}`); } const initTime = performance.now() - startTime; this.systems.set(systemName, { status: 'running', initTime, lastCheck: Date.now(), errors: [] }); } async initPerformanceSystem() { if (window.performanceMonitor) { this.systems.set('performance', { instance: window.performanceMonitor, status: 'running' }); return; } // 等待性能监控器加载 await this.waitForGlobal('performanceMonitor', 5000); } async initAudioSystem() { if (window.audioEnhancement) { this.systems.set('audio', { instance: window.audioEnhancement, status: 'running' }); return; } await this.waitForGlobal('audioEnhancement', 5000); } async initGestureSystem() { if (window.gestureSystem) { // 集成音效反馈 const audioSystem = this.systems.get('audio'); if (audioSystem) { window.gestureSystem.onGesture('tap', () => { if (window.audioEnhancement) { window.audioEnhancement.playTypingSound(); } }); window.gestureSystem.onGesture('longPress', () => { if (window.audioEnhancement) { window.audioEnhancement.playAbsorptionSound(); } }); } this.systems.set('gestures', { instance: window.gestureSystem, status: 'running' }); return; } await this.waitForGlobal('gestureSystem', 5000); } async initDataVisualizationSystem() { if (window.dataVisualization) { // 集成性能监控数据 const performanceSystem = this.systems.get('performance'); if (performanceSystem) { // 连接数据源 this.connectDataSources(); } this.systems.set('dataVisualization', { instance: window.dataVisualization, status: 'running' }); return; } await this.waitForGlobal('dataVisualization', 5000); } async initSocialSystem() { if (window.socialCustomization) { // 集成其他系统的设置 this.integrateSocialSettings(); this.systems.set('social', { instance: window.socialCustomization, status: 'running' }); return; } await this.waitForGlobal('socialCustomization', 5000); } async initAnimationSystem() { if (window.cppAnimation) { // 集成所有增强功能到动画系统 this.integrateAnimationEnhancements(); this.systems.set('animation', { instance: window.cppAnimation, status: 'running' }); return; } await this.waitForGlobal('cppAnimation', 5000); } connectDataSources() { if (!window.dataVisualization || !window.performanceMonitor) return; // 连接性能数据到可视化系统 const updateVisualization = () => { const stats = window.performanceMonitor.getStats(); if (stats) { window.dataVisualization.processDataUpdate('system.performance', stats); } }; setInterval(updateVisualization, 1000); } integrateSocialSettings() { if (!window.socialCustomization) return; // 音效设置集成 if (window.audioEnhancement) { window.socialCustomization.onGesture = (gestureType, callback) => { if (window.gestureSystem) { window.gestureSystem.onGesture(gestureType, callback); } }; } } integrateAnimationEnhancements() { if (!window.cppAnimation) return; // 添加音效支持 if (window.audioEnhancement) { const originalRestart = window.cppAnimation.restart; window.cppAnimation.restart = function() { if (window.audioEnhancement) { window.audioEnhancement.playQuantumSound(); } return originalRestart.call(this); }; } // 添加手势支持 if (window.gestureSystem) { window.gestureSystem.onGesture('doubleTap', () => { window.cppAnimation.triggerSpecialEffect(); }); window.gestureSystem.onGesture('swipe', (gesture) => { if (gesture.direction === 'up') { window.cppAnimation.adjustSpeed(1.2); } else if (gesture.direction === 'down') { window.cppAnimation.adjustSpeed(0.8); } }); } // 添加数据可视化支持 if (window.dataVisualization) { // 连接动画参数到数据可视化 const originalUpdateParameter = window.cppAnimation.updateParameter; window.cppAnimation.updateParameter = function(param, value) { window.dataVisualization.processDataUpdate(`animation.${param}`, value); return originalUpdateParameter.call(this, param, value); }; } } setupInterSystemCommunication() { // 创建事件总线 this.eventBus = new EventTarget(); // 系统间消息传递 this.systems.forEach((system, name) => { if (system.instance && system.instance.addEventListener) { system.instance.addEventListener('statusChange', (event) => { this.handleSystemStatusChange(name, event.detail); }); } }); // 全局事件监听 this.eventBus.addEventListener('systemEvent', (event) => { this.broadcastSystemEvent(event.detail); }); } startHealthMonitoring() { setInterval(() => { this.performHealthCheck(); }, 30000); // 每30秒检查一次 // 内存监控 if ('memory' in performance) { setInterval(() => { this.checkMemoryUsage(); }, 60000); // 每分钟检查内存 } // 错误率监控 this.startErrorRateMonitoring(); } performHealthCheck() { this.systems.forEach((system, name) => { try { if (system.instance && system.instance.healthCheck) { const health = system.instance.healthCheck(); if (!health.ok) { console.warn(`⚠️ 系统健康检查失败: ${name}`, health); this.handleSystemHealth(name, health); } } } catch (error) { console.error(`❌ 系统健康检查异常: ${name}`, error); this.handleSystemError(name, error); } }); } checkMemoryUsage() { if (!performance.memory) return; const memory = performance.memory; const usage = { used: memory.usedJSHeapSize, total: memory.totalJSHeapSize, limit: memory.jsHeapSizeLimit, percentage: (memory.usedJSHeapSize / memory.jsHeapSizeLimit) * 100 }; if (usage.percentage > 80) { console.warn('⚠️ 内存使用率过高:', usage); this.triggerMemoryOptimization(); } // 通知数据可视化系统 if (window.dataVisualization) { window.dataVisualization.processDataUpdate('system.memory', usage); } } triggerMemoryOptimization() { // 通知各系统进行内存优化 this.systems.forEach((system, name) => { if (system.instance && system.instance.optimizeMemory) { try { system.instance.optimizeMemory();  } catch (error) { console.warn(`⚠️ 系统内存优化失败: ${name}`, error); } } }); // 强制垃圾回收（如果支持） if (window.gc) { window.gc(); } } startErrorRateMonitoring() { this.errorCounts = new Map(); window.addEventListener('error', (event) => { this.recordError('javascript', event.error); }); window.addEventListener('unhandledrejection', (event) => { this.recordError('promise', event.reason); }); } recordError(type, error) { const key = `${type}-${Date.now()}`; const count = this.errorCounts.get(type) || 0; this.errorCounts.set(type, count + 1); // 如果错误率过高，触发系统保护 if (count > 10) { console.error('❌ 错误率过高，启动系统保护模式'); this.enterSafeMode(); } } enterSafeMode() {  // 禁用非关键系统 this.systems.forEach((system, name) => { if (name !== 'animation' && name !== 'performance') { this.disableSystem(name); } }); // 降低动画质量 if (window.cppAnimation) { window.cppAnimation.updateParameter('particleCount', 10); window.cppAnimation.updateParameter('effectIntensity', 0.5); } } setupErrorHandling() { // 全局错误处理器 window.addEventListener('error', (event) => { this.handleGlobalError(event); }); // Promise 错误处理 window.addEventListener('unhandledrejection', (event) => { this.handlePromiseRejection(event); }); } handleGlobalError(event) { console.error('🚨 全局错误捕获:', event.error); // 记录错误信息 this.logError({ type: 'global', message: event.message, filename: event.filename, lineno: event.lineno, colno: event.colno, error: event.error, timestamp: Date.now() }); } handlePromiseRejection(event) { console.error('🚨 未处理的Promise拒绝:', event.reason); this.logError({ type: 'promise', reason: event.reason, timestamp: Date.now() }); } logError(errorInfo) { // 存储到本地存储 const errors = this.getStoredErrors(); errors.push(errorInfo); // 保留最近100个错误 if (errors.length > 100) { errors.splice(0, errors.length - 100); } localStorage.setItem('alingai-error-log', JSON.stringify(errors)); } getStoredErrors() { try { const stored = localStorage.getItem('alingai-error-log'); return stored ? JSON.parse(stored) : []; } catch { return []; } } // 系统控制方法 enableSystem(systemName) { const system = this.systems.get(systemName); if (system && system.instance) { if (system.instance.enable) { system.instance.enable(); } system.status = 'running';  } } disableSystem(systemName) { const system = this.systems.get(systemName); if (system && system.instance) { if (system.instance.disable) { system.instance.disable(); } system.status = 'disabled';  } } restartSystem(systemName) { this.disableSystem(systemName); setTimeout(() => { this.enableSystem(systemName); }, 1000); } getSystemStatus() { const status = {}; this.systems.forEach((system, name) => { status[name] = { status: system.status, initTime: system.initTime, lastCheck: system.lastCheck, errorCount: system.errors ? system.errors.length : 0 }; }); return status; } displaySystemStatus() { const status = this.getSystemStatus(); console.table(status); // 如果开启调试模式，显示状态面板 if (this.config.debugMode) { this.createDebugPanel(); } } createDebugPanel() { const panel = document.createElement('div'); panel.id = 'system-debug-panel'; panel.style.cssText = ` position: fixed; top: 10px; left: 10px; width: 400px; background: rgba(0, 0, 0, 0.9); color: #00ff00; padding: 15px; border-radius: 8px; font-family: 'JetBrains Mono', monospace; font-size: 10px; z-index: 10001; max-height: 500px; overflow-y: auto; `; const updatePanel = () => { const status = this.getSystemStatus(); let html = '<h3>🔧 系统状态监控</h3>'; Object.entries(status).forEach(([name, info]) => { const statusColor = info.status === 'running' ? '#00ff00' : info.status === 'error' ? '#ff0000' : '#ffff00'; html += ` <div style="margin: 8px 0; padding: 5px; border-left: 3px solid ${statusColor};"> <strong>${name}:</strong> ${info.status}<br> 初始化时间: ${info.initTime ? info.initTime.toFixed(2) + 'ms' : 'N/A'}<br> 错误数: ${info.errorCount} </div> `; }); html += `<div style="margin-top: 15px; font-size: 9px;"> 总状态: ${this.status}<br> 内存使用: ${performance.memory ? (performance.memory.usedJSHeapSize / 1024 / 1024).toFixed(2) + 'MB' : 'N/A'}<br> 运行时间: ${Math.floor((Date.now() - this.startTime) / 1000)}s </div>`; panel.innerHTML = html; }; document.body.appendChild(panel); updatePanel(); // 每5秒更新一次 setInterval(updatePanel, 5000); } // 工具方法 async waitForGlobal(globalName, timeout = 5000) { return new Promise((resolve, reject) => { const startTime = Date.now(); const checkInterval = setInterval(() => { if (window[globalName]) { clearInterval(checkInterval); resolve(window[globalName]); } else if (Date.now() - startTime > timeout) { clearInterval(checkInterval); reject(new Error(`等待全局对象超时: ${globalName}`)); } }, 100); }); } capitalizeFirst(str) { return str.charAt(0).toUpperCase() + str.slice(1); } handleSystemFailure(systemName, error) { console.error(`❌ 系统失败: ${systemName}`, error); const system = this.systems.get(systemName) || { errors: [] }; system.errors.push({ error, timestamp: Date.now() }); system.status = 'error'; this.systems.set(systemName, system); } handleSystemStatusChange(systemName, status) { const system = this.systems.get(systemName); if (system) { system.status = status;  } } broadcastSystemEvent(event) { this.systems.forEach((system, name) => { if (system.instance && system.instance.handleSystemEvent) { try { system.instance.handleSystemEvent(event); } catch (error) { console.warn(`⚠️ 系统事件处理失败: ${name}`, error); } } }); } handleSystemHealth(systemName, health) { if (health.critical) { this.restartSystem(systemName); } else if (health.warning) { console.warn(`⚠️ 系统健康警告: ${systemName}`, health.message); } } handleSystemError(systemName, error) { this.handleSystemFailure(systemName, error); // 如果是关键系统，尝试重启 if (['animation', 'performance'].includes(systemName)) { setTimeout(() => { this.restartSystem(systemName); }, 2000); } } handleInitializationError(error) { // 降级启动  this.config = { enableAudio: false, enableGestures: false, enableDataVisualization: false, enableSocialFeatures: false, enablePerformanceMonitoring: true, autoOptimize: false, debugMode: true }; // 重新初始化 setTimeout(() => { this.init(); }, 2000); } } // 等待DOM加载完成后初始化 document.addEventListener('DOMContentLoaded', () => { window.systemManager = new SystemIntegrationManager(); window.systemManager.startTime = Date.now(); }); // 导出调试函数到全局 window.debugAlingAi = { getSystemStatus: () => window.systemManager?.getSystemStatus(), enableDebug: () => { if (window.systemManager) { window.systemManager.config.debugMode = true; window.systemManager.createDebugPanel(); } }, disableDebug: () => { if (window.systemManager) { window.systemManager.config.debugMode = false; const panel = document.getElementById('system-debug-panel'); if (panel) panel.remove(); } }, restartSystem: (name) => window.systemManager?.restartSystem(name), triggerSafeMode: () => window.systemManager?.enterSafeMode(), getErrors: () => window.systemManager?.getStoredErrors() }; 