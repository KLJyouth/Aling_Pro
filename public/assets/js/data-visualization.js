 class DataVisualizationEnhancement { constructor() { this.dataConnections = new Map(); this.visualizations = new Map(); this.animationParameters = { particleCount: 20, speed: 1.0, colorScheme: 'quantum', intensity: 1.0 }; this.dataTypes = { system: ['cpu', 'memory', 'gpu', 'network'], performance: ['fps', 'loadTime', 'renderTime'], user: ['interactions', 'timeOnPage', 'scrollDepth'], realtime: ['timestamp', 'randomSeed', 'weatherAPI'] }; this.init(); } init() { this.setupDataSources(); this.createVisualizationMappings(); this.startDataCollection();  } // 设置数据源 setupDataSources() { // 系统性能数据 this.dataConnections.set('system', { type: 'system', active: true, updateInterval: 1000, lastUpdate: 0, data: {} }); // 用户交互数据 this.dataConnections.set('user', { type: 'user', active: true, updateInterval: 100, lastUpdate: 0, data: { interactions: 0, mouseX: 0, mouseY: 0, scrollY: 0 } }); // 实时随机数据 this.dataConnections.set('random', { type: 'random', active: true, updateInterval: 50, lastUpdate: 0, data: {} }); // 外部API数据（示例：天气、股票等） this.dataConnections.set('external', { type: 'external', active: false, updateInterval: 60000, lastUpdate: 0, data: {} }); } // 创建数据到视觉效果的映射 createVisualizationMappings() { // CPU使用率 → 粒子速度 this.addMapping('system.cpu', (value) => { this.updateAnimationParameter('speed', 0.5 + (value / 100) * 1.5); }); // 内存使用率 → 粒子密度 this.addMapping('system.memory', (value) => { const count = Math.floor(10 + (value / 100) * 40); this.updateAnimationParameter('particleCount', count); }); // 鼠标位置 → 粒子引力中心 this.addMapping('user.mouse', (data) => { this.updateGravityCenter(data.x, data.y); }); // 滚动深度 → 色彩强度 this.addMapping('user.scroll', (value) => { const intensity = Math.min(2.0, 0.5 + value * 0.001); this.updateAnimationParameter('intensity', intensity); }); // 随机数 → 色彩变化 this.addMapping('random.seed', (value) => { this.updateColorScheme(value); }); // 时间 → 动画节奏 this.addMapping('realtime.timestamp', (timestamp) => { const rhythm = Math.sin(timestamp * 0.001) * 0.5 + 0.5; this.updateAnimationRhythm(rhythm); }); } addMapping(dataPath, callback) { this.visualizations.set(dataPath, callback); } // 开始数据收集 startDataCollection() { // 系统性能监控 this.collectSystemData(); setInterval(() => this.collectSystemData(), 1000); // 用户交互监控 this.setupUserInteractionTracking(); // 随机数据生成 this.generateRandomData(); setInterval(() => this.generateRandomData(), 50); // 实时时间戳 setInterval(() => this.updateTimestamp(), 16); // 60fps } collectSystemData() { const data = this.dataConnections.get('system'); // 模拟系统数据（实际应用中可以通过API获取） data.data = { cpu: this.getRandomValue(20, 80), // CPU使用率 20-80% memory: this.getRandomValue(30, 70), // 内存使用率 30-70% gpu: this.getRandomValue(10, 90), // GPU使用率 10-90% network: this.getRandomValue(0, 100) // 网络活动 0-100% }; data.lastUpdate = Date.now(); this.processDataUpdate('system', data.data); } setupUserInteractionTracking() { const data = this.dataConnections.get('user'); // 鼠标移动 document.addEventListener('mousemove', (event) => { data.data.mouseX = event.clientX; data.data.mouseY = event.clientY; data.lastUpdate = Date.now(); this.processDataUpdate('user.mouse', { x: event.clientX, y: event.clientY }); }); // 点击计数 document.addEventListener('click', () => { data.data.interactions++; this.processDataUpdate('user.interactions', data.data.interactions); }); // 滚动深度 window.addEventListener('scroll', () => { data.data.scrollY = window.scrollY; this.processDataUpdate('user.scroll', window.scrollY); }); // 键盘交互 document.addEventListener('keydown', () => { data.data.interactions++; }); } generateRandomData() { const data = this.dataConnections.get('random'); data.data = { seed: Math.random(), noise: this.perlinNoise(Date.now() * 0.001), wave: Math.sin(Date.now() * 0.003), fluctuation: Math.random() * 2 - 1 }; data.lastUpdate = Date.now(); this.processDataUpdate('random.seed', data.data.seed); } updateTimestamp() { const timestamp = Date.now(); this.processDataUpdate('realtime.timestamp', timestamp); } processDataUpdate(dataPath, value) { const callback = this.visualizations.get(dataPath); if (callback) { try { callback(value); } catch (error) { console.warn(`数据映射执行失败 ${dataPath}:`, error); } } } // 更新动画参数 updateAnimationParameter(param, value) { this.animationParameters[param] = value; // 通知动画系统更新 if (window.cppAnimation && window.cppAnimation.updateParameter) { window.cppAnimation.updateParameter(param, value); } // 通知性能监控系统 if (window.performanceMonitor && param === 'particleCount') { window.performanceMonitor.updateSettings({ particleCount: value }); } } updateGravityCenter(x, y) { if (window.cppAnimation && window.cppAnimation.setGravityCenter) { const container = document.querySelector('.cpp-animation-container-enhanced'); if (container) { const rect = container.getBoundingClientRect(); const relativeX = (x - rect.left) / rect.width; const relativeY = (y - rect.top) / rect.height; window.cppAnimation.setGravityCenter(relativeX, relativeY); } } } updateColorScheme(seed) { const schemes = [ 'quantum', 'cyberpunk', 'aurora', 'plasma', 'matrix', 'galaxy' ]; const index = Math.floor(seed * schemes.length); const scheme = schemes[index]; this.animationParameters.colorScheme = scheme; if (window.cppAnimation && window.cppAnimation.setColorScheme) { window.cppAnimation.setColorScheme(scheme); } } updateAnimationRhythm(rhythm) { if (window.cppAnimation && window.cppAnimation.setRhythm) { window.cppAnimation.setRhythm(rhythm); } } // 外部API数据获取 async fetchExternalData() { try { // 示例：获取天气数据 const weatherResponse = await fetch('https://api.openweathermap.org/data/2.5/weather?q=Beijing&appid=YOUR_API_KEY'); const weatherData = await weatherResponse.json(); this.processDataUpdate('external.weather', weatherData); // 示例：根据天气调整动画 this.mapWeatherToAnimation(weatherData); } catch (error) { console.warn('外部数据获取失败:', error); } } mapWeatherToAnimation(weatherData) { if (!weatherData.weather) return; const condition = weatherData.weather[0].main.toLowerCase(); const mappings = { 'clear': { colorScheme: 'aurora', speed: 1.2 }, 'clouds': { colorScheme: 'matrix', speed: 0.8 }, 'rain': { colorScheme: 'cyberpunk', intensity: 1.5 }, 'snow': { colorScheme: 'quantum', particleCount: 50 }, 'thunderstorm': { colorScheme: 'plasma', speed: 2.0 } }; const mapping = mappings[condition]; if (mapping) { Object.entries(mapping).forEach(([param, value]) => { this.updateAnimationParameter(param, value); }); } } // 工具函数 getRandomValue(min, max) { return Math.random() * (max - min) + min; } perlinNoise(x) { // 简化的柏林噪声实现 const noise = Math.sin(x) * Math.sin(x * 2.1) * Math.sin(x * 3.7); return (noise + 1) / 2; } // 数据分析和统计 getDataStats(dataPath) { const connection = this.dataConnections.get(dataPath.split('.')[0]); if (!connection) return null; return { lastUpdate: connection.lastUpdate, updateInterval: connection.updateInterval, active: connection.active, data: connection.data }; } getAllStats() { const stats = {}; this.dataConnections.forEach((connection, key) => { stats[key] = this.getDataStats(key); }); return stats; } // 控制方法 enableDataSource(sourceName) { const connection = this.dataConnections.get(sourceName); if (connection) { connection.active = true; } } disableDataSource(sourceName) { const connection = this.dataConnections.get(sourceName); if (connection) { connection.active = false; } } setUpdateInterval(sourceName, interval) { const connection = this.dataConnections.get(sourceName); if (connection) { connection.updateInterval = interval; } } // 实时数据导出 exportData(format = 'json') { const data = { timestamp: Date.now(), parameters: this.animationParameters, connections: {} }; this.dataConnections.forEach((connection, key) => { data.connections[key] = { type: connection.type, active: connection.active, lastUpdate: connection.lastUpdate, data: connection.data }; }); if (format === 'json') { return JSON.stringify(data, null, 2); } return data; } // 创建实时数据面板 createDataDashboard() { const dashboard = document.createElement('div'); dashboard.id = 'data-dashboard'; dashboard.style.cssText = ` position: fixed; top: 10px; right: 10px; width: 300px; background: rgba(0, 0, 0, 0.8); color: #00ff00; padding: 10px; border-radius: 8px; font-family: 'JetBrains Mono', monospace; font-size: 10px; z-index: 10000; max-height: 400px; overflow-y: auto; backdrop-filter: blur(10px); `; document.body.appendChild(dashboard); // 定期更新面板 setInterval(() => { this.updateDashboard(dashboard); }, 100); return dashboard; } updateDashboard(dashboard) { const stats = this.getAllStats(); let html = '<h3>🔬 实时数据监控</h3>'; html += `<div>动画参数: ${JSON.stringify(this.animationParameters, null, 1)}</div><br>`; Object.entries(stats).forEach(([key, data]) => { if (data && data.active) { html += `<div><strong>${key}:</strong><br>`; html += ` 最后更新: ${new Date(data.lastUpdate).toLocaleTimeString()}<br>`; html += ` 数据: ${JSON.stringify(data.data, null, 1)}<br>`; html += '</div><br>'; } }); dashboard.innerHTML = html; } } // 全局实例 window.dataVisualization = new DataVisualizationEnhancement(); 