 class CompleteSystemValidator { constructor() { this.results = {}; this.startTime = Date.now(); this.testSuites = [ 'coreAnimation', 'audioSystem', 'gestureSystem', 'dataVisualization', 'socialFeatures', 'systemIntegration', 'performanceMonitoring', 'errorRecovery', 'debugConsole', 'performanceDashboard' ]; this.isRunning = false; } async runCompleteValidation() { if (this.isRunning) { console.warn('验证已在进行中...'); return; } this.isRunning = true; this.results = {};  try { for (const suite of this.testSuites) {  this.results[suite] = await this.runTestSuite(suite); } this.generateValidationReport(); this.displayResults(); } catch (error) { console.error('验证过程中出错:', error); } finally { this.isRunning = false; } } async runTestSuite(suiteName) { const startTime = Date.now(); const result = { passed: 0, failed: 0, warnings: 0, details: [], duration: 0 }; try { switch (suiteName) { case 'coreAnimation': await this.validateCoreAnimation(result); break; case 'audioSystem': await this.validateAudioSystem(result); break; case 'gestureSystem': await this.validateGestureSystem(result); break; case 'dataVisualization': await this.validateDataVisualization(result); break; case 'socialFeatures': await this.validateSocialFeatures(result); break; case 'systemIntegration': await this.validateSystemIntegration(result); break; case 'performanceMonitoring': await this.validatePerformanceMonitoring(result); break; case 'errorRecovery': await this.validateErrorRecovery(result); break; case 'debugConsole': await this.validateDebugConsole(result); break; case 'performanceDashboard': await this.validatePerformanceDashboard(result); break; } } catch (error) { result.failed++; result.details.push({ test: `${suiteName} 整体验证`, status: 'failed', error: error.message }); } result.duration = Date.now() - startTime; return result; } async validateCoreAnimation(result) { // 验证Three.js场景 if (window.scene && window.renderer && window.camera) { result.passed++; result.details.push({ test: 'Three.js 核心组件', status: 'passed', message: '3D场景正常运行' }); } else { result.failed++; result.details.push({ test: 'Three.js 核心组件', status: 'failed', message: '3D场景未正确初始化' }); } // 验证动画循环 if (window.animationFrameId) { result.passed++; result.details.push({ test: '动画循环', status: 'passed', message: '动画帧循环正常' }); } else { result.warnings++; result.details.push({ test: '动画循环', status: 'warning', message: '动画循环状态未知' }); } // 验证粒子系统 if (window.particleSystem) { result.passed++; result.details.push({ test: '粒子系统', status: 'passed', message: '量子粒子系统运行正常' }); } else { result.failed++; result.details.push({ test: '粒子系统', status: 'failed', message: '粒子系统未初始化' }); } } async validateAudioSystem(result) { if (window.audioEnhancementSystem) { const audio = window.audioEnhancementSystem; // 检查音频上下文 if (audio.audioContext) { result.passed++; result.details.push({ test: '音频上下文', status: 'passed', message: 'Web Audio API 正常工作' }); } else { result.failed++; result.details.push({ test: '音频上下文', status: 'failed', message: '音频上下文未初始化' }); } // 检查音效生成器 if (audio.createTypingEffect && audio.createExplosionEffect) { result.passed++; result.details.push({ test: '音效生成器', status: 'passed', message: '音效生成功能可用' }); } else { result.failed++; result.details.push({ test: '音效生成器', status: 'failed', message: '音效生成器不完整' }); } } else { result.failed++; result.details.push({ test: '音频系统', status: 'failed', message: '音频增强系统未加载' }); } } async validateGestureSystem(result) { if (window.gestureInteractionSystem) { const gesture = window.gestureInteractionSystem; // 检查手势识别器 if (gesture.gestureRecognizer) { result.passed++; result.details.push({ test: '手势识别器', status: 'passed', message: '手势识别系统正常' }); } else { result.failed++; result.details.push({ test: '手势识别器', status: 'failed', message: '手势识别器未初始化' }); } // 检查触摸处理 if (gesture.touchTracker) { result.passed++; result.details.push({ test: '触摸处理', status: 'passed', message: '多点触控系统正常' }); } else { result.failed++; result.details.push({ test: '触摸处理', status: 'failed', message: '触摸跟踪器未初始化' }); } } else { result.failed++; result.details.push({ test: '手势系统', status: 'failed', message: '手势交互系统未加载' }); } } async validateDataVisualization(result) { if (window.dataVisualizationSystem) { const dataViz = window.dataVisualizationSystem; // 检查数据收集器 if (dataViz.dataCollectors && dataViz.dataCollectors.size > 0) { result.passed++; result.details.push({ test: '数据收集器', status: 'passed', message: `${dataViz.dataCollectors.size} 个数据收集器运行中` }); } else { result.failed++; result.details.push({ test: '数据收集器', status: 'failed', message: '数据收集器未正确设置' }); } // 检查数据映射 if (dataViz.dataMappings && dataViz.dataMappings.size > 0) { result.passed++; result.details.push({ test: '数据映射', status: 'passed', message: `${dataViz.dataMappings.size} 个数据映射激活` }); } else { result.warnings++; result.details.push({ test: '数据映射', status: 'warning', message: '数据映射可能未完全设置' }); } } else { result.failed++; result.details.push({ test: '数据可视化', status: 'failed', message: '数据可视化系统未加载' }); } } async validateSocialFeatures(result) { if (window.socialCustomizationSystem) { const social = window.socialCustomizationSystem; // 检查自定义面板 if (document.querySelector('.customization-panel')) { result.passed++; result.details.push({ test: '自定义面板', status: 'passed', message: '自定义界面可用' }); } else { result.warnings++; result.details.push({ test: '自定义面板', status: 'warning', message: '自定义面板可能隐藏或未创建' }); } // 检查分享功能 if (social.shareToSocialMedia && social.generateShareLink) { result.passed++; result.details.push({ test: '分享功能', status: 'passed', message: '社交分享功能可用' }); } else { result.failed++; result.details.push({ test: '分享功能', status: 'failed', message: '分享功能不完整' }); } } else { result.failed++; result.details.push({ test: '社交功能', status: 'failed', message: '社交自定义系统未加载' }); } } async validateSystemIntegration(result) { if (window.systemIntegrationManager) { const sim = window.systemIntegrationManager; // 检查系统注册 if (sim.systems && sim.systems.size > 0) { result.passed++; result.details.push({ test: '系统注册', status: 'passed', message: `${sim.systems.size} 个系统已注册` }); } else { result.failed++; result.details.push({ test: '系统注册', status: 'failed', message: '系统注册失败' }); } // 检查初始化状态 if (sim.initialized) { result.passed++; result.details.push({ test: '初始化状态', status: 'passed', message: '系统集成管理器初始化完成' }); } else { result.failed++; result.details.push({ test: '初始化状态', status: 'failed', message: '系统集成管理器未初始化' }); } } else { result.failed++; result.details.push({ test: '系统集成', status: 'failed', message: '系统集成管理器未加载' }); } } async validatePerformanceMonitoring(result) { if (window.ultimatePerformanceValidator) { result.passed++; result.details.push({ test: '性能验证器', status: 'passed', message: '终极性能验证器可用' }); } else { result.failed++; result.details.push({ test: '性能验证器', status: 'failed', message: '性能验证器未加载' }); } // 检查FPS监控 if (window.fps || (window.stats && window.stats.begin)) { result.passed++; result.details.push({ test: 'FPS监控', status: 'passed', message: 'FPS监控系统运行中' }); } else { result.warnings++; result.details.push({ test: 'FPS监控', status: 'warning', message: 'FPS监控可能未启用' }); } } async validateErrorRecovery(result) { if (window.intelligentErrorRecovery) { const error = window.intelligentErrorRecovery; // 检查错误拦截 if (error.errors !== undefined) { result.passed++; result.details.push({ test: '错误拦截', status: 'passed', message: '错误拦截系统运行中' }); } else { result.failed++; result.details.push({ test: '错误拦截', status: 'failed', message: '错误拦截未正确设置' }); } // 检查恢复策略 if (error.recoveryStrategies && error.recoveryStrategies.size > 0) { result.passed++; result.details.push({ test: '恢复策略', status: 'passed', message: `${error.recoveryStrategies.size} 个恢复策略可用` }); } else { result.warnings++; result.details.push({ test: '恢复策略', status: 'warning', message: '恢复策略可能未完全初始化' }); } } else { result.failed++; result.details.push({ test: '错误恢复', status: 'failed', message: '智能错误恢复系统未加载' }); } } async validateDebugConsole(result) { if (window.advancedDebugConsole) { result.passed++; result.details.push({ test: '调试控制台', status: 'passed', message: '高级调试控制台可用' }); } else { result.failed++; result.details.push({ test: '调试控制台', status: 'failed', message: '高级调试控制台未加载' }); } } async validatePerformanceDashboard(result) { if (window.realtimePerformanceDashboard) { result.passed++; result.details.push({ test: '性能仪表盘', status: 'passed', message: '实时性能仪表盘可用' }); } else { result.failed++; result.details.push({ test: '性能仪表盘', status: 'failed', message: '实时性能仪表盘未加载' }); } } generateValidationReport() { const totalTests = Object.values(this.results).reduce( (acc, result) => acc + result.passed + result.failed + result.warnings, 0 ); const totalPassed = Object.values(this.results).reduce( (acc, result) => acc + result.passed, 0 ); const totalFailed = Object.values(this.results).reduce( (acc, result) => acc + result.failed, 0 ); const totalWarnings = Object.values(this.results).reduce( (acc, result) => acc + result.warnings, 0 ); const successRate = totalTests > 0 ? (totalPassed / totalTests * 100).toFixed(1) : 0; const totalDuration = Date.now() - this.startTime; this.validationReport = { summary: { totalTests, totalPassed, totalFailed, totalWarnings, successRate: parseFloat(successRate), duration: totalDuration, timestamp: new Date().toISOString() }, details: this.results }; } displayResults() { const report = this.validationReport; console.log('\n' + '='.repeat(60));  console.log('='.repeat(60));       console.log('='.repeat(60)); // 显示每个测试套件的详细结果 Object.entries(report.details).forEach(([suite, result]) => { const status = result.failed > 0 ? '❌' : result.warnings > 0 ? '⚠️' : '✅';    // 显示失败和警告的详细信息 result.details.forEach(detail => { if (detail.status === 'failed' || detail.status === 'warning') { const icon = detail.status === 'failed' ? '❌' : '⚠️';  } }); }); console.log('\n' + '='.repeat(60)); // 如果有严重错误，提供建议 if (report.summary.totalFailed > 0) {      } else {  } } // 导出验证报告 exportReport() { if (!this.validationReport) { console.warn('没有可导出的验证报告'); return; } const reportJson = JSON.stringify(this.validationReport, null, 2); const blob = new Blob([reportJson], { type: 'application/json' }); const url = URL.createObjectURL(blob); const a = document.createElement('a'); a.href = url; a.download = `alingai-pro-validation-report-${Date.now()}.json`; document.body.appendChild(a); a.click(); document.body.removeChild(a); URL.revokeObjectURL(url);  } // 快速健康检查 quickHealthCheck() { const systems = [ 'systemIntegrationManager', 'audioEnhancementSystem', 'gestureInteractionSystem', 'dataVisualizationSystem', 'socialCustomizationSystem', 'ultimatePerformanceValidator', 'advancedDebugConsole', 'realtimePerformanceDashboard', 'intelligentErrorRecovery' ]; const status = systems.map(system => ({ name: system, loaded: !!window[system], status: window[system] ? '✅' : '❌' }));  status.forEach(s => {  }); const healthScore = status.filter(s => s.loaded).length / status.length * 100; console.log(`\n💊 系统健康度: ${healthScore.toFixed(1)}%`); return { status, healthScore }; } } // 全局初始化 if (typeof window !== 'undefined') { window.completeSystemValidator = new CompleteSystemValidator(); // 在页面加载完成后自动运行验证 if (document.readyState === 'complete') { setTimeout(() => { window.completeSystemValidator.runCompleteValidation(); }, 2000); } else { window.addEventListener('load', () => { setTimeout(() => { window.completeSystemValidator.runCompleteValidation(); }, 2000); }); } // 提供快捷键快速验证 document.addEventListener('keydown', (e) => { if (e.ctrlKey && e.shiftKey && e.key === 'V') { window.completeSystemValidator.runCompleteValidation(); } if (e.ctrlKey && e.shiftKey && e.key === 'H') { window.completeSystemValidator.quickHealthCheck(); } });    } 