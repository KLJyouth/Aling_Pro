setTimeout(() => {  runChatFixVerification(); }, 2000); function runChatFixVerification() { const testResults = { syntaxErrors: [], moduleLoading: false, domElements: {}, guestMode: false, sendButton: false, inputFunction: false };  const jsErrors = []; const originalError = console.error; console.error = function(...args) { const message = args.join(' '); if (message.includes('SyntaxError') || message.includes('Invalid left-hand side')) { jsErrors.push(message); testResults.syntaxErrors.push(message); } originalError.apply(console, args); };  setTimeout(() => { testResults.moduleLoading = typeof window.chatInstance !== 'undefined' && window.chatInstance !== null;  if (testResults.moduleLoading) {  } }, 1000);  const checkElements = { messageInput: 'messageInput', sendButton: 'sendButton', guestModeBtn: 'guestModeBtn', messagesContainer: 'messages', darkModeSwitch: 'darkModeSwitch', voiceInputSwitch: 'voiceInputSwitch', autoTTSSwitch: 'autoTTSSwitch' }; Object.entries(checkElements).forEach(([name, id]) => { const element = document.getElementById(id); testResults.domElements[name] = !!element;  });  const guestBtn = document.getElementById('guestModeBtn'); if (guestBtn) { try { guestBtn.click(); setTimeout(() => { testResults.guestMode = localStorage.getItem('guestMode') === 'true';  }, 500); } catch (error) {  } } else {  }  const messageInput = document.getElementById('messageInput'); const sendButton = document.getElementById('sendButton'); if (messageInput && sendButton) { messageInput.value = '测试消息'; messageInput.dispatchEvent(new Event('input', { bubbles: true })); setTimeout(() => { const enabledAfterInput = !sendButton.disabled;  messageInput.value = ''; messageInput.dispatchEvent(new Event('input', { bubbles: true })); setTimeout(() => { const disabledAfterClear = sendButton.disabled;  testResults.sendButton = enabledAfterInput && disabledAfterClear; testResults.inputFunction = true; }, 200); }, 200); } else {  }  setTimeout(() => { const switches = ['darkModeSwitch', 'voiceInputSwitch', 'autoTTSSwitch']; let switchTests = 0; switches.forEach(switchId => { const switchElement = document.getElementById(switchId); if (switchElement) { try { const originalState = switchElement.checked; switchElement.checked = !originalState; switchElement.dispatchEvent(new Event('change', { bubbles: true })); setTimeout(() => { switchElement.checked = originalState; switchElement.dispatchEvent(new Event('change', { bubbles: true })); }, 100); switchTests++;  } catch (error) {  } } else {  } });  }, 2000); setTimeout(() => {  console.log('='.repeat(50)); const tests = [ { name: 'JavaScript语法错误', status: testResults.syntaxErrors.length === 0, detail: `${testResults.syntaxErrors.length} 个错误` }, { name: '聊天模块加载', status: testResults.moduleLoading, detail: testResults.moduleLoading ? '成功' : '失败' }, { name: 'DOM元素完整性', status: Object.values(testResults.domElements).every(v => v), detail: `${Object.values(testResults.domElements).filter(v => v).length}/${Object.keys(testResults.domElements).length}` }, { name: '访客模式功能', status: testResults.guestMode, detail: testResults.guestMode ? '正常' : '异常' }, { name: '发送按钮控制', status: testResults.sendButton, detail: testResults.sendButton ? '正常' : '异常' }, { name: '输入功能', status: testResults.inputFunction, detail: testResults.inputFunction ? '正常' : '异常' } ]; let passed = 0; tests.forEach(test => { const icon = test.status ? '✅' : '❌';  if (test.status) passed++; }); const successRate = Math.round((passed / tests.length) * 100);  console.log(`✅ 通过: ${passed}/${tests.length} (${successRate}%)`); if (successRate >= 80) {  } else if (successRate >= 60) {  } else {  } if (testResults.syntaxErrors.length > 0) {  testResults.syntaxErrors.forEach((error, index) => {  }); }  if (!testResults.moduleLoading) {  } if (!testResults.guestMode) {  } if (!testResults.sendButton) {  }   console.log('window.manualTestHelper.simulateMessage("测试消息")'); console.log('window.manualTestHelper.checkChatObjects()'); console.log('window.manualTestHelper.activateGuestMode()'); }, 5000);  }