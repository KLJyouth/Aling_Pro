 // 首页AI聊天系统 - 真实API集成版本 // 创建时间: 2025-06-06 // 版本: 2.0.0 - 替换localStorage为真实数据库API  class HomepageAIChat { constructor() { this.isInitialized = false; this.chatHistory = []; this.isTyping = false; this.currentTypingEffect = null; this.currentSessionId = null; this.apiEndpoints = { sendMessage: '/api/v1/chat/sessions', getSessions: '/api/v1/chat/sessions', createSession: '/api/v1/chat/sessions', getMessages: '/api/v1/chat/sessions/{id}/messages', saveMessage: '/api/v1/chat/messages', auth: '/api/v1/auth' }; this.currentUser = null; this.isAuthenticated = false; this.init(); } async init() { if (this.isInitialized) return; // 检查用户认证状态 await this.checkAuthStatus(); this.setupEventListeners(); await this.loadChatHistory(); this.isInitialized = true;  } async checkAuthStatus() { try { const token = localStorage.getItem('auth_token'); if (!token) { this.isAuthenticated = false; return; } const response = await fetch(`${this.apiEndpoints.auth}/me`, { method: 'GET', headers: { 'Authorization': `Bearer ${token}`, 'Content-Type': 'application/json' } }); if (response.ok) { this.currentUser = await response.json(); this.isAuthenticated = true;  } else { this.isAuthenticated = false; localStorage.removeItem('auth_token'); } } catch (error) { console.warn('认证检查失败，使用访客模式:', error); this.isAuthenticated = false; } } setupEventListeners() { // AI助手浮动按钮 const aiBtn = document.getElementById('aiAssistantBtn'); if (aiBtn) { aiBtn.addEventListener('click', () => this.toggleChatWidget()); } // 聊天窗口控制 const closeChatBtn = document.getElementById('closeChatWidget'); if (closeChatBtn) { closeChatBtn.addEventListener('click', () => this.hideChatWidget()); } // 发送消息 const sendBtn = document.getElementById('sendChatMessage'); const chatInput = document.getElementById('chatInput'); if (sendBtn) { sendBtn.addEventListener('click', () => this.sendMessage()); } if (chatInput) { chatInput.addEventListener('keypress', (e) => { if (e.key === 'Enter' && !e.shiftKey) { e.preventDefault(); this.sendMessage(); } }); // 输入监听 chatInput.addEventListener('input', () => { this.updateSendButton(); }); } // 快捷操作按钮 document.querySelectorAll('.quick-action-btn').forEach(btn => { btn.addEventListener('click', (e) => { const text = e.target.textContent; this.sendQuickMessage(text); }); }); // 语音输入 const voiceBtn = document.getElementById('voiceInputBtn'); if (voiceBtn) { voiceBtn.addEventListener('click', () => this.startVoiceInput()); } // 表情按钮 const emojiBtn = document.getElementById('emojiBtn'); if (emojiBtn) { emojiBtn.addEventListener('click', () => this.showEmojiPanel()); } } toggleChatWidget() { const chatWidget = document.getElementById('chatWidget'); if (!chatWidget) return; const isHidden = chatWidget.classList.contains('hidden'); if (isHidden) { this.showChatWidget(); } else { this.hideChatWidget(); } } showChatWidget() { const chatWidget = document.getElementById('chatWidget'); const aiBtn = document.getElementById('aiAssistantBtn'); if (chatWidget) { chatWidget.classList.remove('hidden'); setTimeout(() => { chatWidget.classList.remove('scale-95', 'opacity-0'); chatWidget.classList.add('scale-100', 'opacity-100'); }, 10); } if (aiBtn) { aiBtn.style.transform = 'scale(0.8)'; } // 聚焦输入框 const chatInput = document.getElementById('chatInput'); if (chatInput) { setTimeout(() => chatInput.focus(), 300); }  } hideChatWidget() { const chatWidget = document.getElementById('chatWidget'); const aiBtn = document.getElementById('aiAssistantBtn'); if (chatWidget) { chatWidget.classList.add('scale-95', 'opacity-0'); chatWidget.classList.remove('scale-100', 'opacity-100'); setTimeout(() => { chatWidget.classList.add('hidden'); }, 300); } if (aiBtn) { aiBtn.style.transform = 'scale(1)'; }  } async sendMessage() { const chatInput = document.getElementById('chatInput'); if (!chatInput) return; const message = chatInput.value.trim(); if (!message || this.isTyping) return; // 添加用户消息 this.addMessage(message, 'user'); chatInput.value = ''; this.updateSendButton(); // 显示AI正在输入 this.showTypingIndicator(); try { // 确保有会话ID if (!this.currentSessionId) { await this.createNewSession(); } // 发送消息到真实API const response = await this.sendMessageToAPI(message); this.hideTypingIndicator(); if (response.success) { this.addMessage(response.data.response || response.data.content, 'ai'); // 更新会话信息 if (response.data.session_id) { this.currentSessionId = response.data.session_id; } } else { this.addMessage('抱歉，发生了错误：' + (response.error || '请稍后再试'), 'ai', true); } // 保存聊天历史到数据库（自动完成） } catch (error) { this.hideTypingIndicator(); this.addMessage('抱歉，连接服务器失败。请检查网络连接后重试。', 'ai', true); console.error('发送消息失败:', error); } } async createNewSession() { try { const headers = { 'Content-Type': 'application/json' }; // 如果已认证，添加token if (this.isAuthenticated) { const token = localStorage.getItem('auth_token'); if (token) { headers['Authorization'] = `Bearer ${token}`; } } const response = await fetch(this.apiEndpoints.createSession, { method: 'POST', headers, body: JSON.stringify({ title: '首页聊天会话', model: 'deepseek-chat' }) }); const data = await response.json(); if (data.success && data.data.id) { this.currentSessionId = data.data.id;  } } catch (error) { console.warn('创建会话失败:', error); } } async sendMessageToAPI(message) { const headers = { 'Content-Type': 'application/json' }; // 如果已认证，添加token if (this.isAuthenticated) { const token = localStorage.getItem('auth_token'); if (token) { headers['Authorization'] = `Bearer ${token}`; } } const endpoint = this.currentSessionId ? `${this.apiEndpoints.sendMessage}/${this.currentSessionId}/messages` : this.apiEndpoints.createSession; const body = this.currentSessionId ? { message, timestamp: Date.now() } : { title: '首页聊天会话', model: 'deepseek-chat', first_message: message, timestamp: Date.now() }; const response = await fetch(endpoint, { method: 'POST', headers, body: JSON.stringify(body) }); const data = await response.json(); // 如果是新会话且成功创建，更新会话ID if (!this.currentSessionId && data.success && data.data.id) { this.currentSessionId = data.data.id; } return data; } sendQuickMessage(text) { const chatInput = document.getElementById('chatInput'); if (chatInput) { chatInput.value = text; this.sendMessage(); } } addMessage(content, sender, isError = false) { const chatMessages = document.getElementById('chatMessages'); if (!chatMessages) return; const messageDiv = document.createElement('div'); messageDiv.className = 'flex items-start space-x-2 message-item'; const isUser = sender === 'user'; const timestamp = new Date().toLocaleTimeString(); messageDiv.innerHTML = ` <div class="w-6 h-6 rounded-full flex items-center justify-center flex-shrink-0 ${ isUser ? 'bg-blue-500' : 'bg-gradient-to-r from-longling to-tech-blue' }"> <i class="fas ${isUser ? 'fa-user' : 'fa-robot'} text-xs"></i> </div> <div class="bg-gray-800/50 rounded-lg p-3 text-sm max-w-xs ${isError ? 'border border-red-500/20' : ''}"> <p class="${isError ? 'text-red-400' : ''}">${content}</p> <div class="text-xs text-gray-500 mt-1"> <span>${timestamp}</span> </div> </div> `; // 动画效果 messageDiv.style.opacity = '0'; messageDiv.style.transform = 'translateY(10px)'; chatMessages.appendChild(messageDiv); // 创建消息对象 const messageObj = { content, sender, timestamp: new Date().toISOString(), isError }; // 添加到历史记录 this.chatHistory.push(messageObj); // 如果用户已认证且有当前会话，保存到数据库 if (this.isAuthenticated && this.currentSessionId && !isError) { this.saveMessageToDatabase(messageObj); } else { // 保存到本地存储作为备份 this.saveChatToLocalStorage(); } // 动画显示 setTimeout(() => { messageDiv.style.transition = 'all 0.3s ease'; messageDiv.style.opacity = '1'; messageDiv.style.transform = 'translateY(0)'; }, 10); // 滚动到底部 this.scrollToBottom(); } // 保存消息到数据库 async saveMessageToDatabase(messageObj) { try { const token = localStorage.getItem('auth_token'); if (!token) return; const response = await fetch(this.apiEndpoints.saveMessage, { method: 'POST', headers: { 'Content-Type': 'application/json', 'Authorization': `Bearer ${token}` }, body: JSON.stringify({ session_id: this.currentSessionId, role: messageObj.sender === 'user' ? 'user' : 'assistant', content: messageObj.content, timestamp: messageObj.timestamp }) }); if (!response.ok) { console.warn('Failed to save message to database, using localStorage fallback'); this.saveChatToLocalStorage(); } } catch (error) { console.warn('Error saving message to database:', error); this.saveChatToLocalStorage(); } } // 保存聊天到服务器或本地存储（智能存储方案） async saveChatToStorage() { try { // 检查用户认证状态 const isAuthenticated = await this.checkAuthentication(); if (isAuthenticated) { // 认证用户：保存到API await this.saveChatToServer(); } else { // 访客用户：保存到本地存储 this.saveChatToLocalStorage(); } } catch (error) { console.warn('Failed to save chat:', error); // API失败时回退到本地存储 this.saveChatToLocalStorage(); } } // 保存聊天到服务器 async saveChatToServer() { try { if (this.chatHistory.length === 0) return; const response = await fetch('/api/v1/chat/conversations', { method: 'POST', headers: { 'Content-Type': 'application/json', 'X-Requested-With': 'XMLHttpRequest' }, body: JSON.stringify({ title: `首页聊天 - ${new Date().toLocaleString()}`, messages: this.chatHistory, source: 'homepage' }) }); if (!response.ok) { throw new Error(`Server response: ${response.status}`); } const result = await response.json(); if (result.success) {  return result; } else { throw new Error(result.message || '保存失败'); } } catch (error) { console.error('保存聊天到服务器失败:', error); throw error; } } // 保存聊天到本地存储（备份方案） saveChatToLocalStorage() { try { localStorage.setItem('homepage-chat-history', JSON.stringify(this.chatHistory));  } catch (error) { console.warn('Failed to save chat to localStorage:', error); } } // 检查用户认证状态 async checkAuthentication() { try { const response = await fetch('/api/v1/auth/check', { method: 'GET', headers: { 'Content-Type': 'application/json', 'X-Requested-With': 'XMLHttpRequest' } }); if (response.ok) { const result = await response.json(); return result.success && result.data?.authenticated; } } catch (error) { console.warn('认证检查失败:', error); } return false; } showTypingIndicator() { if (this.isTyping) return; this.isTyping = true; const chatMessages = document.getElementById('chatMessages'); if (!chatMessages) return; const typingDiv = document.createElement('div'); typingDiv.id = 'typingIndicator'; typingDiv.className = 'flex items-start space-x-2'; typingDiv.innerHTML = ` <div class="w-6 h-6 rounded-full bg-gradient-to-r from-longling to-tech-blue flex items-center justify-center flex-shrink-0"> <i class="fas fa-robot text-xs"></i> </div> <div class="bg-gray-800/50 rounded-lg p-3 text-sm"> <div class="flex space-x-1"> <div class="w-2 h-2 bg-gray-400 rounded-full animate-bounce"></div> <div class="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style="animation-delay: 0.1s;"></div> <div class="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style="animation-delay: 0.2s;"></div> </div> <div class="text-xs text-gray-500 mt-1">AI正在思考中...</div> </div> `; chatMessages.appendChild(typingDiv); this.scrollToBottom(); } hideTypingIndicator() { this.isTyping = false; const typingIndicator = document.getElementById('typingIndicator'); if (typingIndicator) { typingIndicator.remove(); } } async getAIResponse(message) { // 模拟AI响应延迟 await new Promise(resolve => setTimeout(resolve, 1000 + Math.random() * 2000)); // 智能响应逻辑 const responses = this.generateSmartResponse(message); return responses[Math.floor(Math.random() * responses.length)]; } generateSmartResponse(message) { const msg = message.toLowerCase(); // 产品相关 if (msg.includes('产品') || msg.includes('服务')) { return [ '珑凌科技专注于量子安全技术，提供企业级加密解决方案。我们的产品包括量子密钥分发、后量子加密算法等。', '我们的核心产品包括量子安全通信平台、智能威胁检测系统，以及企业级数据保护解决方案。您对哪个方面比较感兴趣？', '珑凌科技的产品矩阵涵盖了从底层加密到智能决策的全栈解决方案。需要我详细介绍某个特定产品吗？' ]; } // 技术相关 if (msg.includes('技术') || msg.includes('量子') || msg.includes('安全')) { return [ '我们在量子密码学、后量子加密、以及AI安全等领域拥有先进技术。这些技术确保您的数据在量子计算时代仍然安全。', '珑凌科技的量子安全技术基于最新的密码学研究，能够抵御传统和量子计算攻击。您想了解具体的技术实现吗？', '我们的技术栈包括量子随机数生成、量子密钥分发协议、以及自适应安全算法。这些技术的结合为客户提供了前所未有的安全保障。' ]; } // 商务合作 if (msg.includes('合作') || msg.includes('商务') || msg.includes('联系')) { return [ '感谢您对珑凌科技的关注！我们的商务团队很乐意与您探讨合作机会。您可以通过官网联系表单或直接联系我们的商务代表。', '我们欢迎各种形式的合作伙伴关系。无论是技术集成、渠道合作还是战略联盟，我们都有专业的团队为您提供支持。', '珑凌科技正在寻求与各行业领先企业的合作。请告诉我您的具体需求，我会为您安排合适的对接人员。' ]; } // 价格相关 if (msg.includes('价格') || msg.includes('费用') || msg.includes('成本')) { return [ '我们提供灵活的定价方案，根据企业规模和具体需求定制。建议您联系我们的销售团队获取详细报价。', '珑凌科技的解决方案采用订阅制和一次性授权相结合的模式。具体价格取决于部署规模和服务等级。', '我们理解成本是企业决策的重要因素。我们的定价策略注重为客户提供最高的性价比，详情请咨询销售团队。' ]; } // 问候和感谢 if (msg.includes('你好') || msg.includes('hello') || msg.includes('hi')) { return [ '您好！欢迎来到珑凌科技。我是您的AI助手，很高兴为您服务。请问有什么可以帮助您的吗？', '您好！我是珑凌科技的智能助手。我可以为您介绍我们的产品、技术或解答其他问题。请随时告诉我您的需求。', 'Hi！感谢您对珑凌科技的关注。我会尽我所能为您提供帮助。您想了解我们的什么方面呢？' ]; } if (msg.includes('谢谢') || msg.includes('感谢') || msg.includes('thank')) { return [ '不客气！很高兴能为您提供帮助。如果您还有其他问题，请随时告诉我。', '您太客气了！为您服务是我的荣幸。珑凌科技随时为您提供支持。', '感谢您的认可！我们始终致力于为客户提供最优质的服务体验。' ]; } // 默认响应 return [ '这是一个很有趣的问题。基于我对珑凌科技的了解，我建议您可以进一步了解我们的产品和服务。需要我为您详细介绍吗？', '感谢您的询问。珑凌科技在量子安全领域有丰富的经验和先进的技术。您可以浏览我们的官网了解更多信息，或者直接与我们的专家团队联系。', '您提出了一个很好的观点。作为量子安全领域的领导者，珑凌科技一直在不断创新和完善我们的解决方案。有什么具体问题我可以为您解答吗？', '我理解您的关注。珑凌科技致力于为客户提供最佳的量子安全解决方案。如果您需要更详细的信息，我可以为您安排专业顾问的咨询。' ]; } updateSendButton() { const chatInput = document.getElementById('chatInput'); const sendBtn = document.getElementById('sendChatMessage'); if (chatInput && sendBtn) { const hasContent = chatInput.value.trim().length > 0; sendBtn.disabled = !hasContent || this.isTyping; sendBtn.style.opacity = hasContent && !this.isTyping ? '1' : '0.5'; } } scrollToBottom() { const chatMessages = document.getElementById('chatMessages'); if (chatMessages) { chatMessages.scrollTop = chatMessages.scrollHeight; } } startVoiceInput() { // 语音输入功能（需要浏览器支持） if ('webkitSpeechRecognition' in window || 'SpeechRecognition' in window) { const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition; const recognition = new SpeechRecognition(); recognition.lang = 'zh-CN'; recognition.continuous = false; recognition.interimResults = false; recognition.onstart = () => {  const voiceBtn = document.getElementById('voiceInputBtn'); if (voiceBtn) { voiceBtn.innerHTML = '<i class="fas fa-stop text-xs"></i>'; voiceBtn.style.color = '#ef4444'; } }; recognition.onresult = (event) => { const transcript = event.results[0][0].transcript; const chatInput = document.getElementById('chatInput'); if (chatInput) { chatInput.value = transcript; this.updateSendButton(); } }; recognition.onend = () => {  const voiceBtn = document.getElementById('voiceInputBtn'); if (voiceBtn) { voiceBtn.innerHTML = '<i class="fas fa-microphone text-xs"></i>'; voiceBtn.style.color = ''; } }; recognition.onerror = (event) => { console.error('语音识别错误:', event.error); }; recognition.start(); } else { alert('您的浏览器不支持语音识别功能'); } } showEmojiPanel() { // 简单的表情面板实现 const emojis = ['😊', '😂', '🤔', '👍', '❤️', '🔥', '💯', '🎉', '😎', '🚀']; const existingPanel = document.getElementById('emojiPanel'); if (existingPanel) { existingPanel.remove(); return; } const panel = document.createElement('div'); panel.id = 'emojiPanel'; panel.className = 'absolute bottom-full right-0 mb-2 p-2 bg-gray-800 rounded-lg shadow-lg grid grid-cols-5 gap-1'; panel.style.zIndex = '1000'; emojis.forEach(emoji => { const btn = document.createElement('button'); btn.textContent = emoji; btn.className = 'p-2 hover:bg-gray-700 rounded text-lg'; btn.onclick = () => { const chatInput = document.getElementById('chatInput'); if (chatInput) { chatInput.value += emoji; this.updateSendButton(); } panel.remove(); }; panel.appendChild(btn); }); const emojiBtn = document.getElementById('emojiBtn'); if (emojiBtn) { emojiBtn.parentElement.style.position = 'relative'; emojiBtn.parentElement.appendChild(panel); } // 点击外部关闭 setTimeout(() => { document.addEventListener('click', function closePanel(e) { if (!panel.contains(e.target) && e.target.id !== 'emojiBtn') { panel.remove(); document.removeEventListener('click', closePanel); } }); }, 0); } async loadChatHistory() { try { // 如果用户已认证，从数据库加载历史 if (this.isAuthenticated) { await this.loadChatHistoryFromAPI(); } else { // 访客模式：尝试从localStorage加载临时历史 this.loadChatHistoryFromLocalStorage(); } } catch (error) { console.warn('加载聊天历史失败:', error); // 降级到localStorage this.loadChatHistoryFromLocalStorage(); } } async loadChatHistoryFromAPI() { try { const token = localStorage.getItem('auth_token'); if (!token) return; const response = await fetch(this.apiEndpoints.getSessions, { method: 'GET', headers: { 'Authorization': `Bearer ${token}`, 'Content-Type': 'application/json' } }); const data = await response.json(); if (data.success && data.data && data.data.length > 0) { // 获取最近的会话 const recentSession = data.data[0]; this.currentSessionId = recentSession.id; // 加载该会话的消息 await this.loadSessionMessages(recentSession.id);  } } catch (error) { console.warn('从API加载聊天历史失败:', error); } } async loadSessionMessages(sessionId) { try { const token = localStorage.getItem('auth_token'); const response = await fetch( this.apiEndpoints.getMessages.replace('{id}', sessionId), { method: 'GET', headers: { 'Authorization': `Bearer ${token}`, 'Content-Type': 'application/json' } } ); const data = await response.json(); if (data.success && data.data) { // 显示最近的5条消息 const recentMessages = data.data.slice(-5); recentMessages.forEach(msg => { this.addMessage(msg.content, msg.role === 'user' ? 'user' : 'ai', false, false); }); } } catch (error) { console.warn('加载会话消息失败:', error); } } async loadChatHistoryFromStorage() { try { const isAuthenticated = await this.checkAuthentication(); if (isAuthenticated) { // 认证用户：尝试从API加载 const loaded = await this.loadChatHistoryFromServer(); if (loaded) return; } // 未认证用户或API失败：从本地存储加载 this.loadChatHistoryFromLocalStorage(); } catch (error) { console.warn('加载聊天历史失败，使用本地存储:', error); this.loadChatHistoryFromLocalStorage(); } } async loadChatHistoryFromServer() { try { const response = await fetch('/api/v1/chat/conversations?source=homepage&limit=1', { method: 'GET', headers: { 'Content-Type': 'application/json', 'X-Requested-With': 'XMLHttpRequest' } }); if (response.ok) { const result = await response.json(); if (result.success && result.data && result.data.length > 0) { const conversation = result.data[0]; if (conversation.messages && conversation.messages.length > 0) { this.chatHistory = conversation.messages; // 重新显示历史消息 conversation.messages.forEach(msg => { if (!msg.isError) { this.addMessage(msg.content, msg.sender, false, false); } });  return true; } } } } catch (error) { console.warn('从服务器加载聊天历史失败:', error); } return false; } loadChatHistoryFromLocalStorage() { try { const saved = localStorage.getItem('homepage-chat-history'); if (saved) { this.chatHistory = JSON.parse(saved); // 重新显示最近的几条消息 const recentMessages = this.chatHistory.slice(-5); recentMessages.forEach(msg => { if (!msg.isError) { this.addMessage(msg.content, msg.sender, false, false); } });  } } catch (error) { console.warn('从localStorage加载聊天历史失败:', error); } } async saveChatHistory() { // 使用智能存储方案 await this.saveChatToStorage(); } async clearHistory() { this.chatHistory = []; const chatMessages = document.getElementById('chatMessages'); if (chatMessages) { // 保留欢迎消息，清除其他消息 chatMessages.innerHTML = ` <div class="flex items-start space-x-2"> <div class="w-8 h-8 rounded-full bg-blue-500 flex items-center justify-center flex-shrink-0"> <svg class="w-4 h-4 text-white" fill="currentColor" viewBox="0 0 20 20"> <path fill-rule="evenodd" d="M18 10c0 3.866-3.582 7-8 7a8.841 8.841 0 01-4.083-.98L2 17l1.338-3.123C2.493 12.767 2 11.434 2 10c0-3.866 3.582-7 8-7s8 3.134 8 7zM7 9H5v2h2V9zm8 0h-2v2h2V9zM9 9h2v2H9V9z" clip-rule="evenodd"></path> </svg> </div> <div class="flex-1"> <p class="text-sm text-gray-600">您好！我是珑凌科技的AI智能助手。我可以帮助您了解我们的产品和服务、回答技术问题、提供解决方案建议等。请问有什么可以为您效劳的吗？</p> </div> </div> `; } try { const isAuthenticated = await this.checkAuthentication(); if (isAuthenticated) { // 认证用户：清除服务器端数据 await this.clearHistoryFromServer(); } // 清除本地存储（无论认证状态） localStorage.removeItem('homepage-chat-history'); localStorage.removeItem('chatHistory'); // 清理旧的存储键  } catch (error) { console.warn('清空聊天历史时出错:', error); // 确保本地存储被清理 localStorage.removeItem('homepage-chat-history'); localStorage.removeItem('chatHistory'); } } // 从服务器清除聊天历史 async clearHistoryFromServer() { try { const response = await fetch('/api/v1/chat/conversations?source=homepage', { method: 'DELETE', headers: { 'Content-Type': 'application/json', 'X-Requested-With': 'XMLHttpRequest' } }); if (response.ok) { const result = await response.json(); if (result.success) {  return true; } } } catch (error) { console.warn('清空服务器端聊天历史失败:', error); } return false; } } // 初始化首页AI对话系统 document.addEventListener('DOMContentLoaded', () => { window.homepageAIChat = new HomepageAIChat(); }); // 导出 window.HomepageAIChat = HomepageAIChat; 