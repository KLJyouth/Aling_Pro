// 聊天页面综合验证脚本 // 可以在浏览器控制台中运行此脚本来验证功能  // 延迟执行函数 const delay = (ms) => new Promise(resolve => setTimeout(resolve, ms)); // 验证步骤 const verificationSteps = { // 1. DOM 元素验证 async verifyDOMElements() {  const requiredElements = { 'loginModal': '登录模态框', 'loginButton': '登录按钮', 'guestModeButton': '访客模式按钮', 'userStatus': '用户状态显示', 'messageInput': '消息输入框', 'sendButton': '发送按钮', 'chatMessages': '聊天消息区域', 'recordButton': '语音输入按钮', 'imageGenButton': '图像生成按钮', 'ttsButton': '语音播放按钮', 'historyBtn': '历史记录按钮', 'settingsBtn': '设置按钮' }; const results = {}; for (const [id, desc] of Object.entries(requiredElements)) { const element = document.getElementById(id); results[id] = { exists: !!element, description: desc, element: element }; console.log(` ${results[id].exists ? '✅' : '❌'} ${desc} (${id})`); } const allExists = Object.values(results).every(r => r.exists);  return { success: allExists, results }; }, // 2. 聊天实例验证 async verifyChatInstance() {  const hasInstance = !!window.chatInstance; const hasCore = hasInstance && !!window.chatInstance.core; const hasUI = hasInstance && !!window.chatInstance.ui; const hasAPI = hasInstance && !!window.chatInstance.api;     if (hasAPI) { const apiInitialized = window.chatInstance.api.isInitialized;  } const allOK = hasInstance && hasCore && hasUI && hasAPI;  return { success: allOK, instance: window.chatInstance }; }, // 3. 访客模式验证 async verifyGuestMode() {  // 清除之前的状态 localStorage.removeItem('guestMode'); localStorage.removeItem('token'); const guestBtn = document.getElementById('guestModeButton'); const userStatus = document.getElementById('userStatus'); if (!guestBtn) {  return { success: false }; } // 模拟点击访客模式按钮  guestBtn.click(); await delay(500); // 检查状态 const guestModeSet = localStorage.getItem('guestMode') === 'true'; const statusText = userStatus ? userStatus.textContent : '';  console.log(` ${statusText.includes('访客') ? '✅' : '❌'} 用户状态显示: "${statusText}"`); const success = guestModeSet && statusText.includes('访客');  return { success, guestModeSet, statusText }; }, // 4. 消息输入验证 async verifyMessageInput() {  const messageInput = document.getElementById('messageInput'); const sendButton = document.getElementById('sendButton'); if (!messageInput || !sendButton) {  return { success: false }; } // 测试空输入 messageInput.value = ''; messageInput.dispatchEvent(new Event('input')); await delay(100); const emptyDisabled = sendButton.disabled;  // 测试有内容输入 messageInput.value = '测试消息'; messageInput.dispatchEvent(new Event('input')); await delay(100); const textEnabled = !sendButton.disabled;  // 清空输入 messageInput.value = ''; const success = emptyDisabled && textEnabled;  return { success, emptyDisabled, textEnabled }; }, // 5. 消息发送验证（访客模式） async verifyMessageSending() {  // 确保在访客模式 localStorage.setItem('guestMode', 'true'); const messageInput = document.getElementById('messageInput'); const sendButton = document.getElementById('sendButton'); const chatMessages = document.getElementById('chatMessages'); if (!messageInput || !sendButton || !chatMessages) {  return { success: false }; } // 记录初始消息数量 const initialMessageCount = chatMessages.children.length; // 发送测试消息 const testMessage = '这是一条自动化测试消息'; messageInput.value = testMessage; messageInput.dispatchEvent(new Event('input'));  sendButton.click(); // 等待处理 await delay(2000); // 检查结果 const finalMessageCount = chatMessages.children.length; const messagesAdded = finalMessageCount > initialMessageCount; const inputCleared = messageInput.value === '';    // 检查是否有访客模式回复 const messages = Array.from(chatMessages.querySelectorAll('.message, [class*="message"]')); const hasGuestResponse = messages.some(msg => msg.textContent && msg.textContent.includes('访客模式') );  const success = messagesAdded && inputCleared && hasGuestResponse;  return { success, messagesAdded, inputCleared, hasGuestResponse, messageCount: { initial: initialMessageCount, final: finalMessageCount } }; }, // 6. 按钮功能验证 async verifyButtonFunctions() {  const buttons = [ { id: 'historyBtn', name: '历史记录' }, { id: 'settingsBtn', name: '设置' }, { id: 'recordButton', name: '语音输入' }, { id: 'imageGenButton', name: '图像生成' }, { id: 'ttsButton', name: '语音播放' } ]; const results = {}; for (const button of buttons) { const element = document.getElementById(button.id); if (element) { try { element.click(); await delay(300); results[button.id] = { success: true, error: null };  } catch (error) { results[button.id] = { success: false, error: error.message };  } } else { results[button.id] = { success: false, error: '按钮不存在' };  } } const allWorking = Object.values(results).every(r => r.success);  return { success: allWorking, results }; } }; // 主验证函数 async function runComprehensiveVerification() {  const results = {}; try { // 等待页面完全加载 await delay(1000); // 运行所有验证步骤 results.domElements = await verificationSteps.verifyDOMElements();  results.chatInstance = await verificationSteps.verifyChatInstance();  results.guestMode = await verificationSteps.verifyGuestMode();  results.messageInput = await verificationSteps.verifyMessageInput();  results.messageSending = await verificationSteps.verifyMessageSending();  results.buttonFunctions = await verificationSteps.verifyButtonFunctions();  // 生成总结报告 const allTests = Object.values(results); const passedTests = allTests.filter(test => test.success).length; const totalTests = allTests.length;     console.log(` 成功率: ${Math.round((passedTests / totalTests) * 100)}%`); if (passedTests === totalTests) {  } else {  } return results; } catch (error) { console.error('❌ 验证过程中发生错误:', error); return { error: error.message, results }; } } // 自动运行验证（如果在浏览器中） if (typeof window !== 'undefined') { // 页面加载完成后自动运行 if (document.readyState === 'complete') { setTimeout(runComprehensiveVerification, 1500); } else { window.addEventListener('load', () => { setTimeout(runComprehensiveVerification, 1500); }); } // 添加到全局以便手动调用 window.chatVerification = { runComprehensiveVerification, verificationSteps }; } console.log('ℹ️ 验证脚本已加载。如需手动运行，请调用: chatVerification.runComprehensiveVerification()'); 