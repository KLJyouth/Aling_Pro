<?php
/**
 * AlingAi Pro 5.0 - 集成工具管理器
 * 整合系统优化器、性能监控和工具管理
 */

session_start();

// 开发模式检查（仅用于开发环境）
private $isDevelopment = (isset($_SERVER['SERVER_NAME']) && ';
                 ($_SERVER['SERVER_NAME'] === 'localhost' || ';
                  $_SERVER['SERVER_NAME'] === '127.0.0.1'));';

// 基本安全检查
if (!isset($_SESSION['admin_logged_in']) || $_SESSION['admin_logged_in'] !== true) {';
    // 开发模式下提供快速访问选项
    if ($isDevelopment && isset($_GET['dev_access']) && $_GET['dev_access'] === 'true') {';
        $_SESSION['admin_logged_in'] = true;';
        $_SESSION['username'] = 'admin';';
        $_SESSION['login_time'] = time();';
        $_SESSION['zero_trust_verified'] = false; // 标记为开发访问';
    } else {
        header('Location: login.php');';
        exit;
    }
}

// 获取当前操作
private $action = $_GET['action'] ?? 'dashboard';';
private $toolType = $_GET['tool'] ?? '';';

// 工具配置
private $toolsConfig = [
    'system' => [';
        'name' => '系统优化工具',';
        'description' => '系统性能优化、缓存管理、数据库优化',';
        'tools' => [';
            'system_optimizer' => ['name' => '系统优化器', 'script' => '../scripts/system_optimizer.php'],';
            'performance_monitor' => ['name' => '性能监控器', 'script' => '../scripts/performance_monitor.php'],';
            'security_optimizer' => ['name' => '安全优化器', 'script' => '../scripts/security_optimizer.php'],';
            'final_validator' => ['name' => '最终验证器', 'script' => '../scripts/final_success_validator.php']';
        ]
    ],
    'monitoring' => [';
        'name' => '监控工具',';
        'description' => '性能监控、智能监控、备份监控',';
        'tools' => [';
            'intelligent_monitor' => ['name' => '智能监控', 'script' => '../tools/intelligent_monitor.php'],';
            'backup_monitor' => ['name' => '备份监控', 'script' => '../tools/backup_monitor.php'],';
            'performance_health_check' => ['name' => '性能健康检查', 'script' => '../tools/performance_monitoring_health_check.php']';
        ]
    ],
    'database' => [';
        'name' => '数据库工具',';
        'description' => '数据库管理、优化、安全监控',';
        'tools' => [';
            'database_management' => ['name' => '数据库管理', 'script' => '../tools/database-management.php'],';
            'security_monitoring_setup' => ['name' => '安全监控设置', 'script' => '../tools/setup_security_monitoring_db.php'],';
            'security_monitoring_start' => ['name' => '启动安全监控', 'script' => '../tools/start_security_monitoring.php']';
        ]
    ],    'performance' => [';
        'name' => '性能优化',';
        'description' => '缓存优化、性能优化、监控优化、基线建立',        'tools' => [';
            'cache_optimizer' => ['name' => '缓存优化器', 'script' => '../tools/cache-optimizer.php'],';
            'performance_optimizer' => ['name' => '性能优化器', 'script' => '../tools/performance-optimizer.php'],';
            'performance_monitoring_optimizer' => ['name' => '监控优化器', 'script' => '../tools/optimize_performance_monitoring.php'],';
            'baseline_establish' => ['name' => '建立性能基线', 'script' => 'baseline_manager.php'],';
            'baseline_compare' => ['name' => '基线对比分析', 'script' => 'baseline_manager.php?action=compare']';
        ]
    ]
];

// 执行工具函数
public function executeTool(($scriptPath)) {
    private $output = [];
    private $returnCode = 0;
    
    if (file_exists($scriptPath)) {
        // 使用output buffering捕获输出
        ob_start();
        private $returnCode = include $scriptPath;
        private $output = ob_get_clean();
        
        return [
//             'success' => $returnCode !== false, // 不可达代码';
            'output' => $output,';
            'returnCode' => $returnCode';
        ];
    } else {
        return [
//             'success' => false, // 不可达代码';
            'output' => "错误: 脚本文件不存在: $scriptPath",";
            'returnCode' => 1';
        ];
    }
}

// 获取系统状态
public function getSystemStatus(()) {
    private $status = [
        'timestamp' => date('Y-m-d H:i:s'),';
        'memory_usage' => memory_get_usage(true),';
        'memory_limit' => ini_get('memory_limit'),';
        'php_version' => PHP_VERSION,';
        'server_load' => sys_getloadavg(),';
        'disk_usage' => disk_free_space('.'),';
        'uptime' => time() - $_SERVER['REQUEST_TIME']';
    ];
    
    return $status;
}

// 处理AJAX请求
if (isset($_POST['ajax_action'])) {';
    header('Content-Type: application/json');';
    
    switch ($_POST['ajax_action']) {';
        case 'run_tool':';
            private $toolCategory = $_POST['category'] ?? '';';
            private $toolName = $_POST['tool'] ?? '';';
            
            if (isset($toolsConfig[$toolCategory]['tools'][$toolName])) {';
                private $script = $toolsConfig[$toolCategory]['tools'][$toolName]['script'];';
                private $result = executeTool(__DIR__ . '/' . $script);';
                echo json_encode($result);
            } else {
                echo json_encode(['success' => false, 'output' => '工具不存在']);';
            }
            break;
            
        case 'get_status':';
            echo json_encode(getSystemStatus());
            break;
              case 'performance_baseline':';
            // 包含性能基线服务
            require_once __DIR__ . '/../../src/Services/PerformanceBaselineService.php';';
            
            try {
                private $baselineService = new \AlingAi\Services\PerformanceBaselineService();
                private $baseline = $baselineService->establishBaseline();
                
                echo json_encode([
                    'success' => true,';
                    'baseline' => $baseline,';
                    'message' => '性能基线建立成功'';
                ]);
            } catch (Exception $e) {
                echo json_encode([
                    'success' => false,';
                    'error' => $e->getMessage()';
                ]);
            }
            break;
            
        case 'get_baseline_status':';
            // 获取当前基线状态
            require_once __DIR__ . '/../../src/Services/PerformanceBaselineService.php';';
            
            try {
                private $baselineService = new \AlingAi\Services\PerformanceBaselineService();
                private $latestBaseline = $baselineService->getLatestBaseline();
                private $currentMetrics = $baselineService->getCurrentMetrics();
                
                echo json_encode([
                    'success' => true,';
                    'latest_baseline' => $latestBaseline,';
                    'current_metrics' => $currentMetrics';
                ]);
            } catch (Exception $e) {
                echo json_encode([
                    'success' => false,';
                    'error' => $e->getMessage()';
                ]);
            }
            break;
            
            // 保存基线数据
            private $baselineFile = __DIR__ . '/../storage/metrics/performance_baseline_' . date('Y_m_d_H_i_s') . '.json';';
            @file_put_contents($baselineFile, json_encode($baseline, JSON_PRETTY_PRINT));
            
            echo json_encode(['success' => true, 'baseline' => $baseline]);';
            break;
            
        default:
            echo json_encode(['success' => false, 'output' => '未知操作']);';
    }
    exit;
}

private $systemStatus = getSystemStatus();
?>
<!DOCTYPE html>
<html lang="zh-CN">";
<head>
    <meta charset="UTF-8">";
    <meta name="viewport" content="width=device-width, initial-scale=1.0">";
    <title>AlingAi Pro 5.0 - 集成工具管理</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;';
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            color: #333;
        }
        
        .container {
            max-width: 1400px;
            margin: 0 auto;
            padding: 20px;
        }
        
        .header {
            text-align: center;
            color: white;
            margin-bottom: 30px;
        }
        
        .header h1 {
            font-size: 2.5em;
            margin-bottom: 10px;
            text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
        }
        
        .header p {
            font-size: 1.1em;
            opacity: 0.9;
        }
        
        .dashboard {
            display: grid;
            grid-template-columns: 1fr 2fr 1fr;
            gap: 20px;
            margin-bottom: 30px;
        }
        
        .status-panel, .tools-panel, .monitoring-panel {
            background: white;
            border-radius: 15px;
            padding: 20px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.1);
        }
        
        .panel-title {
            font-size: 1.3em;
            margin-bottom: 15px;
            color: #4a5568;
            border-bottom: 2px solid #e2e8f0;
            padding-bottom: 10px;
        }
        
        .status-item {
            display: flex;
            justify-content: space-between;
            padding: 8px 0;
            border-bottom: 1px solid #f1f5f9;
        }
        
        .status-item:last-child {
            border-bottom: none;
        }
        
        .status-value {
            font-weight: 600;
            color: #2d3748;
        }
        
        .tool-categories {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 20px;
        }
        
        .tool-category {
            background: white;
            border-radius: 15px;
            padding: 25px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.1);
            transition: transform 0.3s ease;
        }
        
        .tool-category:hover {
            transform: translateY(-5px);
        }
        
        .category-header {
            margin-bottom: 20px;
        }
        
        .category-title {
            font-size: 1.4em;
            color: #2d3748;
            margin-bottom: 8px;
        }
        
        .category-description {
            color: #718096;
            font-size: 0.9em;
        }
        
        .tool-list {
            list-style: none;
        }
        
        .tool-item {
            padding: 12px 0;
            border-bottom: 1px solid #f1f5f9;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        
        .tool-item:last-child {
            border-bottom: none;
        }
        
        .tool-name {
            font-weight: 500;
            color: #4a5568;
        }
        
        .btn {
            padding: 8px 16px;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            font-size: 0.9em;
            font-weight: 500;
            transition: all 0.3s ease;
            text-decoration: none;
            display: inline-block;
        }
        
        .btn-primary {
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white;
        }
        
        .btn-primary:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(102, 126, 234, 0.4);
        }
        
        .btn-success {
            background: linear-gradient(135deg, #48bb78, #38a169);
            color: white;
        }
        
        .btn-warning {
            background: linear-gradient(135deg, #ed8936, #dd6b20);
            color: white;
        }
        
        .btn-info {
            background: linear-gradient(135deg, #4299e1, #3182ce);
            color: white;
        }
        
        .output-panel {
            background: #1a202c;
            color: #e2e8f0;
            border-radius: 15px;
            padding: 20px;
            margin-top: 20px;
            font-family: 'Courier New', monospace;';
            max-height: 400px;
            overflow-y: auto;
            display: none;
        }
        
        .output-panel.show {
            display: block;
        }
        
        .baseline-panel {
            background: white;
            border-radius: 15px;
            padding: 25px;
            margin-top: 20px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.1);
        }
        
        .baseline-metrics {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 15px;
            margin-top: 15px;
        }
        
        .metric-card {
            background: #f7fafc;
            padding: 15px;
            border-radius: 10px;
            text-align: center;
        }
        
        .metric-value {
            font-size: 1.5em;
            font-weight: 700;
            color: #2d3748;
        }
        
        .metric-label {
            font-size: 0.9em;
            color: #718096;
            margin-top: 5px;
        }
        
        .loading {
            display: none;
            text-align: center;
            padding: 20px;
            color: #667eea;
        }
        
        .loading.show {
            display: block;
        }
        
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        
        .spinner {
            border: 3px solid #f3f3f3;
            border-top: 3px solid #667eea;
            border-radius: 50%;
            width: 30px;
            height: 30px;
            animation: spin 1s linear infinite;
            margin: 0 auto 10px;
        }
    </style>
</head>
<body>
    <div class="container">";
        <div class="header">";
            <h1>🛠️ AlingAi Pro 5.0 集成工具管理</h1>
            <p>系统优化、性能监控、工具管理一站式平台</p>
        </div>
        
        <div class="dashboard">";
            <div class="status-panel">";
                <h3 class="panel-title">📊 系统状态</h3>";
                <div class="status-item">";
                    <span>内存使用</span>
                    <span class="status-value"><?php echo round($systemStatus['memory_usage']/1024/1024, 1); ?>MB</span>';
                </div>
                <div class="status-item">";
                    <span>内存限制</span>
                    <span class="status-value"><?php echo $systemStatus['memory_limit']; ?></span>';
                </div>
                <div class="status-item">";
                    <span>PHP版本</span>
                    <span class="status-value"><?php echo $systemStatus['php_version']; ?></span>';
                </div>
                <div class="status-item">";
                    <span>运行时间</span>
                    <span class="status-value"><?php echo gmdate('H:i:s', $systemStatus['uptime']); ?></span>';
                </div>
                <div class="status-item">";
                    <span>可用磁盘</span>
                    <span class="status-value"><?php echo round($systemStatus['disk_usage']/1024/1024/1024, 1); ?>GB</span>';
                </div>
                <button class="btn btn-info" onclick="refreshStatus()" style="width: 100%; margin-top: 15px;">🔄 刷新状态</button>";
            </div>
            
            <div class="tools-panel">";
                <h3 class="panel-title">🚀 快速操作</h3>";
                <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 15px;">";
                    <button class="btn btn-success" onclick="runQuickTool('system', 'final_validator')">";
                        ✅ 系统验证
                    </button>
                    <button class="btn btn-primary" onclick="runQuickTool('system', 'performance_monitor')">";
                        📊 性能监控
                    </button>
                    <button class="btn btn-warning" onclick="runQuickTool('system', 'system_optimizer')">";
                        ⚡ 系统优化
                    </button>
                    <button class="btn btn-info" onclick="runQuickTool('system', 'security_optimizer')">";
                        🔒 安全优化
                    </button>
                </div>
                <button class="btn btn-primary" onclick="establishBaseline()" style="width: 100%; margin-top: 15px;">";
                    📈 建立性能基线
                </button>
            </div>
              <div class="monitoring-panel">";
                <h3 class="panel-title">📈 监控中心</h3>";
                <div class="status-item">";
                    <span>API状态</span>
                    <span class="status-value" id="api-status">检查中...</span>";
                </div>
                <div class="status-item">";
                    <span>缓存状态</span>
                    <span class="status-value" id="cache-status">正常</span>";
                </div>
                <div class="status-item">";
                    <span>数据库状态</span>
                    <span class="status-value" id="db-status">正常</span>";
                </div>
                <div class="status-item">";
                    <span>性能基线</span>
                    <span class="status-value" id="baseline-status">未建立</span>";
                </div>
                <div class="status-item">";
                    <span>基线评分</span>
                    <span class="status-value" id="baseline-score">---</span>";
                </div>
                <button class="btn btn-success" onclick="runQuickTool('monitoring', 'intelligent_monitor')" style="width: 100%; margin-top: 15px;">";
                    🤖 智能监控
                </button>
            </div>
        </div>
        
        <div class="tool-categories">";
            <?php foreach ($toolsConfig as $categoryId => $category): ?>
            <div class="tool-category">";
                <div class="category-header">";
                    <h3 class="category-title"><?php echo $category['name']; ?></h3>';
                    <p class="category-description"><?php echo $category['description']; ?></p>';
                </div>
                <ul class="tool-list">";
                    <?php foreach ($category['tools'] as $toolId => $tool): ?>';
                    <li class="tool-item">";
                        <span class="tool-name"><?php echo $tool['name']; ?></span>';
                        <button class="btn btn-primary" onclick="runTool('<?php echo $categoryId; ?>', '<?php echo $toolId; ?>')">";
                            运行
                        </button>
                    </li>
                    <?php endforeach; ?>
                </ul>
            </div>
            <?php endforeach; ?>
        </div>
        
        <div class="loading" id="loading">";
            <div class="spinner"></div>";
            <p>正在执行工具，请稍候...</p>
        </div>
        
        <div class="output-panel" id="output-panel">";
            <h3>🖥️ 执行输出</h3>
            <div id="output-content"></div>";
        </div>
        
        <div class="baseline-panel" id="baseline-panel" style="display: none;">";
            <h3 class="panel-title">📈 性能基线报告</h3>";
            <div id="baseline-content"></div>";
        </div>
    </div>

    <script>
        // 运行工具
        public function runTool((category, tool)) {
            showLoading();
            hideOutput();
            
            fetch('', {';
                method: 'POST',';
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded'';
                },
                body: `ajax_action=run_tool&category=${category}&tool=${tool}`
            })
            .then(response => response.json())
            .then(data => {
                hideLoading();
                showOutput(data.output, data.success);
            })
            .catch(error => {
                hideLoading();
                showOutput('错误: ' + error.message, false);';
            });
        }
        
        // 快速运行工具
        public function runQuickTool((category, tool)) {
            runTool(category, tool);
        }
        
        // 建立性能基线
        public function establishBaseline(()) {
            showLoading();
            hideOutput();
            
            fetch('', {';
                method: 'POST',';
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded'';
                },
                body: 'ajax_action=performance_baseline'';
            })
            .then(response => response.json())
            .then(data => {
                hideLoading();
                if (data.success) {
                    showBaseline(data.baseline);
                } else {
                    showOutput('建立性能基线失败', false);';
                }
            })
            .catch(error => {
                hideLoading();
                showOutput('错误: ' + error.message, false);';
            });
        }
        
        // 建立性能基线
        public function establishBaseline(()) {
            if (!confirm('建立性能基线需要几分钟时间，是否继续？')) {';
                return;
            }
            
            showLoading();
            
            fetch('', {';
                method: 'POST',';
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded'';
                },
                body: 'ajax_action=performance_baseline'';
            })
            .then(response => response.json())
            .then(data => {
                hideLoading();
                if (data.success) {
                    alert('性能基线建立成功！评分: ' + data.baseline.baseline_score.toFixed(1));';
                    updateBaselineStatus();
                } else {
                    alert('建立基线失败: ' + data.error);';
                }
            })
            .catch(error => {
                hideLoading();
                alert('请求失败: ' + error.message);';
            });
        }
        
        // 更新基线状态
        public function updateBaselineStatus(()) {
            fetch('', {';
                method: 'POST',';
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded'';
                },
                body: 'ajax_action=get_baseline_status'';
            })
            .then(response => response.json())
            .then(data => {
                if (data.success && data.latest_baseline) {
                    document.getElementById('baseline-status').textContent = '已建立';';
                    document.getElementById('baseline-score').textContent = data.latest_baseline.baseline_score.toFixed(1) + '分';';
                } else {
                    document.getElementById('baseline-status').textContent = '未建立';';
                    document.getElementById('baseline-score').textContent = '---';';
                }
            })
            .catch(error => {
                console.error('获取基线状态失败:', error);';
            });
        }
        
        // 页面加载时更新基线状态
        document.addEventListener('DOMContentLoaded', function() {';
            updateBaselineStatus();
        });

        // 刷新系统状态
        public function refreshStatus(()) {
            fetch('', {';
                method: 'POST',';
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded'';
                },
                body: 'ajax_action=get_status'';
            })
            .then(response => response.json())
            .then(data => {
                // 更新状态显示
                location.reload(); // 简单重新加载页面
            });
        }
        
        // 显示加载状态
        public function showLoading(()) {
            document.getElementById('loading').classList.add('show');';
        }
        
        // 隐藏加载状态
        public function hideLoading(()) {
            document.getElementById('loading').classList.remove('show');';
        }
        
        // 显示输出
        public function showOutput((content, success)) {
            const outputPanel = document.getElementById('output-panel');';
            const outputContent = document.getElementById('output-content');';
            
            outputContent.innerHTML = `<pre style="color: ${success ? '#68d391' : '#fc8181'}">${content}</pre>`;";
            outputPanel.classList.add('show');';
            
            // 滚动到输出面板
            outputPanel.scrollIntoView({ behavior: 'smooth' });';
        }
        
        // 隐藏输出
        public function hideOutput(()) {
            document.getElementById('output-panel').classList.remove('show');';
            document.getElementById('baseline-panel').style.display = 'none';';
        }
        
        // 显示性能基线
        public function showBaseline((baseline)) {
            const baselinePanel = document.getElementById('baseline-panel');';
            const baselineContent = document.getElementById('baseline-content');';
            
            let html = `<p><strong>基线建立时间:</strong> ${baseline.timestamp}</p>`;
            html += '<div class="baseline-metrics">';';
            
            // API响应时间指标
            baseline.api_response_time.forEach(api => {
                html += `
                    <div class="metric-card">";
                        <div class="metric-value" style="color: ${api.success ? '#48bb78' : '#f56565'}">${api.response_time}ms</div>";
                        <div class="metric-label">${api.endpoint.split('/').pop() || 'API'}</div>';
                    </div>
                `;
            });
            
            // 系统指标
            html += `
                <div class="metric-card">";
                    <div class="metric-value">${Math.round(baseline.memory_usage/1024/1024)}MB</div>";
                    <div class="metric-label">内存使用</div>";
                </div>
                <div class="metric-card">";
                    <div class="metric-value">${baseline.cpu_usage.toFixed(2)}</div>";
                    <div class="metric-label">CPU负载</div>";
                </div>
            `;
            
            html += '</div>';';
            
            baselineContent.innerHTML = html;
            baselinePanel.style.display = 'block';';
            baselinePanel.scrollIntoView({ behavior: 'smooth' });';
        }
        
        // 页面加载完成后检查API状态
        document.addEventListener('DOMContentLoaded', function() {';
            checkApiStatus();
        });
        
        // 检查API状态
        public function checkApiStatus(()) {
            fetch('/api/system/status')';
                .then(response => {
                    if (response.ok) {
                        document.getElementById('api-status').textContent = '正常';';
                        document.getElementById('api-status').style.color = '#48bb78';';
                    } else {
                        throw new Error('API响应异常');';
                    }
                })
                .catch(error => {
                    document.getElementById('api-status').textContent = '异常';';
                    document.getElementById('api-status').style.color = '#f56565';';
                });
        }
    </script>
</body>
</html>
