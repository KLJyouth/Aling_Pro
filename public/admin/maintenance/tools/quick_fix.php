<?php
/**
 * ¿ìËÙÐÞ¸´½Å±¾ - ×¨ÃÅÕë¶ÔAPIÎÄµµÖÐµÄÓï·¨´íÎóºÍÖÐÎÄÂÒÂë
 */

// Ä¿±êÎÄ¼þ
\ = 'public/admin/api/documentation/index.php';

// ±¸·ÝÎÄ¼þ
\ = \ . '.bak.' . date('YmdHis'];

// ¶ÁÈ¡ÎÄ¼þÄÚÈÝ
\<?php /**  * AlingAi Pro 5.0 - APIï¿½Äµï¿½ï¿½ï¿½ï¿½ï¿½ÏµÍ³  * ï¿½Ô¶ï¿½É¨ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½APIï¿½Äµï¿½ï¿½ï¿½Ö§ï¿½ï¿½OpenAPI/Swaggerï¿½ï¿½Ê½  */  declare(strict_types=1];  header("Content-Type: application/json; charset=utf-8"]; header("Access-Control-Allow-Origin: *"]; header("Access-Control-Allow-Methods: GET, POST, PUT, DELETE, OPTIONS"]; header("Access-Control-Allow-Headers: Content-Type, Authorization"];  if ($_SERVER["REQUEST_METHOD"] === "OPTIONS") {     http_response_code(200];     exit(]; }  require_once __DIR__ . "/../../../../vendor/autoload.php"; require_once __DIR__ . "/../../../../src/Auth/AdminAuthServiceDemo.php";  use AlingAi\Auth\AdminAuthServiceDemo;  // ï¿½ï¿½Ó¦ï¿½ï¿½ï¿½ï¿½ function sendResponse($success, $data = null, $message = "", $code = 200) {     http_response_code($code];     echo json_encode([         "success" => $success,         "data" => $data,         "message" => $message,         "timestamp" => date("Y-m-d H:i:s")     ],  JSON_UNESCAPED_UNICODE];     exit(]; }  // ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ function handleError($message, $code = 500) {     error_log("API Error: $message"];     sendResponse(false, null, $message, $code]; }  // APIï¿½Äµï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ function generateApiDocumentation() {     return [         "openapi" => "3.0.0",         "info" => [             "title" => "AlingAi Pro API",             "description" => "AlingAi Pro APIÎÄµµÏµÍ³ - ÓÃ»§¹ÜÀí¡¢ÏµÍ³¼à¿ØµÈ¹¦ÄÜ",             "version" => "6.0.0",             "contact" => [                 "name" => "AlingAi Team",                 "email" => "api@gxggm.com",                 "url" => "https://alingai.com"             ],              "license" => [                 "name" => "MIT",                 "url" => "https://opensource.org/licenses/MIT"             ]         ],          "servers" => [             [                 "url" => "http://localhost",                 "description" => "ï¿½ï¿½ï¿½Ø¿ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½"             ],              [                 "url" => "https://api.alingai.com",                 "description" => "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½"             ]         ],          "security" => [             ["bearerAuth" => []],              ["apiKey" => []]         ],          "paths" => generateApiPaths(),         "components" => generateApiComponents()     ]; }  function generateApiPaths() {     return [         // ï¿½ï¿½Ö¤ï¿½ï¿½ï¿½API         "/api/auth/login" => [             "post" => [                 "tags" => ["ï¿½ï¿½Ö¤"],                  "summary" => "ï¿½Ã»ï¿½ï¿½ï¿½Â¼",                 "description" => "Ê¹ï¿½ï¿½ï¿½Ã»ï¿½ï¿½ï¿½/ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ðµï¿½Â¼",                 "requestBody" => [                     "required" => true,                     "content" => [                         "application/json" => [                             "schema" => [                                 "type" => "object",                                 "required" => ["username", "password"],                                  "properties" => [                                     "username" => ["type" => "string", "description" => "ï¿½Ã»ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½"],                                      "password" => ["type" => "string", "description" => "ï¿½ï¿½ï¿½ï¿½"],                                      "remember" => ["type" => "boolean", "description" => "ï¿½ï¿½×¡ï¿½ï¿½Â¼×´Ì¬"]                                 ]                             ]                         ]                     ]                 ],                  "responses" => [                     "200" => [                         "description" => "ï¿½ï¿½Â¼ï¿½É¹ï¿½",                         "content" => [                             "application/json" => [                                 "schema" => ["\$ref" => "#/components/schemas/AuthResponse"]                             ]                         ]                     ],                      "401" => ["description" => "ï¿½ï¿½Ö¤Ê§ï¿½ï¿½"]                 ]             ]         ]     ]; }  function generateApiComponents() {     return [         "schemas" => [             "AuthResponse" => [                 "type" => "object",                 "properties" => [                     "success" => ["type" => "boolean"],                      "data" => [                         "type" => "object",                         "properties" => [                             "token" => ["type" => "string"],                              "user" => ["\$ref" => "#/components/schemas/User"]                         ]                     ],                      "message" => ["type" => "string"]                 ]             ],              "User" => [                 "type" => "object",                 "properties" => [                     "id" => ["type" => "integer"],                      "username" => ["type" => "string"],                      "email" => ["type" => "string"],                      "avatar" => ["type" => "string"],                      "role" => ["type" => "string"]                 ]             ]         ],          "securitySchemes" => [             "bearerAuth" => [                 "type" => "http",                 "scheme" => "bearer",                 "bearerFormat" => "JWT"             ],              "apiKey" => [                 "type" => "apiKey",                 "in" => "header",                 "name" => "X-API-Key"             ]         ]     ]; }  // ï¿½ï¿½È¨ï¿½ï¿½Ö¤ function authenticateRequest() {     $auth = new AdminAuthServiceDemo(];          // ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ð»ï¿½È¡ï¿½ï¿½È¨ï¿½ï¿½Ï¢     $authHeader = $_SERVER["HTTP_AUTHORIZATION"] ?? "";     $apiKey = $_SERVER["HTTP_X_API_KEY"] ?? "";          if (empty($authHeader) && empty($apiKey)) {         handleError("Î´ï¿½á¹©ï¿½ï¿½Ö¤ï¿½ï¿½Ï¢", 401];     }          // ï¿½ï¿½ï¿½ï¿½Bearer Token     if (!empty($authHeader)) {         $token = str_replace("Bearer ", "", $authHeader];         if (!$auth->validateToken($token)) {             handleError("ï¿½ï¿½Ð§ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½", 401];         }         return $auth->getUserFromToken($token];     }          // ï¿½ï¿½ï¿½ï¿½API Key     if (!empty($apiKey)) {         if (!$auth->validateApiKey($apiKey)) {             handleError("ï¿½ï¿½Ð§ï¿½ï¿½APIï¿½ï¿½Ô¿", 401];         }         return $auth->getUserFromApiKey($apiKey];     }          handleError("ï¿½ï¿½Ö¤Ê§ï¿½ï¿½", 401]; }  // ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ function handleRequest() {     $method = $_SERVER["REQUEST_METHOD"];     $path = parse_url($_SERVER["REQUEST_URI"],  PHP_URL_PATH];     $pathParts = explode("/", trim($path, "/")];     $action = $pathParts[count($pathParts) - 1] ?? "";          // ï¿½ï¿½ï¿½ï¿½ï¿½OPTIONSï¿½ï¿½ï¿½ï¿½CORSÔ¤ï¿½ï¿½ï¿½ï¿½Ó¦ï¿½ï¿½ï¿½ï¿½Ç°ï¿½æ´¦ï¿½ï¿½     if ($method === "OPTIONS") {         return;     }          // ï¿½ï¿½ï¿½ï¿½Â·ï¿½ï¿½ï¿½Í·ï¿½ï¿½ï¿½ï¿½Ö·ï¿½ï¿½ï¿½ï¿½ï¿½     switch ($action) {         case "schema":             // ï¿½ï¿½È¡APIï¿½Äµï¿½ï¿½á¹¹             sendResponse(true, generateApiDocumentation(), "ï¿½É¹ï¿½ï¿½ï¿½È¡APIï¿½Äµï¿½"];             break;                      default:             // Ä¬ï¿½Ï·ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½APIï¿½Äµï¿½             $docs = generateApiDocumentation(];             sendResponse(true, $docs, "ï¿½É¹ï¿½ï¿½ï¿½È¡APIï¿½Äµï¿½"];     } }  // Ö´ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ try {     handleRequest(]; } catch (Exception $e) {     handleError("ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ê±ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½: " . $e->getMessage(), 500]; }  = file_get_contents(\];
if (\<?php /**  * AlingAi Pro 5.0 - APIï¿½Äµï¿½ï¿½ï¿½ï¿½ï¿½ÏµÍ³  * ï¿½Ô¶ï¿½É¨ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½APIï¿½Äµï¿½ï¿½ï¿½Ö§ï¿½ï¿½OpenAPI/Swaggerï¿½ï¿½Ê½  */  declare(strict_types=1];  header("Content-Type: application/json; charset=utf-8"]; header("Access-Control-Allow-Origin: *"]; header("Access-Control-Allow-Methods: GET, POST, PUT, DELETE, OPTIONS"]; header("Access-Control-Allow-Headers: Content-Type, Authorization"];  if ($_SERVER["REQUEST_METHOD"] === "OPTIONS") {     http_response_code(200];     exit(]; }  require_once __DIR__ . "/../../../../vendor/autoload.php"; require_once __DIR__ . "/../../../../src/Auth/AdminAuthServiceDemo.php";  use AlingAi\Auth\AdminAuthServiceDemo;  // ï¿½ï¿½Ó¦ï¿½ï¿½ï¿½ï¿½ function sendResponse($success, $data = null, $message = "", $code = 200) {     http_response_code($code];     echo json_encode([         "success" => $success,         "data" => $data,         "message" => $message,         "timestamp" => date("Y-m-d H:i:s")     ],  JSON_UNESCAPED_UNICODE];     exit(]; }  // ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ function handleError($message, $code = 500) {     error_log("API Error: $message"];     sendResponse(false, null, $message, $code]; }  // APIï¿½Äµï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ function generateApiDocumentation() {     return [         "openapi" => "3.0.0",         "info" => [             "title" => "AlingAi Pro API",             "description" => "AlingAi Pro APIÎÄµµÏµÍ³ - ÓÃ»§¹ÜÀí¡¢ÏµÍ³¼à¿ØµÈ¹¦ÄÜ",             "version" => "6.0.0",             "contact" => [                 "name" => "AlingAi Team",                 "email" => "api@gxggm.com",                 "url" => "https://alingai.com"             ],              "license" => [                 "name" => "MIT",                 "url" => "https://opensource.org/licenses/MIT"             ]         ],          "servers" => [             [                 "url" => "http://localhost",                 "description" => "ï¿½ï¿½ï¿½Ø¿ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½"             ],              [                 "url" => "https://api.alingai.com",                 "description" => "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½"             ]         ],          "security" => [             ["bearerAuth" => []],              ["apiKey" => []]         ],          "paths" => generateApiPaths(),         "components" => generateApiComponents()     ]; }  function generateApiPaths() {     return [         // ï¿½ï¿½Ö¤ï¿½ï¿½ï¿½API         "/api/auth/login" => [             "post" => [                 "tags" => ["ï¿½ï¿½Ö¤"],                  "summary" => "ï¿½Ã»ï¿½ï¿½ï¿½Â¼",                 "description" => "Ê¹ï¿½ï¿½ï¿½Ã»ï¿½ï¿½ï¿½/ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ðµï¿½Â¼",                 "requestBody" => [                     "required" => true,                     "content" => [                         "application/json" => [                             "schema" => [                                 "type" => "object",                                 "required" => ["username", "password"],                                  "properties" => [                                     "username" => ["type" => "string", "description" => "ï¿½Ã»ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½"],                                      "password" => ["type" => "string", "description" => "ï¿½ï¿½ï¿½ï¿½"],                                      "remember" => ["type" => "boolean", "description" => "ï¿½ï¿½×¡ï¿½ï¿½Â¼×´Ì¬"]                                 ]                             ]                         ]                     ]                 ],                  "responses" => [                     "200" => [                         "description" => "ï¿½ï¿½Â¼ï¿½É¹ï¿½",                         "content" => [                             "application/json" => [                                 "schema" => ["\$ref" => "#/components/schemas/AuthResponse"]                             ]                         ]                     ],                      "401" => ["description" => "ï¿½ï¿½Ö¤Ê§ï¿½ï¿½"]                 ]             ]         ]     ]; }  function generateApiComponents() {     return [         "schemas" => [             "AuthResponse" => [                 "type" => "object",                 "properties" => [                     "success" => ["type" => "boolean"],                      "data" => [                         "type" => "object",                         "properties" => [                             "token" => ["type" => "string"],                              "user" => ["\$ref" => "#/components/schemas/User"]                         ]                     ],                      "message" => ["type" => "string"]                 ]             ],              "User" => [                 "type" => "object",                 "properties" => [                     "id" => ["type" => "integer"],                      "username" => ["type" => "string"],                      "email" => ["type" => "string"],                      "avatar" => ["type" => "string"],                      "role" => ["type" => "string"]                 ]             ]         ],          "securitySchemes" => [             "bearerAuth" => [                 "type" => "http",                 "scheme" => "bearer",                 "bearerFormat" => "JWT"             ],              "apiKey" => [                 "type" => "apiKey",                 "in" => "header",                 "name" => "X-API-Key"             ]         ]     ]; }  // ï¿½ï¿½È¨ï¿½ï¿½Ö¤ function authenticateRequest() {     $auth = new AdminAuthServiceDemo(];          // ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ð»ï¿½È¡ï¿½ï¿½È¨ï¿½ï¿½Ï¢     $authHeader = $_SERVER["HTTP_AUTHORIZATION"] ?? "";     $apiKey = $_SERVER["HTTP_X_API_KEY"] ?? "";          if (empty($authHeader) && empty($apiKey)) {         handleError("Î´ï¿½á¹©ï¿½ï¿½Ö¤ï¿½ï¿½Ï¢", 401];     }          // ï¿½ï¿½ï¿½ï¿½Bearer Token     if (!empty($authHeader)) {         $token = str_replace("Bearer ", "", $authHeader];         if (!$auth->validateToken($token)) {             handleError("ï¿½ï¿½Ð§ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½", 401];         }         return $auth->getUserFromToken($token];     }          // ï¿½ï¿½ï¿½ï¿½API Key     if (!empty($apiKey)) {         if (!$auth->validateApiKey($apiKey)) {             handleError("ï¿½ï¿½Ð§ï¿½ï¿½APIï¿½ï¿½Ô¿", 401];         }         return $auth->getUserFromApiKey($apiKey];     }          handleError("ï¿½ï¿½Ö¤Ê§ï¿½ï¿½", 401]; }  // ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ function handleRequest() {     $method = $_SERVER["REQUEST_METHOD"];     $path = parse_url($_SERVER["REQUEST_URI"],  PHP_URL_PATH];     $pathParts = explode("/", trim($path, "/")];     $action = $pathParts[count($pathParts) - 1] ?? "";          // ï¿½ï¿½ï¿½ï¿½ï¿½OPTIONSï¿½ï¿½ï¿½ï¿½CORSÔ¤ï¿½ï¿½ï¿½ï¿½Ó¦ï¿½ï¿½ï¿½ï¿½Ç°ï¿½æ´¦ï¿½ï¿½     if ($method === "OPTIONS") {         return;     }          // ï¿½ï¿½ï¿½ï¿½Â·ï¿½ï¿½ï¿½Í·ï¿½ï¿½ï¿½ï¿½Ö·ï¿½ï¿½ï¿½ï¿½ï¿½     switch ($action) {         case "schema":             // ï¿½ï¿½È¡APIï¿½Äµï¿½ï¿½á¹¹             sendResponse(true, generateApiDocumentation(), "ï¿½É¹ï¿½ï¿½ï¿½È¡APIï¿½Äµï¿½"];             break;                      default:             // Ä¬ï¿½Ï·ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½APIï¿½Äµï¿½             $docs = generateApiDocumentation(];             sendResponse(true, $docs, "ï¿½É¹ï¿½ï¿½ï¿½È¡APIï¿½Äµï¿½"];     } }  // Ö´ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ try {     handleRequest(]; } catch (Exception $e) {     handleError("ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ê±ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½: " . $e->getMessage(), 500]; }  === false) {
    die("ÎÞ·¨¶ÁÈ¡ÎÄ¼þ£º\\n"];
}

// ´´½¨±¸·Ý
file_put_contents(\, \<?php /**  * AlingAi Pro 5.0 - APIï¿½Äµï¿½ï¿½ï¿½ï¿½ï¿½ÏµÍ³  * ï¿½Ô¶ï¿½É¨ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½APIï¿½Äµï¿½ï¿½ï¿½Ö§ï¿½ï¿½OpenAPI/Swaggerï¿½ï¿½Ê½  */  declare(strict_types=1];  header("Content-Type: application/json; charset=utf-8"]; header("Access-Control-Allow-Origin: *"]; header("Access-Control-Allow-Methods: GET, POST, PUT, DELETE, OPTIONS"]; header("Access-Control-Allow-Headers: Content-Type, Authorization"];  if ($_SERVER["REQUEST_METHOD"] === "OPTIONS") {     http_response_code(200];     exit(]; }  require_once __DIR__ . "/../../../../vendor/autoload.php"; require_once __DIR__ . "/../../../../src/Auth/AdminAuthServiceDemo.php";  use AlingAi\Auth\AdminAuthServiceDemo;  // ï¿½ï¿½Ó¦ï¿½ï¿½ï¿½ï¿½ function sendResponse($success, $data = null, $message = "", $code = 200) {     http_response_code($code];     echo json_encode([         "success" => $success,         "data" => $data,         "message" => $message,         "timestamp" => date("Y-m-d H:i:s")     ],  JSON_UNESCAPED_UNICODE];     exit(]; }  // ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ function handleError($message, $code = 500) {     error_log("API Error: $message"];     sendResponse(false, null, $message, $code]; }  // APIï¿½Äµï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ function generateApiDocumentation() {     return [         "openapi" => "3.0.0",         "info" => [             "title" => "AlingAi Pro API",             "description" => "AlingAi Pro APIÎÄµµÏµÍ³ - ÓÃ»§¹ÜÀí¡¢ÏµÍ³¼à¿ØµÈ¹¦ÄÜ",             "version" => "6.0.0",             "contact" => [                 "name" => "AlingAi Team",                 "email" => "api@gxggm.com",                 "url" => "https://alingai.com"             ],              "license" => [                 "name" => "MIT",                 "url" => "https://opensource.org/licenses/MIT"             ]         ],          "servers" => [             [                 "url" => "http://localhost",                 "description" => "ï¿½ï¿½ï¿½Ø¿ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½"             ],              [                 "url" => "https://api.alingai.com",                 "description" => "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½"             ]         ],          "security" => [             ["bearerAuth" => []],              ["apiKey" => []]         ],          "paths" => generateApiPaths(),         "components" => generateApiComponents()     ]; }  function generateApiPaths() {     return [         // ï¿½ï¿½Ö¤ï¿½ï¿½ï¿½API         "/api/auth/login" => [             "post" => [                 "tags" => ["ï¿½ï¿½Ö¤"],                  "summary" => "ï¿½Ã»ï¿½ï¿½ï¿½Â¼",                 "description" => "Ê¹ï¿½ï¿½ï¿½Ã»ï¿½ï¿½ï¿½/ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ðµï¿½Â¼",                 "requestBody" => [                     "required" => true,                     "content" => [                         "application/json" => [                             "schema" => [                                 "type" => "object",                                 "required" => ["username", "password"],                                  "properties" => [                                     "username" => ["type" => "string", "description" => "ï¿½Ã»ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½"],                                      "password" => ["type" => "string", "description" => "ï¿½ï¿½ï¿½ï¿½"],                                      "remember" => ["type" => "boolean", "description" => "ï¿½ï¿½×¡ï¿½ï¿½Â¼×´Ì¬"]                                 ]                             ]                         ]                     ]                 ],                  "responses" => [                     "200" => [                         "description" => "ï¿½ï¿½Â¼ï¿½É¹ï¿½",                         "content" => [                             "application/json" => [                                 "schema" => ["\$ref" => "#/components/schemas/AuthResponse"]                             ]                         ]                     ],                      "401" => ["description" => "ï¿½ï¿½Ö¤Ê§ï¿½ï¿½"]                 ]             ]         ]     ]; }  function generateApiComponents() {     return [         "schemas" => [             "AuthResponse" => [                 "type" => "object",                 "properties" => [                     "success" => ["type" => "boolean"],                      "data" => [                         "type" => "object",                         "properties" => [                             "token" => ["type" => "string"],                              "user" => ["\$ref" => "#/components/schemas/User"]                         ]                     ],                      "message" => ["type" => "string"]                 ]             ],              "User" => [                 "type" => "object",                 "properties" => [                     "id" => ["type" => "integer"],                      "username" => ["type" => "string"],                      "email" => ["type" => "string"],                      "avatar" => ["type" => "string"],                      "role" => ["type" => "string"]                 ]             ]         ],          "securitySchemes" => [             "bearerAuth" => [                 "type" => "http",                 "scheme" => "bearer",                 "bearerFormat" => "JWT"             ],              "apiKey" => [                 "type" => "apiKey",                 "in" => "header",                 "name" => "X-API-Key"             ]         ]     ]; }  // ï¿½ï¿½È¨ï¿½ï¿½Ö¤ function authenticateRequest() {     $auth = new AdminAuthServiceDemo(];          // ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ð»ï¿½È¡ï¿½ï¿½È¨ï¿½ï¿½Ï¢     $authHeader = $_SERVER["HTTP_AUTHORIZATION"] ?? "";     $apiKey = $_SERVER["HTTP_X_API_KEY"] ?? "";          if (empty($authHeader) && empty($apiKey)) {         handleError("Î´ï¿½á¹©ï¿½ï¿½Ö¤ï¿½ï¿½Ï¢", 401];     }          // ï¿½ï¿½ï¿½ï¿½Bearer Token     if (!empty($authHeader)) {         $token = str_replace("Bearer ", "", $authHeader];         if (!$auth->validateToken($token)) {             handleError("ï¿½ï¿½Ð§ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½", 401];         }         return $auth->getUserFromToken($token];     }          // ï¿½ï¿½ï¿½ï¿½API Key     if (!empty($apiKey)) {         if (!$auth->validateApiKey($apiKey)) {             handleError("ï¿½ï¿½Ð§ï¿½ï¿½APIï¿½ï¿½Ô¿", 401];         }         return $auth->getUserFromApiKey($apiKey];     }          handleError("ï¿½ï¿½Ö¤Ê§ï¿½ï¿½", 401]; }  // ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ function handleRequest() {     $method = $_SERVER["REQUEST_METHOD"];     $path = parse_url($_SERVER["REQUEST_URI"],  PHP_URL_PATH];     $pathParts = explode("/", trim($path, "/")];     $action = $pathParts[count($pathParts) - 1] ?? "";          // ï¿½ï¿½ï¿½ï¿½ï¿½OPTIONSï¿½ï¿½ï¿½ï¿½CORSÔ¤ï¿½ï¿½ï¿½ï¿½Ó¦ï¿½ï¿½ï¿½ï¿½Ç°ï¿½æ´¦ï¿½ï¿½     if ($method === "OPTIONS") {         return;     }          // ï¿½ï¿½ï¿½ï¿½Â·ï¿½ï¿½ï¿½Í·ï¿½ï¿½ï¿½ï¿½Ö·ï¿½ï¿½ï¿½ï¿½ï¿½     switch ($action) {         case "schema":             // ï¿½ï¿½È¡APIï¿½Äµï¿½ï¿½á¹¹             sendResponse(true, generateApiDocumentation(), "ï¿½É¹ï¿½ï¿½ï¿½È¡APIï¿½Äµï¿½"];             break;                      default:             // Ä¬ï¿½Ï·ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½APIï¿½Äµï¿½             $docs = generateApiDocumentation(];             sendResponse(true, $docs, "ï¿½É¹ï¿½ï¿½ï¿½È¡APIï¿½Äµï¿½"];     } }  // Ö´ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ try {     handleRequest(]; } catch (Exception $e) {     handleError("ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ê±ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½: " . $e->getMessage(), 500]; } ];
echo "ÒÑ´´½¨±¸·Ý£º\\n";

// ÐÞ¸´ÖÐÎÄÂÒÂë
\ = [
    // ÎÄ¼þÍ·²¿×¢ÊÍ
    'AlingAi Pro 5.0 - APIï¿½Äµï¿½ï¿½ï¿½ï¿½ï¿½ÏµÍ³' => 'AlingAi Pro 6.0 - APIÎÄµµÉú³ÉÏµÍ³',
    'ï¿½Ô¶ï¿½É¨ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½APIï¿½Äµï¿½ï¿½ï¿½Ö§ï¿½ï¿½OpenAPI/Swaggerï¿½ï¿½Ê½' => '×Ô¶¯É¨Ãè²¢Éú³ÉAPIÎÄµµ£¬Ö§³ÖOpenAPI/Swagger¸ñÊ½',
    
    // º¯Êý×¢ÊÍ
    'ï¿½ï¿½Ó¦ï¿½ï¿½ï¿½ï¿½' => 'ÏìÓ¦Êý¾Ý',
    'ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½' => '´íÎó´¦Àí',
    'APIï¿½Äµï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½' => 'APIÎÄµµÉú³ÉÆ÷',
    
    // ÃèÊöÐÐÖÐµÄÎÊÌâ×Ö·û´®
    'AlingAi Pro APIï¿½Äµï¿½ÏµÍ³ - ï¿½Ã»ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ÏµÍ³ï¿½ï¿½ØµÈ¹ï¿½ï¿½ï¿?' => 'AlingAi Pro APIÎÄµµÏµÍ³ - ÓÃ»§¹ÜÀí¡¢ÏµÍ³¼à¿ØµÈ¹¦ÄÜ',
    
    // ÆäËû³£¼ûÂÒÂë
    'ï¿½ï¿½Ö¤' => 'ÈÏÖ¤',
    'ï¿½Ã»ï¿½ï¿½ï¿½Â¼' => 'ÓÃ»§µÇÂ¼',
    'ï¿½ï¿½ï¿½ï¿½' => 'ÃÜÂë',
    'ï¿½ï¿½ï¿½Ø¿ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½' => '±¾µØ¿ª·¢»·¾³',
    'ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½' => 'Éú²ú»·¾³',
    'ï¿½ï¿½È¨ï¿½ï¿½Ö¤' => 'ÊÚÈ¨ÑéÖ¤',
    'Î´ï¿½á¹©ï¿½ï¿½Ö¤ï¿½ï¿½Ï¢' => 'Î´Ìá¹©ÈÏÖ¤ÐÅÏ¢',
    'ï¿½ï¿½Ð§ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½' => 'ÎÞÐ§µÄÁîÅÆ',
    'ï¿½ï¿½Ð§ï¿½ï¿½APIï¿½ï¿½Ô¿' => 'ÎÞÐ§µÄAPIÃÜÔ¿',
    'ï¿½ï¿½Ö¤Ê§ï¿½ï¿½' => 'ÈÏÖ¤Ê§°Ü',
    'ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½' => 'ÇëÇó´¦Àí',
    'ï¿½ï¿½ï¿½ï¿½ï¿½OPTIONSï¿½ï¿½ï¿½ï¿½CORSÔ¤ï¿½ï¿½ï¿½ï¿½Ó¦ï¿½ï¿½ï¿½ï¿½Ç°ï¿½æ´¦ï¿½ï¿½' => '´¦ÀíOPTIONSÇëÇóµÄCORSÔ¤¼ìÏìÓ¦ºÍÇ°ÖÃ´¦Àí',
    'ï¿½ï¿½ï¿½ï¿½Â·ï¿½ï¿½ï¿½Í·ï¿½ï¿½ï¿½ï¿½Ö·ï¿½ï¿½ï¿½ï¿½ï¿½' => '¸ù¾ÝÂ·¾¶ºÍ·½·¨·Ö·¢ÇëÇó',
    'ï¿½ï¿½È¡APIï¿½Äµï¿½ï¿½á¹¹' => '»ñÈ¡APIÎÄµµ½á¹¹',
    'ï¿½É¹ï¿½ï¿½ï¿½È¡APIï¿½Äµï¿½' => '³É¹¦»ñÈ¡APIÎÄµµ',
    'Ä¬ï¿½Ï·ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½APIï¿½Äµï¿½' => 'Ä¬ÈÏ·µ»ØÍêÕûµÄAPIÎÄµµ',
    'Ö´ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½' => 'Ö´ÐÐÇëÇó´¦Àí',
    'ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ê±ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½' => '´¦ÀíÇëÇóÊ±·¢Éú´íÎó'
];

// Ó¦ÓÃÌæ»»
\ = \<?php /**  * AlingAi Pro 5.0 - APIï¿½Äµï¿½ï¿½ï¿½ï¿½ï¿½ÏµÍ³  * ï¿½Ô¶ï¿½É¨ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½APIï¿½Äµï¿½ï¿½ï¿½Ö§ï¿½ï¿½OpenAPI/Swaggerï¿½ï¿½Ê½  */  declare(strict_types=1];  header("Content-Type: application/json; charset=utf-8"]; header("Access-Control-Allow-Origin: *"]; header("Access-Control-Allow-Methods: GET, POST, PUT, DELETE, OPTIONS"]; header("Access-Control-Allow-Headers: Content-Type, Authorization"];  if ($_SERVER["REQUEST_METHOD"] === "OPTIONS") {     http_response_code(200];     exit(]; }  require_once __DIR__ . "/../../../../vendor/autoload.php"; require_once __DIR__ . "/../../../../src/Auth/AdminAuthServiceDemo.php";  use AlingAi\Auth\AdminAuthServiceDemo;  // ï¿½ï¿½Ó¦ï¿½ï¿½ï¿½ï¿½ function sendResponse($success, $data = null, $message = "", $code = 200) {     http_response_code($code];     echo json_encode([         "success" => $success,         "data" => $data,         "message" => $message,         "timestamp" => date("Y-m-d H:i:s")     ],  JSON_UNESCAPED_UNICODE];     exit(]; }  // ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ function handleError($message, $code = 500) {     error_log("API Error: $message"];     sendResponse(false, null, $message, $code]; }  // APIï¿½Äµï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ function generateApiDocumentation() {     return [         "openapi" => "3.0.0",         "info" => [             "title" => "AlingAi Pro API",             "description" => "AlingAi Pro APIÎÄµµÏµÍ³ - ÓÃ»§¹ÜÀí¡¢ÏµÍ³¼à¿ØµÈ¹¦ÄÜ",             "version" => "6.0.0",             "contact" => [                 "name" => "AlingAi Team",                 "email" => "api@gxggm.com",                 "url" => "https://alingai.com"             ],              "license" => [                 "name" => "MIT",                 "url" => "https://opensource.org/licenses/MIT"             ]         ],          "servers" => [             [                 "url" => "http://localhost",                 "description" => "ï¿½ï¿½ï¿½Ø¿ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½"             ],              [                 "url" => "https://api.alingai.com",                 "description" => "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½"             ]         ],          "security" => [             ["bearerAuth" => []],              ["apiKey" => []]         ],          "paths" => generateApiPaths(),         "components" => generateApiComponents()     ]; }  function generateApiPaths() {     return [         // ï¿½ï¿½Ö¤ï¿½ï¿½ï¿½API         "/api/auth/login" => [             "post" => [                 "tags" => ["ï¿½ï¿½Ö¤"],                  "summary" => "ï¿½Ã»ï¿½ï¿½ï¿½Â¼",                 "description" => "Ê¹ï¿½ï¿½ï¿½Ã»ï¿½ï¿½ï¿½/ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ðµï¿½Â¼",                 "requestBody" => [                     "required" => true,                     "content" => [                         "application/json" => [                             "schema" => [                                 "type" => "object",                                 "required" => ["username", "password"],                                  "properties" => [                                     "username" => ["type" => "string", "description" => "ï¿½Ã»ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½"],                                      "password" => ["type" => "string", "description" => "ï¿½ï¿½ï¿½ï¿½"],                                      "remember" => ["type" => "boolean", "description" => "ï¿½ï¿½×¡ï¿½ï¿½Â¼×´Ì¬"]                                 ]                             ]                         ]                     ]                 ],                  "responses" => [                     "200" => [                         "description" => "ï¿½ï¿½Â¼ï¿½É¹ï¿½",                         "content" => [                             "application/json" => [                                 "schema" => ["\$ref" => "#/components/schemas/AuthResponse"]                             ]                         ]                     ],                      "401" => ["description" => "ï¿½ï¿½Ö¤Ê§ï¿½ï¿½"]                 ]             ]         ]     ]; }  function generateApiComponents() {     return [         "schemas" => [             "AuthResponse" => [                 "type" => "object",                 "properties" => [                     "success" => ["type" => "boolean"],                      "data" => [                         "type" => "object",                         "properties" => [                             "token" => ["type" => "string"],                              "user" => ["\$ref" => "#/components/schemas/User"]                         ]                     ],                      "message" => ["type" => "string"]                 ]             ],              "User" => [                 "type" => "object",                 "properties" => [                     "id" => ["type" => "integer"],                      "username" => ["type" => "string"],                      "email" => ["type" => "string"],                      "avatar" => ["type" => "string"],                      "role" => ["type" => "string"]                 ]             ]         ],          "securitySchemes" => [             "bearerAuth" => [                 "type" => "http",                 "scheme" => "bearer",                 "bearerFormat" => "JWT"             ],              "apiKey" => [                 "type" => "apiKey",                 "in" => "header",                 "name" => "X-API-Key"             ]         ]     ]; }  // ï¿½ï¿½È¨ï¿½ï¿½Ö¤ function authenticateRequest() {     $auth = new AdminAuthServiceDemo(];          // ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ð»ï¿½È¡ï¿½ï¿½È¨ï¿½ï¿½Ï¢     $authHeader = $_SERVER["HTTP_AUTHORIZATION"] ?? "";     $apiKey = $_SERVER["HTTP_X_API_KEY"] ?? "";          if (empty($authHeader) && empty($apiKey)) {         handleError("Î´ï¿½á¹©ï¿½ï¿½Ö¤ï¿½ï¿½Ï¢", 401];     }          // ï¿½ï¿½ï¿½ï¿½Bearer Token     if (!empty($authHeader)) {         $token = str_replace("Bearer ", "", $authHeader];         if (!$auth->validateToken($token)) {             handleError("ï¿½ï¿½Ð§ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½", 401];         }         return $auth->getUserFromToken($token];     }          // ï¿½ï¿½ï¿½ï¿½API Key     if (!empty($apiKey)) {         if (!$auth->validateApiKey($apiKey)) {             handleError("ï¿½ï¿½Ð§ï¿½ï¿½APIï¿½ï¿½Ô¿", 401];         }         return $auth->getUserFromApiKey($apiKey];     }          handleError("ï¿½ï¿½Ö¤Ê§ï¿½ï¿½", 401]; }  // ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ function handleRequest() {     $method = $_SERVER["REQUEST_METHOD"];     $path = parse_url($_SERVER["REQUEST_URI"],  PHP_URL_PATH];     $pathParts = explode("/", trim($path, "/")];     $action = $pathParts[count($pathParts) - 1] ?? "";          // ï¿½ï¿½ï¿½ï¿½ï¿½OPTIONSï¿½ï¿½ï¿½ï¿½CORSÔ¤ï¿½ï¿½ï¿½ï¿½Ó¦ï¿½ï¿½ï¿½ï¿½Ç°ï¿½æ´¦ï¿½ï¿½     if ($method === "OPTIONS") {         return;     }          // ï¿½ï¿½ï¿½ï¿½Â·ï¿½ï¿½ï¿½Í·ï¿½ï¿½ï¿½ï¿½Ö·ï¿½ï¿½ï¿½ï¿½ï¿½     switch ($action) {         case "schema":             // ï¿½ï¿½È¡APIï¿½Äµï¿½ï¿½á¹¹             sendResponse(true, generateApiDocumentation(), "ï¿½É¹ï¿½ï¿½ï¿½È¡APIï¿½Äµï¿½"];             break;                      default:             // Ä¬ï¿½Ï·ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½APIï¿½Äµï¿½             $docs = generateApiDocumentation(];             sendResponse(true, $docs, "ï¿½É¹ï¿½ï¿½ï¿½È¡APIï¿½Äµï¿½"];     } }  // Ö´ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ try {     handleRequest(]; } catch (Exception $e) {     handleError("ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ê±ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½: " . $e->getMessage(), 500]; } ;
foreach (\ as \ => \) {
    \ = str_replace(\, \, \];
}

// ÐÞ¸´ÃèÊöÐÐÖÐµÄÓï·¨´íÎó£¨È·±£ÒýºÅÕýÈ·½áÊø£©
\ = preg_replace(
    '/"description"\\s*=>\\s*"(.*?)"\\s*,/s',
    '"description" => "\",',
    \
];

// È·±£°æ±¾ºÅÎª6.0.0
\ = preg_replace(
    '/"version"\\s*=>\\s*"(\\d+\\.\\d+\\.\\d+)"/s',
    '"version" => "6.0.0"',
    \
];

// È·±£ÓÊÏäÎª@gxggm.com
\ = preg_replace(
    '/"email"\\s*=>\\s*"([^@"]+)@[^"]+"/s',
    '"email" => "\@gxggm.com"',
    \
];

// ±£´æÐÞ¸ÄºóµÄÎÄ¼þ
if (file_put_contents(\, \) !== false) {
    echo "ÎÄ¼þÒÑ³É¹¦ÐÞ¸´£º\\n";
} else {
    echo "ÎÞ·¨Ð´ÈëÎÄ¼þ£º\\n";
}

// ÑéÖ¤ÐÞ¸´ºóµÄÎÄ¼þ
\ = file_get_contents(\];
if (strpos(\, 'ï¿½ï¿½') !== false) {
    echo "¾¯¸æ£ºÎÄ¼þÖÐÈÔÈ»´æÔÚÂÒÂë£¬¿ÉÄÜÐèÒªÊÖ¶¯ÐÞ¸´¡£\n";
} else {
    echo "ÑéÖ¤Í¨¹ý£ºÎÄ¼þÖÐ²»ÔÙ°üº¬ÂÒÂë×Ö·û¡£\n";
}

echo "Íê³É£¡\n";

