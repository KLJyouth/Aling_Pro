<?php
/**
 * AlingAi Pro PHP漏洞扫描工具
 * 
 * 此工具用于检测PHP代码中的常见安全漏洞，包括：
 * 1. SQL注入漏洞
 * 2. XSS跨站脚本漏洞
 * 3. 文件包含漏洞
 * 4. 命令注入漏洞
 * 5. 文件上传漏洞
 * 6. 未过滤的用户输入
 * 7. 硬编码的敏感信息（密码、API密钥等）
 */

declare(strict_types=1);

// 设置脚本最大执行时间
set_time_limit(600);

// 配置参数
$config = [
    'scan_dirs' => [
        __DIR__ . '/../../../../', // 根目录
    ],
    'exclude_dirs' => [
        'vendor',
        'node_modules',
        'cache',
        'logs',
        'temp',
        'storage/logs',
        'storage/cache',
    ],
    'report_file' => __DIR__ . '/../reports/vulnerability_report.json',
    'log_file' => __DIR__ . '/../logs/vulnerability_scan.log',
    'max_file_size' => 5 * 1024 * 1024, // 5MB
];

// 确保目录存在
if (!is_dir(dirname($config['report_file']))) {
    mkdir(dirname($config['report_file']), 0755, true);
}
if (!is_dir(dirname($config['log_file']))) {
    mkdir(dirname($config['log_file']), 0755, true);
}

// 漏洞规则定义
$vulnerabilityRules = [
    'sql_injection' => [
        'name' => 'SQL注入漏洞',
        'description' => '检测可能导致SQL注入的代码模式',
        'severity' => 'high',
        'patterns' => [
            // 直接拼接SQL语句
            '/\$(?:sql|query)\s*=.*\$_(?:GET|POST|REQUEST|COOKIE)\s*\[\s*[\'"][^\'"]+[\'"]\s*\]/i',
            '/mysqli_query\s*\(\s*.*\$_(?:GET|POST|REQUEST|COOKIE)/i',
            '/\->query\s*\(\s*.*\$_(?:GET|POST|REQUEST|COOKIE)/i',
            '/\bexecute\s*\(\s*.*\$_(?:GET|POST|REQUEST|COOKIE)/i',
        ],
        'exclude_patterns' => [
            // 排除使用参数化查询的情况
            '/prepare\s*\(/i',
            '/bindParam\s*\(/i',
            '/bindValue\s*\(/i',
        ],
        'remediation' => '使用参数化查询或预处理语句，避免直接拼接SQL语句。使用PDO或mysqli的prepare语句。'
    ],
    'xss' => [
        'name' => 'XSS跨站脚本漏洞',
        'description' => '检测可能导致XSS的代码模式',
        'severity' => 'high',
        'patterns' => [
            // 未过滤的输出
            '/echo\s+\$_(?:GET|POST|REQUEST|COOKIE)\s*\[\s*[\'"][^\'"]+[\'"]\s*\]/i',
            '/print\s+\$_(?:GET|POST|REQUEST|COOKIE)\s*\[\s*[\'"][^\'"]+[\'"]\s*\]/i',
            '/\<\?=\s*\$_(?:GET|POST|REQUEST|COOKIE)\s*\[\s*[\'"][^\'"]+[\'"]\s*\]/i',
        ],
        'exclude_patterns' => [
            // 排除已过滤的情况
            '/htmlspecialchars\s*\(/i',
            '/htmlentities\s*\(/i',
            '/strip_tags\s*\(/i',
            '/filter_var\s*\(/i',
        ],
        'remediation' => '使用htmlspecialchars()或htmlentities()函数过滤输出，或使用模板系统自动转义功能。'
    ],
    'file_inclusion' => [
        'name' => '文件包含漏洞',
        'description' => '检测可能导致不安全文件包含的代码模式',
        'severity' => 'high',
        'patterns' => [
            // 动态文件包含
            '/include\s*\(\s*\$_(?:GET|POST|REQUEST|COOKIE)/i',
            '/include_once\s*\(\s*\$_(?:GET|POST|REQUEST|COOKIE)/i',
            '/require\s*\(\s*\$_(?:GET|POST|REQUEST|COOKIE)/i',
            '/require_once\s*\(\s*\$_(?:GET|POST|REQUEST|COOKIE)/i',
        ],
        'exclude_patterns' => [],
        'remediation' => '避免使用用户输入直接包含文件。使用白名单验证文件路径，或使用固定的包含路径。'
    ],
    'command_injection' => [
        'name' => '命令注入漏洞',
        'description' => '检测可能导致命令注入的代码模式',
        'severity' => 'critical',
        'patterns' => [
            // 命令执行函数
            '/system\s*\(\s*.*\$_(?:GET|POST|REQUEST|COOKIE)/i',
            '/exec\s*\(\s*.*\$_(?:GET|POST|REQUEST|COOKIE)/i',
            '/passthru\s*\(\s*.*\$_(?:GET|POST|REQUEST|COOKIE)/i',
            '/shell_exec\s*\(\s*.*\$_(?:GET|POST|REQUEST|COOKIE)/i',
            '/`.*\$_(?:GET|POST|REQUEST|COOKIE)/i', // 反引号执行
            '/proc_open\s*\(\s*.*\$_(?:GET|POST|REQUEST|COOKIE)/i',
            '/popen\s*\(\s*.*\$_(?:GET|POST|REQUEST|COOKIE)/i',
        ],
        'exclude_patterns' => [
            // 排除已过滤的情况
            '/escapeshellarg\s*\(/i',
            '/escapeshellcmd\s*\(/i',
        ],
        'remediation' => '避免使用用户输入直接执行系统命令。如必须使用，请使用escapeshellarg()和escapeshellcmd()函数过滤输入。'
    ],
    'file_upload' => [
        'name' => '文件上传漏洞',
        'description' => '检测可能存在的不安全文件上传处理',
        'severity' => 'high',
        'patterns' => [
            // 文件上传处理
            '/move_uploaded_file\s*\(/i',
            '/\$_FILES\s*\[/i',
        ],
        'exclude_patterns' => [
            // 排除已验证文件类型的情况
            '/getimagesize\s*\(/i',
            '/mime_content_type\s*\(/i',
            '/pathinfo\s*\(.*\,\s*PATHINFO_EXTENSION\s*\)/i',
        ],
        'remediation' => '验证上传文件的MIME类型和扩展名，限制允许的文件类型，使用随机文件名，将上传目录设置为不可执行。'
    ],
    'unfiltered_input' => [
        'name' => '未过滤的用户输入',
        'description' => '检测直接使用未过滤的用户输入',
        'severity' => 'medium',
        'patterns' => [
            // 未过滤的用户输入
            '/\$_(?:GET|POST|REQUEST|COOKIE)\s*\[\s*[\'"][^\'"]+[\'"]\s*\]/i',
        ],
        'exclude_patterns' => [
            // 排除已过滤的情况
            '/filter_input\s*\(/i',
            '/filter_var\s*\(/i',
            '/intval\s*\(/i',
            '/floatval\s*\(/i',
            '/htmlspecialchars\s*\(/i',
            '/htmlentities\s*\(/i',
            '/strip_tags\s*\(/i',
            '/preg_replace\s*\(/i',
            '/mysqli_real_escape_string\s*\(/i',
            '/PDO::quote\s*\(/i',
        ],
        'remediation' => '使用filter_input()或filter_var()函数过滤用户输入，或根据数据类型使用intval()、floatval()等函数。'
    ],
    'hardcoded_credentials' => [
        'name' => '硬编码的敏感信息',
        'description' => '检测代码中硬编码的密码、API密钥等敏感信息',
        'severity' => 'high',
        'patterns' => [
            // 硬编码的凭证
            '/(?:password|passwd|pwd|apikey|api_key|secret|token)\s*=\s*[\'"][^\'"]{8,}[\'"]/i',
            '/define\s*\(\s*[\'"](?:DB_PASSWORD|API_KEY|SECRET_KEY|ACCESS_TOKEN)[\'"].*[\'"][^\'"]{8,}[\'"]\s*\)/i',
        ],
        'exclude_patterns' => [
            // 排除环境变量和配置文件加载
            '/getenv\s*\(/i',
            '/\$_ENV\s*\[/i',
            '/\$_SERVER\s*\[/i',
            '/parse_ini_file\s*\(/i',
        ],
        'remediation' => '使用环境变量或配置文件存储敏感信息，避免在代码中硬编码。使用.env文件和专门的配置管理库。'
    ],
];

// 命令行参数处理
$action = $_GET['action'] ?? 'scan';
$path = $_GET['path'] ?? '';
$verbose = isset($_GET['verbose']) ? (bool)$_GET['verbose'] : false;
$severity = $_GET['severity'] ?? 'all';

// 根据操作执行不同功能
switch ($action) {
    case 'scan':
        scanForVulnerabilities($config, $vulnerabilityRules, $path, $verbose, $severity);
        break;
    case 'report':
        viewReport($config);
        break;
    default:
        echo "未知操作: $action\n";
        showHelp();
        break;
}

/**
 * 显示帮助信息
 */
function showHelp() {
    echo "用法:\n";
    echo "  ?action=scan - 扫描漏洞\n";
    echo "  ?action=scan&path=/path/to/dir - 扫描指定目录\n";
    echo "  ?action=scan&severity=high - 只扫描高危漏洞\n";
    echo "  ?action=report - 查看漏洞报告\n";
    echo "  &verbose=1 - 显示详细信息\n";
}

/**
 * 扫描漏洞
 */
function scanForVulnerabilities(array $config, array $vulnerabilityRules, string $specificPath = '', bool $verbose = false, string $severityFilter = 'all') {
    echo "<h2>PHP代码安全漏洞扫描</h2>";
    
    $startTime = microtime(true);
    $vulnerabilities = [];
    $fileCount = 0;
    $vulnerabilityCount = 0;
    
    // 如果指定了特定路径
    if (!empty($specificPath)) {
        $fullPath = realpath($specificPath);
        if (!$fullPath) {
            echo "<p class='error'>错误: 指定的路径不存在: $specificPath</p>";
            return;
        }
        
        $scanDirs = [$fullPath];
    } else {
        $scanDirs = $config['scan_dirs'];
    }
    
    // 根据严重程度过滤规则
    if ($severityFilter !== 'all') {
        foreach ($vulnerabilityRules as $key => $rule) {
            if ($rule['severity'] !== $severityFilter) {
                unset($vulnerabilityRules[$key]);
            }
        }
        
        if (empty($vulnerabilityRules)) {
            echo "<p class='error'>错误: 没有找到严重程度为 '$severityFilter' 的规则</p>";
            return;
        }
    }
    
    // 扫描目录
    foreach ($scanDirs as $dir) {
        scanDirectory($dir, $config, $vulnerabilityRules, $vulnerabilities, $fileCount, $verbose);
    }
    
    // 统计漏洞数量
    foreach ($vulnerabilities as $file => $issues) {
        $vulnerabilityCount += count($issues);
    }
    
    $endTime = microtime(true);
    $executionTime = round($endTime - $startTime, 2);
    
    // 保存报告
    saveReport($config, $vulnerabilities, $fileCount, $vulnerabilityCount, $executionTime);
    
    // 输出结果
    echo "<p>扫描完成，耗时 $executionTime 秒，共扫描 $fileCount 个文件，发现 $vulnerabilityCount 个潜在漏洞</p>";
    
    // 按漏洞类型分组
    $vulnerabilitiesByType = [];
    foreach ($vulnerabilities as $file => $issues) {
        foreach ($issues as $issue) {
            $type = $issue['type'];
            if (!isset($vulnerabilitiesByType[$type])) {
                $vulnerabilitiesByType[$type] = [
                    'name' => $vulnerabilityRules[$type]['name'],
                    'count' => 0,
                    'issues' => [],
                ];
            }
            $vulnerabilitiesByType[$type]['count']++;
            $vulnerabilitiesByType[$type]['issues'][] = [
                'file' => $file,
                'line' => $issue['line'],
                'code' => $issue['code'],
            ];
        }
    }
    
    // 按严重程度排序
    uasort($vulnerabilitiesByType, function($a, $b) use ($vulnerabilityRules) {
        $severityOrder = [
            'critical' => 0,
            'high' => 1,
            'medium' => 2,
            'low' => 3,
        ];
        
        $typeA = array_search($a['name'], array_column($vulnerabilityRules, 'name', 'name'));
        $typeB = array_search($b['name'], array_column($vulnerabilityRules, 'name', 'name'));
        
        $severityA = $vulnerabilityRules[$typeA]['severity'] ?? 'low';
        $severityB = $vulnerabilityRules[$typeB]['severity'] ?? 'low';
        
        return $severityOrder[$severityA] <=> $severityOrder[$severityB];
    });
    
    // 输出漏洞摘要
    if ($vulnerabilityCount > 0) {
        echo "<h3>漏洞摘要:</h3>";
        echo "<table>";
        echo "<tr><th>漏洞类型</th><th>严重程度</th><th>数量</th></tr>";
        
        foreach ($vulnerabilitiesByType as $type => $info) {
            $severity = $vulnerabilityRules[$type]['severity'];
            $severityClass = getSeverityClass($severity);
            
            echo "<tr>";
            echo "<td>{$info['name']}</td>";
            echo "<td class='$severityClass'>$severity</td>";
            echo "<td>{$info['count']}</td>";
            echo "</tr>";
        }
        
        echo "</table>";
        
        // 输出详细漏洞信息
        echo "<h3>详细漏洞信息:</h3>";
        
        foreach ($vulnerabilitiesByType as $type => $info) {
            $severity = $vulnerabilityRules[$type]['severity'];
            $severityClass = getSeverityClass($severity);
            $remediation = $vulnerabilityRules[$type]['remediation'];
            
            echo "<div class='vulnerability-type'>";
            echo "<h4>{$info['name']} <span class='$severityClass'>($severity)</span></h4>";
            echo "<p><strong>修复建议:</strong> $remediation</p>";
            
            echo "<table>";
            echo "<tr><th>文件</th><th>行号</th><th>代码</th></tr>";
            
            foreach ($info['issues'] as $issue) {
                $file = $issue['file'];
                $line = $issue['line'];
                $code = htmlspecialchars($issue['code']);
                
                echo "<tr>";
                echo "<td>$file</td>";
                echo "<td>$line</td>";
                echo "<td><code>$code</code></td>";
                echo "</tr>";
            }
            
            echo "</table>";
            echo "</div>";
        }
    } else {
        echo "<p class='success'>未发现潜在漏洞</p>";
    }
}

/**
 * 递归扫描目录
 */
function scanDirectory(string $dir, array $config, array $vulnerabilityRules, array &$vulnerabilities, int &$fileCount, bool $verbose = false) {
    if (!is_dir($dir)) {
        return;
    }
    
    $items = scandir($dir);
    
    foreach ($items as $item) {
        if ($item === '.' || $item === '..') {
            continue;
        }
        
        $path = $dir . '/' . $item;
        $relativePath = getRelativePath($path, $config['scan_dirs'][0]);
        
        // 检查是否为排除目录
        foreach ($config['exclude_dirs'] as $excludeDir) {
            if (strpos($relativePath, $excludeDir) === 0) {
                if ($verbose) {
                    echo "<p>跳过排除目录: $relativePath</p>";
                }
                continue 2;
            }
        }
        
        if (is_dir($path)) {
            scanDirectory($path, $config, $vulnerabilityRules, $vulnerabilities, $fileCount, $verbose);
        } else if (pathinfo($path, PATHINFO_EXTENSION) === 'php') {
            // 检查文件大小
            if (filesize($path) > $config['max_file_size']) {
                if ($verbose) {
                    echo "<p class='warning'>跳过过大文件: $relativePath</p>";
                }
                continue;
            }
            
            $fileCount++;
            
            if ($verbose) {
                echo "<p>扫描文件: $relativePath</p>";
            }
            
            // 扫描文件中的漏洞
            $fileVulnerabilities = scanFileForVulnerabilities($path, $vulnerabilityRules);
            
            if (!empty($fileVulnerabilities)) {
                $vulnerabilities[$relativePath] = $fileVulnerabilities;
                
                if ($verbose) {
                    echo "<p class='warning'>发现 " . count($fileVulnerabilities) . " 个潜在漏洞: $relativePath</p>";
                }
            }
        }
    }
}

/**
 * 扫描单个文件中的漏洞
 */
function scanFileForVulnerabilities(string $filePath, array $vulnerabilityRules) {
    $content = file_get_contents($filePath);
    if ($content === false) {
        return [];
    }
    
    $lines = explode("\n", $content);
    $vulnerabilities = [];
    
    foreach ($vulnerabilityRules as $type => $rule) {
        // 检查是否有排除模式匹配
        $excluded = false;
        foreach ($rule['exclude_patterns'] as $excludePattern) {
            if (preg_match($excludePattern, $content)) {
                $excluded = true;
                break;
            }
        }
        
        if ($excluded) {
            continue;
        }
        
        // 检查每个漏洞模式
        foreach ($rule['patterns'] as $pattern) {
            if (preg_match_all($pattern, $content, $matches, PREG_OFFSET_CAPTURE)) {
                foreach ($matches[0] as $match) {
                    $matchText = $match[0];
                    $position = $match[1];
                    
                    // 计算行号
                    $lineNumber = 1;
                    $pos = 0;
                    while ($pos < $position && $pos !== false) {
                        $pos = strpos($content, "\n", $pos);
                        if ($pos !== false) {
                            $lineNumber++;
                            $pos++;
                        }
                    }
                    
                    // 获取包含上下文的代码片段
                    $contextLines = [];
                    $startLine = max(1, $lineNumber - 2);
                    $endLine = min(count($lines), $lineNumber + 2);
                    
                    for ($i = $startLine - 1; $i < $endLine; $i++) {
                        $contextLines[] = ($i + 1 === $lineNumber ? '> ' : '  ') . $lines[$i];
                    }
                    
                    $vulnerabilities[] = [
                        'type' => $type,
                        'line' => $lineNumber,
                        'code' => implode("\n", $contextLines),
                        'match' => $matchText,
                    ];
                }
            }
        }
    }
    
    return $vulnerabilities;
}

/**
 * 保存漏洞报告
 */
function saveReport(array $config, array $vulnerabilities, int $fileCount, int $vulnerabilityCount, float $executionTime) {
    $report = [
        'timestamp' => time(),
        'scan_date' => date('Y-m-d H:i:s'),
        'execution_time' => $executionTime,
        'files_scanned' => $fileCount,
        'vulnerability_count' => $vulnerabilityCount,
        'vulnerabilities' => $vulnerabilities,
    ];
    
    file_put_contents($config['report_file'], json_encode($report, JSON_PRETTY_PRINT));
    
    // 记录日志
    $log = "[$report[scan_date]] 扫描完成: 扫描 $fileCount 个文件，发现 $vulnerabilityCount 个潜在漏洞，耗时 $executionTime 秒\n";
    file_put_contents($config['log_file'], $log, FILE_APPEND);
}

/**
 * 查看漏洞报告
 */
function viewReport(array $config) {
    echo "<h2>PHP代码安全漏洞报告</h2>";
    
    if (!file_exists($config['report_file'])) {
        echo "<p class='error'>报告文件不存在</p>";
        return;
    }
    
    $report = json_decode(file_get_contents($config['report_file']), true);
    
    if (!$report) {
        echo "<p class='error'>无法解析报告文件</p>";
        return;
    }
    
    echo "<p>扫描日期: {$report['scan_date']}</p>";
    echo "<p>扫描文件数: {$report['files_scanned']}</p>";
    echo "<p>漏洞数量: {$report['vulnerability_count']}</p>";
    echo "<p>执行时间: {$report['execution_time']} 秒</p>";
    
    if ($report['vulnerability_count'] > 0) {
        echo "<h3>漏洞详情:</h3>";
        
        foreach ($report['vulnerabilities'] as $file => $issues) {
            echo "<div class='file-vulnerabilities'>";
            echo "<h4>$file</h4>";
            echo "<ul>";
            
            foreach ($issues as $issue) {
                echo "<li>";
                echo "<strong>{$issue['type']}</strong> (第 {$issue['line']} 行)<br>";
                echo "<pre>{$issue['code']}</pre>";
                echo "</li>";
            }
            
            echo "</ul>";
            echo "</div>";
        }
    } else {
        echo "<p class='success'>未发现漏洞</p>";
    }
}

/**
 * 获取相对路径
 */
function getRelativePath(string $path, string $basePath) {
    return ltrim(str_replace($basePath, '', $path), '/\\');
}

/**
 * 获取严重程度对应的CSS类
 */
function getSeverityClass(string $severity) {
    switch ($severity) {
        case 'critical':
            return 'critical';
        case 'high':
            return 'high';
        case 'medium':
            return 'medium';
        case 'low':
            return 'low';
        default:
            return '';
    }
}

// 添加HTML头部
function outputHeader() {
    echo '<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>PHP代码安全漏洞扫描工具</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            line-height: 1.6;
            margin: 20px;
            color: #333;
        }
        h1, h2, h3, h4 {
            color: #2c3e50;
        }
        .error {
            color: #e74c3c;
            font-weight: bold;
        }
        .warning {
            color: #f39c12;
        }
        .success {
            color: #27ae60;
            font-weight: bold;
        }
        .info {
            color: #3498db;
        }
        .critical {
            color: #e74c3c;
            font-weight: bold;
        }
        .high {
            color: #e67e22;
            font-weight: bold;
        }
        .medium {
            color: #f39c12;
        }
        .low {
            color: #3498db;
        }
        table {
            border-collapse: collapse;
            width: 100%;
            margin-bottom: 20px;
        }
        th, td {
            text-align: left;
            padding: 8px;
            border: 1px solid #ddd;
        }
        tr:nth-child(even) {
            background-color: #f2f2f2;
        }
        th {
            background-color: #3498db;
            color: white;
        }
        pre, code {
            background-color: #f8f9fa;
            border: 1px solid #ddd;
            border-radius: 3px;
            padding: 10px;
            overflow: auto;
            font-family: monospace;
            font-size: 14px;
        }
        .vulnerability-type {
            margin-bottom: 30px;
            border-left: 4px solid #3498db;
            padding-left: 15px;
        }
        .file-vulnerabilities {
            margin-bottom: 20px;
            border-bottom: 1px solid #eee;
            padding-bottom: 10px;
        }
        a {
            color: #3498db;
            text-decoration: none;
        }
        a:hover {
            text-decoration: underline;
        }
        .menu {
            margin-bottom: 20px;
            padding: 10px;
            background-color: #f8f9fa;
            border-radius: 5px;
        }
        .menu a {
            margin-right: 15px;
        }
    </style>
</head>
<body>
    <h1>AlingAi Pro PHP代码安全漏洞扫描工具</h1>
    <div class="menu">
        <a href="?action=scan">扫描漏洞</a>
        <a href="?action=scan&severity=critical">仅扫描严重漏洞</a>
        <a href="?action=scan&severity=high">仅扫描高危漏洞</a>
        <a href="?action=report">查看报告</a>
    </div>';
}

// 添加HTML尾部
function outputFooter() {
    echo '
</body>
</html>';
}

// 输出HTML头部
outputHeader();

// 输出HTML尾部
outputFooter();
?> 