<!-- API详情顶部信息卡片 -->
<div class="card shadow mb-4">
  <div class="card-header py-3 d-flex flex-row align-items-center justify-content-between">
    <h6 class="m-0 font-weight-bold text-primary">API详细信息</h6>
    <div>
      <button class="btn btn-sm btn-success" id="runTestBtn">
        <i class="bi bi-play-circle"></i> 运行测试
      </button>
      <button class="btn btn-sm btn-warning" id="editApiBtn">
        <i class="bi bi-pencil"></i> 编辑API
      </button>
      <div class="btn-group ms-2">
        <button type="button" class="btn btn-sm btn-outline-secondary dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false">
          <i class="bi bi-gear"></i> 更多操作
        </button>
        <ul class="dropdown-menu dropdown-menu-end">
          <li><a class="dropdown-item" href="#" id="resetStatsBtn"><i class="bi bi-arrow-repeat"></i> 重置统计数据</a></li>
          <li><a class="dropdown-item" href="#" id="exportDataBtn"><i class="bi bi-download"></i> 导出数据</a></li>
          <li><hr class="dropdown-divider"></li>
          <li><a class="dropdown-item text-danger" href="#" id="deleteApiBtn"><i class="bi bi-trash"></i> 删除API</a></li>
        </ul>
      </div>
    </div>
  </div>
  <div class="card-body">
    <div class="row">
      <div class="col-md-6">
        <h5 class="mb-3"><%= apiName %></h5>
        <table class="table table-bordered">
          <tbody>
            <tr>
              <th width="30%">状态</th>
              <td>
                <span id="apiStatus" class="badge rounded-pill status-unknown">状态获取中...</span>
              </td>
            </tr>
            <tr>
              <th>URL</th>
              <td id="apiUrl">加载中...</td>
            </tr>
            <tr>
              <th>监控频率</th>
              <td id="apiInterval">加载中...</td>
            </tr>
            <tr>
              <th>最近检查时间</th>
              <td id="lastCheck">--</td>
            </tr>
          </tbody>
        </table>
      </div>
      <div class="col-md-6">
        <div class="row mb-4">
          <div class="col-md-6">
            <div class="card border-left-primary h-100 py-2">
              <div class="card-body">
                <div class="row no-gutters align-items-center">
                  <div class="col mr-2">
                    <div class="text-xs font-weight-bold text-primary text-uppercase mb-1">
                      平均响应时间
                    </div>
                    <div class="h5 mb-0 font-weight-bold text-gray-800" id="avgResponseTime">
                      计算中...
                    </div>
                  </div>
                  <div class="col-auto">
                    <i class="bi bi-clock-history fa-2x text-gray-300"></i>
                  </div>
                </div>
              </div>
            </div>
          </div>
          <div class="col-md-6">
            <div class="card border-left-success h-100 py-2">
              <div class="card-body">
                <div class="row no-gutters align-items-center">
                  <div class="col mr-2">
                    <div class="text-xs font-weight-bold text-success text-uppercase mb-1">
                      成功率
                    </div>
                    <div class="h5 mb-0 font-weight-bold text-gray-800" id="successRate">
                      计算中...
                    </div>
                  </div>
                  <div class="col-auto">
                    <i class="bi bi-check-circle fa-2x text-gray-300"></i>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
        <div class="row">
          <div class="col-md-6">
            <div class="card border-left-warning h-100 py-2">
              <div class="card-body">
                <div class="row no-gutters align-items-center">
                  <div class="col mr-2">
                    <div class="text-xs font-weight-bold text-warning text-uppercase mb-1">
                      近期告警数
                    </div>
                    <div class="h5 mb-0 font-weight-bold text-gray-800" id="alertCount">
                      0
                    </div>
                  </div>
                  <div class="col-auto">
                    <i class="bi bi-exclamation-triangle fa-2x text-gray-300"></i>
                  </div>
                </div>
              </div>
            </div>
          </div>
          <div class="col-md-6">
            <div class="card border-left-info h-100 py-2">
              <div class="card-body">
                <div class="row no-gutters align-items-center">
                  <div class="col mr-2">
                    <div class="text-xs font-weight-bold text-info text-uppercase mb-1">
                      正常运行时间
                    </div>
                    <div class="h5 mb-0 font-weight-bold text-gray-800" id="uptime">
                      计算中...
                    </div>
                  </div>
                  <div class="col-auto">
                    <i class="bi bi-activity fa-2x text-gray-300"></i>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<!-- 响应时间图表 -->
<div class="row mb-4">
  <div class="col-12">
    <!-- 使用API图表组件显示响应时间趋势图 -->
    <%- components.apiChart.renderResponseTimeChart('responseTimeChart', 'API响应时间趋势', { height: '350px' }) %>
  </div>
</div>

<!-- 状态码分布和请求量 -->
<div class="row mb-4">
  <div class="col-md-6">
    <!-- 使用API图表组件显示状态码分布图 -->
    <%- components.apiChart.renderStatusChart('statusCodeChart', '状态码分布', { height: '300px' }) %>
  </div>
  <div class="col-md-6">
    <!-- 使用API图表组件显示请求量趋势图 -->
    <%- components.apiChart.renderResponseTimeChart('requestVolumeChart', '请求量趋势', { height: '300px' }) %>
  </div>
</div>

<!-- 最近检查结果和告警 -->
<div class="row">
  <div class="col-md-6 mb-4">
    <div class="card shadow mb-4">
      <div class="card-header py-3">
        <h6 class="m-0 font-weight-bold text-primary">最近检查结果</h6>
      </div>
      <div class="card-body">
        <div class="table-responsive">
          <table class="table table-bordered" id="recentChecksTable" width="100%" cellspacing="0">
            <thead>
              <tr>
                <th>时间</th>
                <th>状态</th>
                <th>响应时间</th>
                <th>状态码</th>
              </tr>
            </thead>
            <tbody id="recentChecksBody">
              <tr>
                <td colspan="4" class="text-center">加载中...</td>
              </tr>
            </tbody>
          </table>
        </div>
      </div>
    </div>
  </div>
  <div class="col-md-6 mb-4">
    <div class="card shadow mb-4">
      <div class="card-header py-3 d-flex flex-row align-items-center justify-content-between">
        <h6 class="m-0 font-weight-bold text-primary">API告警</h6>
        <a href="/alerts?api=<%= apiName %>" class="btn btn-sm btn-primary">
          查看全部
        </a>
      </div>
      <div class="card-body">
        <!-- 使用告警列表组件显示告警记录 -->
        <div id="apiAlerts">加载中...</div>
      </div>
    </div>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    // 加载API详情数据
    loadApiDetails();
    
    // 初始化图表数据
    initCharts();
    
    // 加载最近检查结果
    loadRecentChecks();
    
    // 加载API告警
    loadApiAlerts();
    
    // 绑定按钮事件
    document.getElementById('runTestBtn').addEventListener('click', runApiTest);
    document.getElementById('editApiBtn').addEventListener('click', editApi);
    document.getElementById('resetStatsBtn').addEventListener('click', resetStats);
    document.getElementById('exportDataBtn').addEventListener('click', exportData);
    document.getElementById('deleteApiBtn').addEventListener('click', deleteApi);
    
    // 设置定时刷新
    setInterval(refreshData, 60000); // 每分钟刷新一次
  });
  
  // 加载API详情
  function loadApiDetails() {
    // 模拟从API获取数据
    // 实际应用中应该通过AJAX请求获取
    setTimeout(() => {
      // 随机API状态
      const statuses = ['healthy', 'warning', 'critical'];
      const randomStatus = statuses[Math.floor(Math.random() * 3)];
      
      // 更新状态徽章
      const statusElement = document.getElementById('apiStatus');
      statusElement.className = 'badge rounded-pill';
      
      if (randomStatus === 'healthy') {
        statusElement.classList.add('bg-success');
        statusElement.textContent = '正常';
      } else if (randomStatus === 'warning') {
        statusElement.classList.add('bg-warning', 'text-dark');
        statusElement.textContent = '警告';
      } else {
        statusElement.classList.add('bg-danger');
        statusElement.textContent = '严重';
      }
      
      // 更新其他信息
      document.getElementById('apiUrl').textContent = 'https://api.example.com/v1/<%= apiName %>';
      document.getElementById('apiInterval').textContent = '60秒';
      document.getElementById('lastCheck').textContent = new Date().toLocaleString();
      
      // 更新统计数据
      const avgTime = Math.floor(Math.random() * 500) + 50;
      const successRateVal = (Math.random() * 5 + 95).toFixed(2);
      const uptimePercent = (Math.random() * 1 + 99).toFixed(3);
      const alertCount = Math.floor(Math.random() * 5);
      
      document.getElementById('avgResponseTime').textContent = avgTime + ' ms';
      document.getElementById('successRate').textContent = successRateVal + '%';
      document.getElementById('uptime').textContent = uptimePercent + '%';
      document.getElementById('alertCount').textContent = alertCount;
    }, 1000);
  }
  
  // 初始化图表
  function initCharts() {
    // 响应时间趋势图
    if (window.charts && window.charts['responseTimeChart']) {
      const chart = window.charts['responseTimeChart'];
      const labels = [];
      
      // 生成过去24小时的标签
      const now = new Date();
      for (let i = 23; i >= 0; i--) {
        const time = new Date(now.getTime() - i * 3600000);
        labels.push(time.getHours() + ':00');
      }
      
      // 生成随机响应时间数据
      const data = [];
      for (let i = 0; i < 24; i++) {
        // 基础响应时间在50-150ms之间
        const baseTime = 50 + Math.random() * 100;
        // 添加一些波动
        const jitter = Math.random() > 0.9 ? Math.random() * 500 : Math.random() * 50;
        data.push(Math.round(baseTime + jitter));
      }
      
      // 更新图表数据
      chart.data.labels = labels;
      chart.data.datasets = [{
        label: '响应时间 (ms)',
        data: data,
        backgroundColor: 'rgba(78, 115, 223, 0.6)',
        borderColor: 'rgba(78, 115, 223, 1)',
        borderWidth: 2,
        pointRadius: 3,
        pointBackgroundColor: 'rgba(78, 115, 223, 1)',
        pointBorderColor: '#fff',
        pointHoverRadius: 5,
        fill: false,
        tension: 0.1
      }];
      chart.update();
    }
    
    // 状态码分布图
    if (window.charts && window.charts['statusCodeChart']) {
      const chart = window.charts['statusCodeChart'];
      
      // 生成随机状态码分布数据
      const successCount = Math.floor(Math.random() * 500) + 1000;
      const redirect = Math.floor(Math.random() * 10) + 5;
      const clientError = Math.floor(Math.random() * 50) + 10;
      const serverError = Math.floor(Math.random() * 20) + 5;
      
      // 更新图表数据
      chart.data.labels = ['2xx 成功', '3xx 重定向', '4xx 客户端错误', '5xx 服务器错误'];
      chart.data.datasets[0].data = [successCount, redirect, clientError, serverError];
      chart.data.datasets[0].backgroundColor = [
        'rgba(28, 200, 138, 0.6)',
        'rgba(54, 185, 204, 0.6)',
        'rgba(246, 194, 62, 0.6)',
        'rgba(231, 74, 59, 0.6)'
      ];
      chart.data.datasets[0].borderColor = [
        'rgba(28, 200, 138, 1)',
        'rgba(54, 185, 204, 1)',
        'rgba(246, 194, 62, 1)',
        'rgba(231, 74, 59, 1)'
      ];
      chart.update();
    }
    
    // 请求量趋势图
    if (window.charts && window.charts['requestVolumeChart']) {
      const chart = window.charts['requestVolumeChart'];
      const labels = [];
      
      // 生成过去24小时的标签
      const now = new Date();
      for (let i = 23; i >= 0; i--) {
        const time = new Date(now.getTime() - i * 3600000);
        labels.push(time.getHours() + ':00');
      }
      
      // 生成随机请求量数据
      const data = [];
      for (let i = 0; i < 24; i++) {
        // 生成每小时50-150个请求
        const volume = Math.floor(Math.random() * 100) + 50;
        data.push(volume);
      }
      
      // 更新图表数据
      chart.data.labels = labels;
      chart.data.datasets = [{
        label: '请求数',
        data: data,
        backgroundColor: 'rgba(54, 185, 204, 0.6)',
        borderColor: 'rgba(54, 185, 204, 1)',
        borderWidth: 2,
        pointRadius: 3,
        pointBackgroundColor: 'rgba(54, 185, 204, 1)',
        pointBorderColor: '#fff',
        pointHoverRadius: 5,
        fill: false,
        tension: 0.1
      }];
      chart.update();
    }
  }
  
  // 加载最近检查结果
  function loadRecentChecks() {
    // 模拟从API获取数据
    setTimeout(() => {
      const tbody = document.getElementById('recentChecksBody');
      let html = '';
      
      // 生成10条模拟数据
      for (let i = 0; i < 10; i++) {
        const time = new Date(Date.now() - i * 60000);
        const success = Math.random() > 0.1;
        const responseTime = Math.floor(Math.random() * 500) + 50;
        const statusCode = success ? 200 : (Math.random() > 0.5 ? 500 : 404);
        
        html += `
          <tr>
            <td>${time.toLocaleString()}</td>
            <td>
              <span class="badge rounded-pill ${success ? 'bg-success' : 'bg-danger'}">
                ${success ? '成功' : '失败'}
              </span>
            </td>
            <td>${responseTime} ms</td>
            <td>${statusCode}</td>
          </tr>
        `;
      }
      
      tbody.innerHTML = html;
    }, 1500);
  }
  
  // 加载API告警
  function loadApiAlerts() {
    // 模拟从API获取数据
    setTimeout(() => {
      const container = document.getElementById('apiAlerts');
      
      // 生成模拟告警数据
      const alerts = [];
      const alertCount = Math.floor(Math.random() * 5);
      
      for (let i = 0; i < alertCount; i++) {
        const time = new Date(Date.now() - i * 3600000 * Math.random() * 24);
        
        alerts.push({
          id: 'alert-' + i,
          title: Math.random() > 0.5 ? 'API响应时间过长' : 'API请求失败',
          message: Math.random() > 0.5 
            ? `${time.toLocaleString()} - API响应时间(${Math.floor(Math.random() * 5000) + 2000}ms)超过阈值(2000ms)`
            : `${time.toLocaleString()} - API请求失败，状态码: ${Math.random() > 0.5 ? 500 : 503}`,
          severity: Math.random() > 0.3 ? 'warning' : 'critical',
          timestamp: time,
          api_name: '<%= apiName %>'
        });
      }
      
      // 使用组件渲染告警列表
      if (alertCount > 0) {
        container.innerHTML = window.renderAlertList(alerts, { showActions: true });
      } else {
        container.innerHTML = `
          <div class="text-center py-3">
            <i class="bi bi-check-circle text-success" style="font-size: 2rem;"></i>
            <p class="mt-2">没有告警记录</p>
          </div>
        `;
      }
    }, 2000);
  }
  
  // 运行API测试
  function runApiTest() {
    alert('正在运行API测试，请稍候...');
    
    // 模拟测试延迟
    setTimeout(() => {
      const success = Math.random() > 0.2;
      
      if (success) {
        alert('API测试成功！响应时间: ' + (Math.floor(Math.random() * 500) + 50) + 'ms');
      } else {
        alert('API测试失败! 错误: ' + (Math.random() > 0.5 ? '连接超时' : '服务器返回500错误'));
      }
      
      // 刷新数据
      loadApiDetails();
      loadRecentChecks();
    }, 2000);
  }
  
  // 编辑API
  function editApi() {
    alert('编辑API功能即将上线');
  }
  
  // 重置统计数据
  function resetStats() {
    if (confirm('确定要重置所有统计数据吗？此操作不可恢复。')) {
      alert('统计数据已重置');
      
      // 刷新图表和数据
      initCharts();
      loadApiDetails();
      loadRecentChecks();
    }
  }
  
  // 导出数据
  function exportData() {
    alert('数据导出功能即将上线');
  }
  
  // 删除API
  function deleteApi() {
    if (confirm('确定要删除此API吗？此操作不可恢复。')) {
      alert('API已删除');
      window.location.href = '/apis';
    }
  }
  
  // 刷新数据
  function refreshData() {
    loadApiDetails();
    loadRecentChecks();
    loadApiAlerts();
  }
  
  // 为告警列表组件提供渲染函数
  window.renderAlertList = function(alerts, options) {
    // 创建一个临时元素来渲染告警列表
    const tempDiv = document.createElement('div');
    tempDiv.innerHTML = <%- JSON.stringify(components.alertList.render([], { showEmpty: true })) %>;
    
    // 获取列表容器元素
    const listGroup = tempDiv.querySelector('.list-group');
    listGroup.innerHTML = '';
    
    if (alerts && alerts.length > 0) {
      alerts.forEach(alert => {
        const severityClass = alert.severity === 'critical' ? 'alert-critical' : (
          alert.severity === 'warning' ? 'alert-warning' : 'alert-info'
        );
        const timestamp = new Date(alert.timestamp).toLocaleString();
        
        const itemDiv = document.createElement('div');
        itemDiv.className = `list-group-item list-group-item-action flex-column align-items-start ${severityClass}`;
        
        itemDiv.innerHTML = `
          <div class="d-flex w-100 justify-content-between">
            <h5 class="mb-1">${escapeHtml(alert.title)}</h5>
            <small>${timestamp}</small>
          </div>
          <p class="mb-1">${escapeHtml(alert.message)}</p>
          <div class="d-flex justify-content-between align-items-center">
            <small class="text-muted">API: ${escapeHtml(alert.api_name)}</small>
            ${options && options.showActions ? `
              <div class="btn-group">
                <button type="button" class="btn btn-sm btn-outline-primary acknowledge-alert" data-alert-id="${alert.id}">
                  确认
                </button>
                <button type="button" class="btn btn-sm btn-outline-danger dismiss-alert" data-alert-id="${alert.id}">
                  忽略
                </button>
              </div>
            ` : ''}
          </div>
        `;
        
        listGroup.appendChild(itemDiv);
      });
    } else {
      listGroup.innerHTML = `
        <div class="text-center py-3">
          <i class="bi bi-check-circle text-success" style="font-size: 2rem;"></i>
          <p class="mt-2">没有告警记录</p>
        </div>
      `;
    }
    
    return tempDiv.innerHTML;
  };
  
  // 辅助函数：转义HTML
  function escapeHtml(text) {
    if (typeof text !== 'string') {
      return '';
    }
    
    return text
      .replace(/&/g, '&amp;')
      .replace(/</g, '&lt;')
      .replace(/>/g, '&gt;')
      .replace(/"/g, '&quot;')
      .replace(/'/g, '&#039;');
  }
</script> 