<!-- 顶部状态卡片 -->
<div class="row mb-4">
  <div class="col-md-3 mb-3 mb-md-0">
    <div class="card border-left-primary h-100 py-2">
      <div class="card-body">
        <div class="row no-gutters align-items-center">
          <div class="col mr-2">
            <div class="text-xs font-weight-bold text-primary text-uppercase mb-1">
              监控中的API总数
            </div>
            <div class="h5 mb-0 font-weight-bold text-gray-800" id="totalApis">
              <%= apiList.length %>
            </div>
          </div>
          <div class="col-auto">
            <i class="bi bi-hdd-network fa-2x text-gray-300"></i>
          </div>
        </div>
      </div>
    </div>
  </div>

  <div class="col-md-3 mb-3 mb-md-0">
    <div class="card border-left-success h-100 py-2">
      <div class="card-body">
        <div class="row no-gutters align-items-center">
          <div class="col mr-2">
            <div class="text-xs font-weight-bold text-success text-uppercase mb-1">
              健康状态的API
            </div>
            <div class="h5 mb-0 font-weight-bold text-gray-800" id="healthyApis">
              计算中...
            </div>
          </div>
          <div class="col-auto">
            <i class="bi bi-check-circle fa-2x text-gray-300"></i>
          </div>
        </div>
      </div>
    </div>
  </div>

  <div class="col-md-3 mb-3 mb-md-0">
    <div class="card border-left-warning h-100 py-2">
      <div class="card-body">
        <div class="row no-gutters align-items-center">
          <div class="col mr-2">
            <div class="text-xs font-weight-bold text-warning text-uppercase mb-1">
              今日告警数
            </div>
            <div class="h5 mb-0 font-weight-bold text-gray-800" id="todayAlerts">
              <%= recentAlerts.filter(a => new Date(a.timestamp).toDateString() === new Date().toDateString()).length %>
            </div>
          </div>
          <div class="col-auto">
            <i class="bi bi-exclamation-triangle fa-2x text-gray-300"></i>
          </div>
        </div>
      </div>
    </div>
  </div>

  <div class="col-md-3 mb-3 mb-md-0">
    <div class="card border-left-info h-100 py-2">
      <div class="card-body">
        <div class="row no-gutters align-items-center">
          <div class="col mr-2">
            <div class="text-xs font-weight-bold text-info text-uppercase mb-1">
              系统运行时间
            </div>
            <div class="h5 mb-0 font-weight-bold text-gray-800" id="uptime">
              计算中...
            </div>
          </div>
          <div class="col-auto">
            <i class="bi bi-clock-history fa-2x text-gray-300"></i>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<!-- 主要图表区域 -->
<div class="row mb-4">
  <div class="col-md-8 mb-4">
    <div class="card shadow mb-4">
      <div class="card-header py-3 d-flex flex-row align-items-center justify-content-between">
        <h6 class="m-0 font-weight-bold text-primary">API响应时间趋势</h6>
        <div class="dropdown no-arrow">
          <button class="btn btn-link btn-sm dropdown-toggle" type="button" id="dropdownMenuButton"
                  data-bs-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
            <i class="bi bi-three-dots-vertical"></i>
          </button>
          <div class="dropdown-menu dropdown-menu-right shadow animated--fade-in" aria-labelledby="dropdownMenuButton">
            <a class="dropdown-item" href="#" id="refreshChart">刷新图表</a>
            <a class="dropdown-item" href="#" id="downloadChart">下载图表</a>
            <div class="dropdown-divider"></div>
            <a class="dropdown-item" href="#" id="viewAllData">查看所有数据</a>
          </div>
        </div>
      </div>
      <div class="card-body">
        <div class="chart-area">
          <canvas id="responseTimeChart"></canvas>
        </div>
      </div>
    </div>
  </div>

  <div class="col-md-4 mb-4">
    <div class="card shadow mb-4">
      <div class="card-header py-3">
        <h6 class="m-0 font-weight-bold text-primary">请求状态分布</h6>
      </div>
      <div class="card-body">
        <div class="chart-pie">
          <canvas id="statusChart"></canvas>
        </div>
      </div>
    </div>
  </div>
</div>

<!-- API状态列表和最近告警 -->
<div class="row">
  <div class="col-md-8 mb-4">
    <div class="card shadow mb-4">
      <div class="card-header py-3">
        <h6 class="m-0 font-weight-bold text-primary">API监控状态</h6>
      </div>
      <div class="card-body">
        <div class="table-responsive">
          <table class="table table-bordered" id="apiTable" width="100%" cellspacing="0">
            <thead>
              <tr>
                <th>API名称</th>
                <th>状态</th>
                <th>平均响应时间</th>
                <th>成功率</th>
                <th>最后检查时间</th>
                <th>操作</th>
              </tr>
            </thead>
            <tbody>
              <% apiList.forEach(function(api) { %>
                <tr>
                  <td><%= api.name %></td>
                  <td>
                    <span class="badge rounded-pill status-unknown">状态获取中...</span>
                  </td>
                  <td class="response-time-<%= api.name %>">计算中...</td>
                  <td class="success-rate-<%= api.name %>">计算中...</td>
                  <td class="last-check-<%= api.name %>">--</td>
                  <td>
                    <a href="/apis/<%= api.name %>" class="btn btn-primary btn-sm">
                      <i class="bi bi-graph-up"></i> 详情
                    </a>
                  </td>
                </tr>
              <% }); %>
            </tbody>
          </table>
        </div>
      </div>
    </div>
  </div>

  <div class="col-md-4 mb-4">
    <div class="card shadow mb-4">
      <div class="card-header py-3 d-flex flex-row align-items-center justify-content-between">
        <h6 class="m-0 font-weight-bold text-primary">最近告警</h6>
        <a href="/alerts" class="btn btn-sm btn-primary">
          查看全部
        </a>
      </div>
      <div class="card-body">
        <div class="list-group">
          <% if (recentAlerts && recentAlerts.length > 0) { %>
            <% recentAlerts.forEach(function(alert) { %>
              <div class="list-group-item list-group-item-action flex-column align-items-start">
                <div class="d-flex w-100 justify-content-between">
                  <h5 class="mb-1"><%= alert.title %></h5>
                  <small><%= new Date(alert.timestamp).toLocaleString() %></small>
                </div>
                <p class="mb-1"><%= alert.message %></p>
                <small class="text-muted">API: <%= alert.api_name %></small>
              </div>
            <% }); %>
          <% } else { %>
            <div class="text-center py-3">
              <i class="bi bi-check-circle text-success" style="font-size: 2rem;"></i>
              <p class="mt-2">没有最近的告警记录</p>
            </div>
          <% } %>
        </div>
      </div>
    </div>
  </div>
</div>

<!-- 额外的JavaScript -->
<script>
  document.addEventListener('DOMContentLoaded', function() {
    // 图表初始化
    const responseTimeCtx = document.getElementById('responseTimeChart').getContext('2d');
    const statusCtx = document.getElementById('statusChart').getContext('2d');
    
    // 响应时间趋势图
    const responseTimeChart = new Chart(responseTimeCtx, {
      type: 'line',
      data: {
        labels: [], // 将通过API填充
        datasets: [] // 将通过API填充
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        plugins: {
          legend: {
            position: 'top',
          },
          tooltip: {
            mode: 'index',
            intersect: false,
          }
        },
        scales: {
          x: {
            title: {
              display: true,
              text: '时间'
            }
          },
          y: {
            beginAtZero: true,
            title: {
              display: true,
              text: '响应时间 (ms)'
            }
          }
        }
      }
    });
    
    // 状态分布饼图
    const statusChart = new Chart(statusCtx, {
      type: 'doughnut',
      data: {
        labels: ['成功', '错误', '超时'],
        datasets: [{
          data: [0, 0, 0], // 将通过API填充
          backgroundColor: ['#1cc88a', '#e74a3b', '#f6c23e'],
          hoverBackgroundColor: ['#169b6b', '#be3c2f', '#daa520'],
          hoverBorderColor: "rgba(234, 236, 244, 1)",
        }]
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        plugins: {
          legend: {
            position: 'bottom'
          }
        },
        cutout: '70%'
      }
    });
    
    // API数据刷新函数
    function refreshApiData() {
      // 这里将通过AJAX获取最新的API指标数据
      // 并更新图表和表格内容
      
      // 更新系统运行时间
      const startTime = new Date(Date.now() - Math.floor(Math.random() * 1000000000));
      const uptime = formatUptime(Date.now() - startTime);
      document.getElementById('uptime').textContent = uptime;
      
      // 模拟更新健康API数量
      const healthyCount = Math.floor(Math.random() * <%= apiList.length %>) + 1;
      document.getElementById('healthyApis').textContent = healthyCount + '/' + <%= apiList.length %>;
      
      // 更新API状态表格的示例代码
      <% apiList.forEach(function(api, index) { %>
        // 随机生成示例数据
        const responseTime = Math.floor(Math.random() * 500) + 50;
        const successRate = (Math.random() * 20 + 80).toFixed(2);
        const isHealthy = Math.random() > 0.2;
        
        // 更新表格单元格
        const statusBadge = document.querySelector('tr:nth-child(<%= index + 1 %>) .badge');
        statusBadge.textContent = isHealthy ? '正常' : '异常';
        statusBadge.className = 'badge rounded-pill ' + (isHealthy ? 'bg-success' : 'bg-danger');
        
        document.querySelector('.response-time-<%= api.name %>').textContent = responseTime + ' ms';
        document.querySelector('.success-rate-<%= api.name %>').textContent = successRate + '%';
        document.querySelector('.last-check-<%= api.name %>').textContent = new Date().toLocaleString();
      <% }); %>
      
      // 更新图表数据
      updateCharts();
    }
    
    function updateCharts() {
      // 生成模拟数据用于图表展示
      const timeLabels = [];
      const now = new Date();
      for (let i = 9; i >= 0; i--) {
        const time = new Date(now.getTime() - i * 3600000);
        timeLabels.push(time.getHours() + ':00');
      }
      
      // 更新响应时间趋势图
      responseTimeChart.data.labels = timeLabels;
      responseTimeChart.data.datasets = [];
      
      <% apiList.slice(0, 5).forEach(function(api, index) { %>
        const dataset<%= index %> = {
          label: '<%= api.name %>',
          borderColor: getRandomColor(<%= index %>),
          data: Array.from({length: 10}, () => Math.floor(Math.random() * 500) + 50),
          lineTension: 0.3,
          pointRadius: 3,
          pointBackgroundColor: "rgba(78, 115, 223, 1)",
          pointBorderColor: "rgba(78, 115, 223, 1)",
          pointHoverRadius: 3,
          pointHoverBackgroundColor: "rgba(78, 115, 223, 1)",
          pointHoverBorderColor: "rgba(78, 115, 223, 1)",
          pointHitRadius: 10,
          pointBorderWidth: 2
        };
        responseTimeChart.data.datasets.push(dataset<%= index %>);
      <% }); %>
      
      responseTimeChart.update();
      
      // 更新状态分布饼图
      statusChart.data.datasets[0].data = [
        Math.floor(Math.random() * 500) + 500, // 成功
        Math.floor(Math.random() * 100), // 错误
        Math.floor(Math.random() * 50) // 超时
      ];
      statusChart.update();
    }
    
    // 初始数据加载
    refreshApiData();
    
    // 设置定时刷新
    setInterval(refreshApiData, 60000); // 每分钟刷新一次
    
    // 辅助函数
    function formatUptime(ms) {
      const days = Math.floor(ms / (24 * 60 * 60 * 1000));
      const hours = Math.floor((ms % (24 * 60 * 60 * 1000)) / (60 * 60 * 1000));
      const minutes = Math.floor((ms % (60 * 60 * 1000)) / (60 * 1000));
      
      return days + '天 ' + hours + '小时 ' + minutes + '分钟';
    }
    
    function getRandomColor(index) {
      const colors = [
        'rgba(78, 115, 223, 1)',
        'rgba(28, 200, 138, 1)',
        'rgba(54, 185, 204, 1)',
        'rgba(246, 194, 62, 1)',
        'rgba(231, 74, 59, 1)'
      ];
      return colors[index % colors.length];
    }
    
    // 绑定刷新按钮事件
    document.getElementById('refreshBtn').addEventListener('click', function() {
      refreshApiData();
    });
    
    // 绑定导出按钮事件
    document.getElementById('exportBtn').addEventListener('click', function() {
      alert('导出功能即将推出');
    });
  });
</script> 