<!-- 顶部状态卡片 -->
<div class="row mb-4">
  <div class="col-md-3 mb-3 mb-md-0">
    <div class="card border-left-primary h-100 py-2">
      <div class="card-body">
        <div class="row no-gutters align-items-center">
          <div class="col mr-2">
            <div class="text-xs font-weight-bold text-primary text-uppercase mb-1">
              监控中的API总数
            </div>
            <div class="h5 mb-0 font-weight-bold text-gray-800" id="totalApis">
              <%= apiList.length %>
            </div>
          </div>
          <div class="col-auto">
            <i class="bi bi-hdd-network fa-2x text-gray-300"></i>
          </div>
        </div>
      </div>
    </div>
  </div>

  <div class="col-md-3 mb-3 mb-md-0">
    <div class="card border-left-success h-100 py-2">
      <div class="card-body">
        <div class="row no-gutters align-items-center">
          <div class="col mr-2">
            <div class="text-xs font-weight-bold text-success text-uppercase mb-1">
              健康状态的API
            </div>
            <div class="h5 mb-0 font-weight-bold text-gray-800" id="healthyApis">
              计算中...
            </div>
          </div>
          <div class="col-auto">
            <i class="bi bi-check-circle fa-2x text-gray-300"></i>
          </div>
        </div>
      </div>
    </div>
  </div>

  <div class="col-md-3 mb-3 mb-md-0">
    <div class="card border-left-warning h-100 py-2">
      <div class="card-body">
        <div class="row no-gutters align-items-center">
          <div class="col mr-2">
            <div class="text-xs font-weight-bold text-warning text-uppercase mb-1">
              今日告警数
            </div>
            <div class="h5 mb-0 font-weight-bold text-gray-800" id="todayAlerts">
              <%= recentAlerts.filter(a => new Date(a.timestamp).toDateString() === new Date().toDateString()).length %>
            </div>
          </div>
          <div class="col-auto">
            <i class="bi bi-exclamation-triangle fa-2x text-gray-300"></i>
          </div>
        </div>
      </div>
    </div>
  </div>

  <div class="col-md-3 mb-3 mb-md-0">
    <div class="card border-left-info h-100 py-2">
      <div class="card-body">
        <div class="row no-gutters align-items-center">
          <div class="col mr-2">
            <div class="text-xs font-weight-bold text-info text-uppercase mb-1">
              系统运行时间
            </div>
            <div class="h5 mb-0 font-weight-bold text-gray-800" id="uptime">
              计算中...
            </div>
          </div>
          <div class="col-auto">
            <i class="bi bi-clock-history fa-2x text-gray-300"></i>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<!-- 主要图表区域 -->
<div class="row mb-4">
  <div class="col-md-8 mb-4">
    <!-- 使用API图表组件显示响应时间趋势图 -->
    <%- components.apiChart.renderResponseTimeChart('responseTimeChart', 'API响应时间趋势', { height: '300px' }) %>
  </div>

  <div class="col-md-4 mb-4">
    <!-- 使用API图表组件显示状态分布图 -->
    <%- components.apiChart.renderStatusChart('statusChart', '请求状态分布', { height: '300px' }) %>
  </div>
</div>

<!-- API状态列表和最近告警 -->
<div class="row">
  <div class="col-md-8 mb-4">
    <div class="card shadow mb-4">
      <div class="card-header py-3">
        <h6 class="m-0 font-weight-bold text-primary">API监控状态</h6>
      </div>
      <div class="card-body">
        <!-- 使用API表格组件显示API状态列表 -->
        <%- components.apiTable.render(apiList, { limit: 5, showPagination: false }) %>
        
        <div class="text-center mt-3">
          <a href="/apis" class="btn btn-primary">查看所有API</a>
        </div>
      </div>
    </div>
  </div>

  <div class="col-md-4 mb-4">
    <div class="card shadow mb-4">
      <div class="card-header py-3 d-flex flex-row align-items-center justify-content-between">
        <h6 class="m-0 font-weight-bold text-primary">最近告警</h6>
        <a href="/alerts" class="btn btn-sm btn-primary">
          查看全部
        </a>
      </div>
      <div class="card-body">
        <!-- 使用告警列表组件显示最近告警 -->
        <%- components.alertList.render(recentAlerts, { limit: 5, showActions: false }) %>
      </div>
    </div>
  </div>
</div>

<!-- 额外的JavaScript -->
<script>
  document.addEventListener('DOMContentLoaded', function() {
    // 更新状态卡片数据
    updateDashboardStats();
    
    // 定期更新数据
    setInterval(updateDashboardStats, 60000);
    
    // 初始化API响应时间图表数据
    initResponseTimeChartData();
    
    // 初始化状态分布图表数据
    initStatusChartData();
  });
  
  // 更新仪表盘统计数据
  function updateDashboardStats() {
    // 计算系统运行时间
    const uptimeElement = document.getElementById('uptime');
    if (uptimeElement) {
      // 这里使用一个假定的启动时间，实际应从服务器获取
      const startTime = new Date(Date.now() - Math.floor(Math.random() * 86400000 * 30));
      const uptime = formatDuration(Date.now() - startTime.getTime());
      uptimeElement.textContent = uptime;
    }
    
    // 计算健康API数量
    const healthyApisElement = document.getElementById('healthyApis');
    if (healthyApisElement) {
      // 模拟健康API数量
      const totalApis = parseInt(document.getElementById('totalApis').textContent, 10);
      const healthyCount = Math.floor(totalApis * (0.7 + Math.random() * 0.3));
      healthyApisElement.textContent = healthyCount + ' / ' + totalApis;
    }
  }
  
  // 初始化API响应时间图表数据
  function initResponseTimeChartData() {
    if (!window.charts || !window.charts['responseTimeChart']) return;
    
    const chart = window.charts['responseTimeChart'];
    const labels = [];
    const datasets = [];
    
    // 生成过去24小时的标签
    const now = new Date();
    for (let i = 23; i >= 0; i--) {
      const time = new Date(now.getTime() - i * 3600000);
      labels.push(time.getHours() + ':00');
    }
    
    // 生成随机数据集
    const apiList = Array.from(document.querySelectorAll('[data-api-name]')).map(el => el.getAttribute('data-api-name'));
    
    // 颜色列表
    const colors = [
      'rgba(78, 115, 223, 0.6)',
      'rgba(28, 200, 138, 0.6)',
      'rgba(246, 194, 62, 0.6)',
      'rgba(54, 185, 204, 0.6)',
      'rgba(231, 74, 59, 0.6)'
    ];
    
    apiList.forEach((api, index) => {
      const data = [];
      
      // 生成随机响应时间数据
      for (let i = 0; i < 24; i++) {
        // 基础响应时间在50-150ms之间
        const baseTime = 50 + Math.random() * 100;
        // 添加一些波动
        const jitter = Math.random() > 0.9 ? Math.random() * 500 : Math.random() * 50;
        data.push(Math.round(baseTime + jitter));
      }
      
      datasets.push({
        label: api,
        data: data,
        backgroundColor: colors[index % colors.length],
        borderColor: colors[index % colors.length].replace('0.6', '1'),
        borderWidth: 2,
        pointRadius: 3,
        pointBackgroundColor: colors[index % colors.length].replace('0.6', '1'),
        pointBorderColor: '#fff',
        pointHoverRadius: 5,
        fill: false,
        tension: 0.1
      });
    });
    
    // 更新图表数据
    chart.data.labels = labels;
    chart.data.datasets = datasets;
    chart.update();
  }
  
  // 初始化状态分布图表数据
  function initStatusChartData() {
    if (!window.charts || !window.charts['statusChart']) return;
    
    const chart = window.charts['statusChart'];
    
    // 生成随机状态分布数据
    const successCount = Math.floor(Math.random() * 500) + 1000;
    const errorCount = Math.floor(Math.random() * 50) + 10;
    const timeoutCount = Math.floor(Math.random() * 30) + 5;
    
    chart.data.datasets[0].data = [successCount, errorCount, timeoutCount];
    chart.update();
  }
</script> 