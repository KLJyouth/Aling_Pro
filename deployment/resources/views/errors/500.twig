{% extends "layouts/app.twig" %}

{% block title %}服务器错误 - {{ parent() }}{% endblock %}
{% block description %}服务器遇到内部错误{% endblock %}

{% block body_class %}error-page error-500{% endblock %}

{% block content %}
<div class="error-container">
    <!-- 故障背景效果 -->
    <div class="glitch-bg">
        <canvas id="error-canvas"></canvas>
    </div>

    <div class="container">
        <div class="row justify-content-center">
            <div class="col-lg-8 col-xl-6">
                <div class="error-content text-center">
                    <!-- 500错误图标 -->
                    <div class="error-icon mb-4">
                        <div class="server-error-visual">
                            <div class="error-code glitch" data-text="500">500</div>
                            <div class="server-icon">
                                <div class="server-rack">
                                    <div class="server-unit"></div>
                                    <div class="server-unit"></div>
                                    <div class="server-unit error-unit"></div>
                                </div>
                                <div class="error-sparks">
                                    <div class="spark spark-1"></div>
                                    <div class="spark spark-2"></div>
                                    <div class="spark spark-3"></div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- 错误标题 -->
                    <h1 class="error-title mb-3">
                        <span class="glitch-text" data-text="服务器开小差了">服务器开小差了</span>
                    </h1>
                    
                    <!-- 错误描述 -->
                    <p class="error-description mb-4">
                        我们的服务器正在努力修复问题，请稍后再试。<br>
                        如果问题持续存在，请联系技术支持。
                    </p>

                    <!-- 错误详情 -->
                    <div class="error-details mb-4">
                        <div class="detail-card">
                            <div class="detail-icon">
                                <i class="bi bi-exclamation-triangle"></i>
                            </div>
                            <div class="detail-content">
                                <h6>发生了什么？</h6>
                                <p>服务器在处理您的请求时遇到了意外错误</p>
                            </div>
                        </div>
                        
                        <div class="detail-card">
                            <div class="detail-icon">
                                <i class="bi bi-tools"></i>
                            </div>
                            <div class="detail-content">
                                <h6>我们在做什么？</h6>
                                <p>技术团队已收到错误报告并正在处理</p>
                            </div>
                        </div>
                        
                        <div class="detail-card">
                            <div class="detail-icon">
                                <i class="bi bi-clock"></i>
                            </div>
                            <div class="detail-content">
                                <h6>需要多长时间？</h6>
                                <p>通常在几分钟内就能解决，请稍后重试</p>
                            </div>
                        </div>
                    </div>

                    <!-- 操作按钮 -->
                    <div class="error-actions mb-4">
                        <button class="btn btn-primary me-3" onclick="location.reload()">
                            <i class="bi bi-arrow-clockwise"></i>
                            <span>重试</span>
                        </button>
                        <a href="{{ url('home') }}" class="btn btn-outline-light me-3">
                            <i class="bi bi-house"></i>
                            <span>返回首页</span>
                        </a>
                        <button class="btn btn-secondary" onclick="history.back()">
                            <i class="bi bi-arrow-left"></i>
                            <span>返回上页</span>
                        </button>
                    </div>

                    <!-- 系统状态 -->
                    <div class="system-status">
                        <h6 class="status-title">系统状态</h6>
                        <div class="status-grid">
                            <div class="status-item">
                                <div class="status-indicator status-good"></div>
                                <span>API服务</span>
                            </div>
                            <div class="status-item">
                                <div class="status-indicator status-warning"></div>
                                <span>Web服务</span>
                            </div>
                            <div class="status-item">
                                <div class="status-indicator status-good"></div>
                                <span>数据库</span>
                            </div>
                            <div class="status-item">
                                <div class="status-indicator status-good"></div>
                                <span>CDN服务</span>
                            </div>
                        </div>
                    </div>

                    <!-- 技术支持信息 -->
                    <div class="support-info mt-5">
                        <p class="text-muted small">
                            需要帮助？请 
                            <a href="mailto:support@alingai.com" class="text-decoration-none">联系技术支持</a>
                            或访问 <a href="{{ url('help') }}" class="text-decoration-none">帮助中心</a>
                        </p>
                        <p class="text-muted small">
                            错误代码: <code>500_INTERNAL_SERVER_ERROR</code> | 
                            错误ID: <code id="error-id"></code> | 
                            时间: <span id="error-time"></span>
                        </p>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
{% endblock %}

{% block styles %}
<style>
.error-500 {
    background: linear-gradient(135deg, #2c3e50 0%, #34495e 50%, #2c3e50 100%);
    min-height: 100vh;
    position: relative;
    overflow: hidden;
}

.glitch-bg {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: 1;
}

#error-canvas {
    width: 100%;
    height: 100%;
}

.error-container {
    position: relative;
    z-index: 2;
    display: flex;
    align-items: center;
    min-height: 100vh;
    padding: 2rem 0;
}

.error-content {
    background: rgba(255, 255, 255, 0.1);
    backdrop-filter: blur(20px);
    border-radius: 24px;
    padding: 3rem 2rem;
    border: 1px solid rgba(255, 255, 255, 0.2);
    box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
}

.server-error-visual {
    position: relative;
    display: inline-block;
    margin: 0 auto 2rem;
}

.error-code {
    font-size: 6rem;
    font-weight: 900;
    font-family: 'JetBrains Mono', monospace;
    color: #e74c3c;
    text-shadow: 0 0 30px #e74c3c;
    margin-bottom: 1rem;
    position: relative;
}

.glitch {
    position: relative;
}

.glitch::before,
.glitch::after {
    content: attr(data-text);
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
}

.glitch::before {
    animation: glitch-1 2.5s infinite;
    color: #ff0040;
    z-index: 1;
}

.glitch::after {
    animation: glitch-2 2.5s infinite;
    color: #00ffff;
    z-index: 2;
}

.server-icon {
    position: relative;
    display: inline-block;
    margin-top: 1rem;
}

.server-rack {
    width: 80px;
    height: 100px;
    background: #34495e;
    border-radius: 8px;
    position: relative;
    border: 2px solid #7f8c8d;
    margin: 0 auto;
}

.server-unit {
    width: 70px;
    height: 20px;
    background: #2c3e50;
    margin: 5px auto;
    border-radius: 4px;
    position: relative;
    border: 1px solid #7f8c8d;
}

.server-unit::before {
    content: '';
    position: absolute;
    width: 8px;
    height: 8px;
    background: #27ae60;
    border-radius: 50%;
    top: 50%;
    right: 8px;
    transform: translateY(-50%);
    animation: statusBlink 1.5s infinite;
}

.error-unit::before {
    background: #e74c3c;
    animation: errorBlink 0.5s infinite;
}

.error-sparks {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
}

.spark {
    position: absolute;
    width: 4px;
    height: 4px;
    background: #f39c12;
    border-radius: 50%;
    animation: sparkFly 2s infinite;
}

.spark-1 {
    top: 20%;
    left: 20%;
    animation-delay: 0s;
}

.spark-2 {
    top: 60%;
    right: 20%;
    animation-delay: 0.7s;
}

.spark-3 {
    bottom: 20%;
    left: 50%;
    animation-delay: 1.4s;
}

.glitch-text {
    position: relative;
    color: white;
}

.glitch-text::before,
.glitch-text::after {
    content: attr(data-text);
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
}

.glitch-text::before {
    animation: glitch-text-1 3s infinite;
    color: #ff0040;
    z-index: 1;
}

.glitch-text::after {
    animation: glitch-text-2 3s infinite;
    color: #00ffff;
    z-index: 2;
}

.error-title {
    font-size: 2.5rem;
    font-weight: 700;
    margin-bottom: 1.5rem;
}

.error-description {
    font-size: 1.1rem;
    color: rgba(255, 255, 255, 0.9);
    line-height: 1.6;
}

.error-details {
    max-width: 600px;
    margin: 0 auto;
}

.detail-card {
    display: flex;
    align-items: flex-start;
    background: rgba(255, 255, 255, 0.1);
    border-radius: 12px;
    padding: 1.5rem;
    margin-bottom: 1rem;
    border: 1px solid rgba(255, 255, 255, 0.2);
    text-align: left;
}

.detail-icon {
    font-size: 1.5rem;
    color: #3498db;
    margin-right: 1rem;
    margin-top: 0.25rem;
}

.detail-content h6 {
    color: white;
    margin-bottom: 0.5rem;
    font-weight: 600;
}

.detail-content p {
    color: rgba(255, 255, 255, 0.8);
    margin: 0;
    font-size: 0.9rem;
}

.error-actions {
    margin: 2rem 0;
}

.btn {
    border-radius: 12px;
    padding: 0.75rem 1.5rem;
    font-weight: 600;
    transition: all 0.3s ease;
}

.btn:hover {
    transform: translateY(-2px);
}

.btn-primary {
    background: linear-gradient(45deg, #3498db, #2980b9);
    border: none;
}

.btn-outline-light {
    border: 2px solid rgba(255, 255, 255, 0.3);
    color: white;
}

.btn-outline-light:hover {
    background: rgba(255, 255, 255, 0.1);
    border-color: white;
    color: white;
}

.btn-secondary {
    background: rgba(255, 255, 255, 0.2);
    border: none;
    color: white;
}

.system-status {
    background: rgba(255, 255, 255, 0.1);
    border-radius: 12px;
    padding: 1.5rem;
    margin: 2rem 0;
}

.status-title {
    color: white;
    margin-bottom: 1rem;
    font-weight: 600;
}

.status-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));
    gap: 1rem;
}

.status-item {
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 0.5rem;
    color: rgba(255, 255, 255, 0.9);
    font-size: 0.9rem;
}

.status-indicator {
    width: 10px;
    height: 10px;
    border-radius: 50%;
    animation: statusPulse 2s infinite;
}

.status-good {
    background: #27ae60;
}

.status-warning {
    background: #f39c12;
}

.status-error {
    background: #e74c3c;
}

.support-info {
    border-top: 1px solid rgba(255, 255, 255, 0.2);
    padding-top: 1.5rem;
}

.support-info a {
    color: #3498db;
}

.support-info a:hover {
    color: #2980b9;
}

/* 动画 */
@keyframes glitch-1 {
    0%, 100% { transform: translate(0); }
    20% { transform: translate(-2px, 2px); }
    40% { transform: translate(-2px, -2px); }
    60% { transform: translate(2px, 2px); }
    80% { transform: translate(2px, -2px); }
}

@keyframes glitch-2 {
    0%, 100% { transform: translate(0); }
    20% { transform: translate(2px, -2px); }
    40% { transform: translate(2px, 2px); }
    60% { transform: translate(-2px, -2px); }
    80% { transform: translate(-2px, 2px); }
}

@keyframes glitch-text-1 {
    0%, 100% { transform: translate(0); }
    10% { transform: translate(-1px, 1px); }
    20% { transform: translate(-1px, -1px); }
    30% { transform: translate(1px, 1px); }
    40% { transform: translate(1px, -1px); }
}

@keyframes glitch-text-2 {
    0%, 100% { transform: translate(0); }
    15% { transform: translate(1px, -1px); }
    25% { transform: translate(1px, 1px); }
    35% { transform: translate(-1px, 1px); }
    45% { transform: translate(-1px, -1px); }
}

@keyframes statusBlink {
    0%, 50% { opacity: 1; }
    51%, 100% { opacity: 0.3; }
}

@keyframes errorBlink {
    0%, 50% { opacity: 1; }
    51%, 100% { opacity: 0.2; }
}

@keyframes sparkFly {
    0% { transform: translate(0, 0) scale(1); opacity: 1; }
    50% { transform: translate(20px, -20px) scale(1.2); opacity: 0.8; }
    100% { transform: translate(40px, -40px) scale(0.8); opacity: 0; }
}

@keyframes statusPulse {
    0%, 100% { opacity: 1; }
    50% { opacity: 0.6; }
}

/* 响应式设计 */
@media (max-width: 768px) {
    .error-code {
        font-size: 4rem;
    }
    
    .error-title {
        font-size: 2rem;
    }
    
    .error-content {
        padding: 2rem 1.5rem;
    }
    
    .detail-card {
        padding: 1rem;
    }
    
    .status-grid {
        grid-template-columns: repeat(2, 1fr);
        gap: 0.75rem;
    }
    
    .error-actions .btn {
        margin-bottom: 0.5rem;
    }
}
</style>
{% endblock %}

{% block scripts %}
<script>
document.addEventListener('DOMContentLoaded', function() {
    // 显示当前时间和错误ID
    const errorTime = document.getElementById('error-time');
    const errorId = document.getElementById('error-id');
    
    if (errorTime) {
        errorTime.textContent = new Date().toLocaleString('zh-CN');
    }
    
    if (errorId) {
        // 生成随机错误ID
        const id = Math.random().toString(36).substr(2, 9).toUpperCase();
        errorId.textContent = id;
    }

    // 创建故障效果背景
    const canvas = document.getElementById('error-canvas');
    if (canvas) {
        const ctx = canvas.getContext('2d');
        
        function resizeCanvas() {
            canvas.width = window.innerWidth;
            canvas.height = window.innerHeight;
        }
        
        resizeCanvas();
        window.addEventListener('resize', resizeCanvas);
        
        const lines = [];
        const lineCount = 20;
        
        // 创建故障线条
        for (let i = 0; i < lineCount; i++) {
            lines.push({
                x: Math.random() * canvas.width,
                y: Math.random() * canvas.height,
                width: Math.random() * 200 + 50,
                height: Math.random() * 3 + 1,
                speed: Math.random() * 2 + 0.5,
                opacity: Math.random() * 0.3 + 0.1
            });
        }
        
        function animate() {
            ctx.clearRect(0, 0, canvas.width, canvas.height);
            
            lines.forEach(line => {
                // 更新位置
                line.x += line.speed;
                
                // 重置位置
                if (line.x > canvas.width + line.width) {
                    line.x = -line.width;
                    line.y = Math.random() * canvas.height;
                }
                
                // 绘制故障线条
                ctx.fillStyle = `rgba(231, 76, 60, ${line.opacity})`;
                ctx.fillRect(line.x, line.y, line.width, line.height);
                
                // 随机添加噪点
                if (Math.random() < 0.1) {
                    ctx.fillStyle = `rgba(255, 255, 255, ${Math.random() * 0.5})`;
                    ctx.fillRect(
                        Math.random() * canvas.width,
                        Math.random() * canvas.height,
                        Math.random() * 5 + 1,
                        Math.random() * 5 + 1
                    );
                }
            });
            
            requestAnimationFrame(animate);
        }
        
        animate();
    }

    // 自动重试倒计时
    let retryCountdown = 30;
    const retryBtn = document.querySelector('.btn-primary');
    const originalText = retryBtn.innerHTML;
    
    function updateRetryButton() {
        if (retryCountdown > 0) {
            retryBtn.innerHTML = `<i class="bi bi-arrow-clockwise"></i> <span>重试 (${retryCountdown}s)</span>`;
            retryCountdown--;
            setTimeout(updateRetryButton, 1000);
        } else {
            retryBtn.innerHTML = originalText;
        }
    }
    
    // 开始倒计时
    setTimeout(updateRetryButton, 1000);
});
</script>
{% endblock %}
