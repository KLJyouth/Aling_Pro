# AlingAi Pro 6.0 企业级生产环境 Docker 配置
# 多阶段构建，优化镜像大小和安全性

version: '3.8'

services:
  # Nginx 负载均衡器和反向代理
  nginx:
    image: nginx:1.24-alpine
    container_name: alingai_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/conf.d:/etc/nginx/conf.d:ro
      - ./docker/ssl:/etc/nginx/ssl:ro
      - ./public:/var/www/html/public:ro
      - ./storage/logs/nginx:/var/log/nginx
    depends_on:
      - php-fpm-app1
      - php-fpm-app2
    networks:
      - alingai-frontend
      - alingai-backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PHP-FPM 应用服务器 - 实例1
  php-fpm-app1:
    build:
      context: .
      dockerfile: docker/php/Dockerfile
      target: production
    container_name: alingai_app1
    volumes:
      - ./:/var/www/html
      - ./docker/php/php.ini:/usr/local/etc/php/conf.d/99-custom.ini:ro
      - ./storage/logs/php:/var/log/php
      - ./storage/cache:/var/www/html/storage/cache
      - ./storage/sessions:/var/www/html/storage/sessions
    environment:
      - APP_ENV=production
      - PHP_OPCACHE_ENABLE=1
      - PHP_REALPATH_CACHE_SIZE=4096K
      - PHP_REALPATH_CACHE_TTL=600
    depends_on:
      - mysql-master
      - redis-cluster
      - elasticsearch
    networks:
      - alingai-backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "php", "/var/www/html/artisan", "health:check"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PHP-FPM 应用服务器 - 实例2
  php-fpm-app2:
    build:
      context: .
      dockerfile: docker/php/Dockerfile
      target: production
    container_name: alingai_app2
    volumes:
      - ./:/var/www/html
      - ./docker/php/php.ini:/usr/local/etc/php/conf.d/99-custom.ini:ro
      - ./storage/logs/php:/var/log/php
      - ./storage/cache:/var/www/html/storage/cache
      - ./storage/sessions:/var/www/html/storage/sessions
    environment:
      - APP_ENV=production
      - PHP_OPCACHE_ENABLE=1
      - PHP_REALPATH_CACHE_SIZE=4096K
      - PHP_REALPATH_CACHE_TTL=600
    depends_on:
      - mysql-master
      - redis-cluster
      - elasticsearch
    networks:
      - alingai-backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "php", "/var/www/html/artisan", "health:check"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MySQL 主数据库
  mysql-master:
    image: mysql:8.0
    container_name: alingai_mysql_master
    ports:
      - "3306:3306"
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD}
      MYSQL_DATABASE: ${DB_DATABASE}
      MYSQL_USER: ${DB_USERNAME}
      MYSQL_PASSWORD: ${DB_PASSWORD}
      MYSQL_REPLICATION_USER: replicator
      MYSQL_REPLICATION_PASSWORD: ${MYSQL_REPLICATION_PASSWORD}
    volumes:
      - mysql_master_data:/var/lib/mysql
      - ./docker/mysql/master.cnf:/etc/mysql/conf.d/master.cnf:ro
      - ./docker/mysql/init:/docker-entrypoint-initdb.d:ro
      - ./storage/backups/mysql:/backup
    command: --server-id=1 --log-bin=mysql-bin --binlog-format=ROW
    networks:
      - alingai-backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p${DB_ROOT_PASSWORD}"]
      interval: 30s
      timeout: 10s
      retries: 5

  # MySQL 从数据库
  mysql-slave:
    image: mysql:8.0
    container_name: alingai_mysql_slave
    ports:
      - "3307:3306"
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD}
      MYSQL_DATABASE: ${DB_DATABASE}
      MYSQL_USER: ${DB_USERNAME}
      MYSQL_PASSWORD: ${DB_PASSWORD}
      MYSQL_MASTER_HOST: mysql-master
      MYSQL_REPLICATION_USER: replicator
      MYSQL_REPLICATION_PASSWORD: ${MYSQL_REPLICATION_PASSWORD}
    volumes:
      - mysql_slave_data:/var/lib/mysql
      - ./docker/mysql/slave.cnf:/etc/mysql/conf.d/slave.cnf:ro
      - ./docker/mysql/init-slave.sh:/docker-entrypoint-initdb.d/init-slave.sh:ro
    command: --server-id=2 --relay-log=mysql-relay --log-slave-updates=1 --read-only=1
    depends_on:
      - mysql-master
    networks:
      - alingai-backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p${DB_ROOT_PASSWORD}"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Redis 集群 - 节点1
  redis-node1:
    image: redis:7-alpine
    container_name: alingai_redis_node1
    ports:
      - "7001:7001"
    command: redis-server /etc/redis/redis.conf --port 7001 --cluster-enabled yes --cluster-config-file nodes-7001.conf --cluster-node-timeout 5000 --appendonly yes
    volumes:
      - ./docker/redis/redis.conf:/etc/redis/redis.conf:ro
      - redis_node1_data:/data
    networks:
      - alingai-backend
    restart: unless-stopped

  # Redis 集群 - 节点2
  redis-node2:
    image: redis:7-alpine
    container_name: alingai_redis_node2
    ports:
      - "7002:7002"
    command: redis-server /etc/redis/redis.conf --port 7002 --cluster-enabled yes --cluster-config-file nodes-7002.conf --cluster-node-timeout 5000 --appendonly yes
    volumes:
      - ./docker/redis/redis.conf:/etc/redis/redis.conf:ro
      - redis_node2_data:/data
    networks:
      - alingai-backend
    restart: unless-stopped

  # Redis 集群 - 节点3
  redis-node3:
    image: redis:7-alpine
    container_name: alingai_redis_node3
    ports:
      - "7003:7003"
    command: redis-server /etc/redis/redis.conf --port 7003 --cluster-enabled yes --cluster-config-file nodes-7003.conf --cluster-node-timeout 5000 --appendonly yes
    volumes:
      - ./docker/redis/redis.conf:/etc/redis/redis.conf:ro
      - redis_node3_data:/data
    networks:
      - alingai-backend
    restart: unless-stopped

  # Redis 集群初始化器
  redis-cluster:
    image: redis:7-alpine
    container_name: alingai_redis_cluster_init
    command: redis-cli --cluster create redis-node1:7001 redis-node2:7002 redis-node3:7003 --cluster-replicas 0 --cluster-yes
    depends_on:
      - redis-node1
      - redis-node2
      - redis-node3
    networks:
      - alingai-backend
    restart: "no"

  # Elasticsearch
  elasticsearch:
    image: elasticsearch:8.8.0
    container_name: alingai_elasticsearch
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms2g -Xmx2g"
      - bootstrap.memory_lock=true
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
      - ./docker/elasticsearch/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro
    ulimits:
      memlock:
        soft: -1
        hard: -1
    networks:
      - alingai-backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9200/_cluster/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Kibana
  kibana:
    image: kibana:8.8.0
    container_name: alingai_kibana
    ports:
      - "5601:5601"
    environment:
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200
    depends_on:
      - elasticsearch
    volumes:
      - ./docker/kibana/kibana.yml:/usr/share/kibana/config/kibana.yml:ro
    networks:
      - alingai-backend
    restart: unless-stopped

  # RabbitMQ 消息队列
  rabbitmq:
    image: rabbitmq:3.12-management-alpine
    container_name: alingai_rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD}
      RABBITMQ_DEFAULT_VHOST: alingai
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
      - ./docker/rabbitmq/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf:ro
      - ./docker/rabbitmq/definitions.json:/etc/rabbitmq/definitions.json:ro
    networks:
      - alingai-backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MinIO 对象存储
  minio:
    image: minio/minio:latest
    container_name: alingai_minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    networks:
      - alingai-backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus 监控
  prometheus:
    image: prom/prometheus:latest
    container_name: alingai_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - alingai-backend
    restart: unless-stopped

  # Grafana 可视化
  grafana:
    image: grafana/grafana:latest
    container_name: alingai_grafana
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_USER}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD}
      GF_INSTALL_PLUGINS: grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./docker/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - alingai-backend
    restart: unless-stopped

  # Node.js 实时服务
  nodejs-realtime:
    build:
      context: ./apps/realtime
      dockerfile: Dockerfile
    container_name: alingai_nodejs_realtime
    ports:
      - "3001:3001"
    environment:
      NODE_ENV: production
      REDIS_HOST: redis-node1
      REDIS_PORT: 7001
    volumes:
      - ./apps/realtime:/app
      - /app/node_modules
    depends_on:
      - redis-cluster
    networks:
      - alingai-backend
    restart: unless-stopped

  # Python AI 服务
  python-ai:
    build:
      context: ./apps/ai-services
      dockerfile: Dockerfile
    container_name: alingai_python_ai
    ports:
      - "8000:8000"
    environment:
      PYTHONPATH: /app
      REDIS_URL: redis://redis-node1:7001
      DATABASE_URL: mysql://${DB_USERNAME}:${DB_PASSWORD}@mysql-master:3306/${DB_DATABASE}
    volumes:
      - ./apps/ai-services:/app
      - ./storage/ai-models:/app/models
      - ./storage/logs/ai:/app/logs
    depends_on:
      - mysql-master
      - redis-cluster
    networks:
      - alingai-backend
    restart: unless-stopped
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]

  # 任务队列处理器
  queue-worker:
    build:
      context: .
      dockerfile: docker/php/Dockerfile
      target: production
    container_name: alingai_queue_worker
    command: php artisan queue:work --verbose --tries=3 --timeout=90
    volumes:
      - ./:/var/www/html
      - ./docker/php/php.ini:/usr/local/etc/php/conf.d/99-custom.ini:ro
    environment:
      - APP_ENV=production
    depends_on:
      - mysql-master
      - redis-cluster
      - rabbitmq
    networks:
      - alingai-backend
    restart: unless-stopped
    deploy:
      replicas: 3

  # 调度器
  scheduler:
    build:
      context: .
      dockerfile: docker/php/Dockerfile
      target: production
    container_name: alingai_scheduler
    command: php artisan schedule:work
    volumes:
      - ./:/var/www/html
      - ./docker/php/php.ini:/usr/local/etc/php/conf.d/99-custom.ini:ro
    environment:
      - APP_ENV=production
    depends_on:
      - mysql-master
      - redis-cluster
    networks:
      - alingai-backend
    restart: unless-stopped

  # Filebeat 日志收集
  filebeat:
    image: elastic/filebeat:8.8.0
    container_name: alingai_filebeat
    user: root
    volumes:
      - ./docker/filebeat/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro
      - ./storage/logs:/var/log/app:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    depends_on:
      - elasticsearch
    networks:
      - alingai-backend
    restart: unless-stopped

networks:
  alingai-frontend:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
  alingai-backend:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16

volumes:
  mysql_master_data:
    driver: local
  mysql_slave_data:
    driver: local
  redis_node1_data:
    driver: local
  redis_node2_data:
    driver: local
  redis_node3_data:
    driver: local
  elasticsearch_data:
    driver: local
  rabbitmq_data:
    driver: local
  minio_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
