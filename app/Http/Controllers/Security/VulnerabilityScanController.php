<?php

namespace App\Http\Controllers\Security;

use App\Http\Controllers\Controller;
use App\Services\Security\VulnerabilityScanner;
use Illuminate\Http\Request;
use Illuminate\Http\JsonResponse;
use Illuminate\Support\Facades\Log;

class VulnerabilityScanController extends Controller
{
    /**
     * 漏洞扫描服务
     * 
     * @var VulnerabilityScanner
     */
    protected $vulnerabilityScanner;

    /**
     * 构造函数
     * 
     * @param VulnerabilityScanner $vulnerabilityScanner 漏洞扫描服务
     */
    public function __construct(VulnerabilityScanner $vulnerabilityScanner)
    {
        $this->vulnerabilityScanner = $vulnerabilityScanner;
    }

    /**
     * 启动漏洞扫描
     * 
     * @param Request $request
     * @return JsonResponse
     */
    public function startScan(Request $request): JsonResponse
    {
        try {
            $scanType = $request->input('scan_type', 'quick');
            $targets = $request->input('targets', []);
            $options = $request->input('options', []);
            
            $result = $this->vulnerabilityScanner->startScan($scanType, $targets, $options);
            
            return response()->json([
                'success' => true,
                'data' => $result
            ]);
        } catch (\Exception $e) {
            Log::error('启动漏洞扫描失败: ' . $e->getMessage(), ['trace' => $e->getTraceAsString()]);
            return response()->json([
                'success' => false,
                'message' => '启动漏洞扫描失败: ' . $e->getMessage()
            ], 500);
        }
    }
    
    /**
     * 获取扫描状态
     * 
     * @param Request $request
     * @param string $scanId 扫描ID
     * @return JsonResponse
     */
    public function getScanStatus(Request $request, string $scanId): JsonResponse
    {
        try {
            $status = $this->vulnerabilityScanner->getScanStatus($scanId);
            
            return response()->json([
                'success' => true,
                'data' => $status
            ]);
        } catch (\Exception $e) {
            Log::error('获取扫描状态失败: ' . $e->getMessage(), ['trace' => $e->getTraceAsString()]);
            return response()->json([
                'success' => false,
                'message' => '获取扫描状态失败: ' . $e->getMessage()
            ], 500);
        }
    }
    
    /**
     * 获取扫描结果
     * 
     * @param Request $request
     * @param string $scanId 扫描ID
     * @return JsonResponse
     */
    public function getScanResult(Request $request, string $scanId): JsonResponse
    {
        try {
            $format = $request->input('format', 'json');
            $result = $this->vulnerabilityScanner->getScanResult($scanId, $format);
            
            return response()->json([
                'success' => true,
                'data' => $result
            ]);
        } catch (\Exception $e) {
            Log::error('获取扫描结果失败: ' . $e->getMessage(), ['trace' => $e->getTraceAsString()]);
            return response()->json([
                'success' => false,
                'message' => '获取扫描结果失败: ' . $e->getMessage()
            ], 500);
        }
    }
    
    /**
     * 获取扫描历史
     * 
     * @param Request $request
     * @return JsonResponse
     */
    public function getScanHistory(Request $request): JsonResponse
    {
        try {
            $page = $request->input('page', 1);
            $perPage = $request->input('per_page', 10);
            $filters = $request->input('filters', []);
            
            $history = $this->vulnerabilityScanner->getScanHistory($page, $perPage, $filters);
            
            return response()->json([
                'success' => true,
                'data' => $history
            ]);
        } catch (\Exception $e) {
            Log::error('获取扫描历史失败: ' . $e->getMessage(), ['trace' => $e->getTraceAsString()]);
            return response()->json([
                'success' => false,
                'message' => '获取扫描历史失败: ' . $e->getMessage()
            ], 500);
        }
    }
    
    /**
     * 取消扫描
     * 
     * @param Request $request
     * @param string $scanId 扫描ID
     * @return JsonResponse
     */
    public function cancelScan(Request $request, string $scanId): JsonResponse
    {
        try {
            $result = $this->vulnerabilityScanner->cancelScan($scanId);
            
            return response()->json([
                'success' => true,
                'data' => $result
            ]);
        } catch (\Exception $e) {
            Log::error('取消扫描失败: ' . $e->getMessage(), ['trace' => $e->getTraceAsString()]);
            return response()->json([
                'success' => false,
                'message' => '取消扫描失败: ' . $e->getMessage()
            ], 500);
        }
    }
} 