<?php
/**
 * MySQLÊï∞ÊçÆÂ∫ìÂàùÂßãÂåñÂíåÈÖçÁΩÆËÑöÊú¨
 * AlingAi Pro - "‰∏âÂÆåÁºñËØë" Áîü‰∫ßÁéØÂ¢ÉÈÉ®ÁΩ≤Â∑•ÂÖ∑
 * 
 * ÂäüËÉΩÔºö
 * - Ê£ÄÊµãMySQLÊúçÂä°Áä∂ÊÄÅ
 * - ÂàõÂª∫Êï∞ÊçÆÂ∫ìÂíåÁî®Êà∑
 * - ÊâßË°åÊï∞ÊçÆÂ∫ìËøÅÁßª
 * - ÂàùÂßãÂåñÁ≥ªÁªüÊï∞ÊçÆ
 */

require_once __DIR__ . '/../vendor/autoload.php';

class MySQLSetup {
    private $config;
    private $rootConnection;
    private $appConnection;
    
    public function __construct() {
        $this->loadEnvironmentConfig();
    }
    
    /**
     * Âä†ËΩΩÁéØÂ¢ÉÈÖçÁΩÆ
     */
    private function loadEnvironmentConfig() {
        $envFile = __DIR__ . '/../.env';
        if (!file_exists($envFile)) {
            $this->error("ÁéØÂ¢ÉÈÖçÁΩÆÊñá‰ª∂ .env ‰∏çÂ≠òÂú®ÔºÅ");
        }
        
        $this->config = $this->parseEnvFile($envFile);
        $this->log("‚úÖ ÁéØÂ¢ÉÈÖçÁΩÆÂä†ËΩΩÂÆåÊàê");
    }
    
    /**
     * Ëß£Êûê.envÊñá‰ª∂
     */
    private function parseEnvFile(string $file): array {
        $config = [];
        $lines = file($file, FILE_IGNORE_NEW_LINES | FILE_SKIP_EMPTY_LINES);
        
        foreach ($lines as $line) {
            $line = trim($line);
            if (empty($line) || $line[0] === '#') {
                continue;
            }
            
            if (strpos($line, '=') !== false) {
                list($key, $value) = explode('=', $line, 2);
                $config[trim($key)] = trim($value);
            }
        }
        
        return $config;
    }
    
    /**
     * ‰∏ªË¶ÅËÆæÁΩÆÊµÅÁ®ã
     */
    public function setup() {
        $this->printHeader();
        
        try {
            $this->step1_CheckMySQLService();
            $this->step2_CreateDatabase();
            $this->step3_CreateUser();
            $this->step4_RunMigrations();
            $this->step5_SeedInitialData();
            $this->step6_VerifySetup();
            
            $this->success("üéâ MySQLÊï∞ÊçÆÂ∫ìËÆæÁΩÆÂÆåÊàêÔºÅÁ≥ªÁªüÂ∑≤ÂáÜÂ§áÂ∞±Áª™„ÄÇ");
            
        } catch (Exception $e) {
            $this->error("‚ùå ËÆæÁΩÆÂ§±Ë¥•: " . $e->getMessage());
        }
    }
    
    /**
     * Ê≠•È™§1: Ê£ÄÊü•MySQLÊúçÂä°Áä∂ÊÄÅ
     */
    private function step1_CheckMySQLService() {
        $this->log("=== Ê≠•È™§1: Ê£ÄÊü•MySQLÊúçÂä° ===");
        
        // Â∞ùËØïËøûÊé•Âà∞MySQLÊ†πÁî®Êà∑
        try {
            $host = $this->config['DB_HOST'] ?? 'localhost';
            $port = $this->config['DB_PORT'] ?? '3306';
            
            $this->rootConnection = new PDO(
                "mysql:host={$host};port={$port}",
                'root',
                '',
                [
                    PDO::ATTR_ERRMODE => PDO::ERRMODE_EXCEPTION,
                    PDO::ATTR_DEFAULT_FETCH_MODE => PDO::FETCH_ASSOC,
                ]
            );
            
            $this->log("‚úÖ MySQLÊúçÂä°ËøêË°åÊ≠£Â∏∏");
            
            // Ê£ÄÊü•MySQLÁâàÊú¨
            $stmt = $this->rootConnection->query("SELECT VERSION() as version");
            $version = $stmt->fetch()['version'];
            $this->log("üìã MySQLÁâàÊú¨: {$version}");
            
        } catch (PDOException $e) {
            throw new Exception("MySQLËøûÊé•Â§±Ë¥•ÔºåËØ∑Á°Æ‰øùMySQLÊúçÂä°Â∑≤ÂêØÂä®: " . $e->getMessage());
        }
    }
    
    /**
     * Ê≠•È™§2: ÂàõÂª∫Êï∞ÊçÆÂ∫ì
     */
    private function step2_CreateDatabase() {
        $this->log("=== Ê≠•È™§2: ÂàõÂª∫Êï∞ÊçÆÂ∫ì ===");
        
        $dbName = $this->config['DB_DATABASE'] ?? 'alingai_pro';
        $charset = $this->config['DB_CHARSET'] ?? 'utf8mb4';
        $collation = $this->config['DB_COLLATION'] ?? 'utf8mb4_unicode_ci';
        
        // Ê£ÄÊü•Êï∞ÊçÆÂ∫ìÊòØÂê¶Â≠òÂú®
        $stmt = $this->rootConnection->prepare("SELECT SCHEMA_NAME FROM INFORMATION_SCHEMA.SCHEMATA WHERE SCHEMA_NAME = ?");
        $stmt->execute([$dbName]);
        
        if ($stmt->rowCount() > 0) {
            $this->log("‚ö†Ô∏è Êï∞ÊçÆÂ∫ì '{$dbName}' Â∑≤Â≠òÂú®ÔºåË∑≥ËøáÂàõÂª∫");
        } else {
            $sql = "CREATE DATABASE `{$dbName}` CHARACTER SET {$charset} COLLATE {$collation}";
            $this->rootConnection->exec($sql);
            $this->log("‚úÖ Êï∞ÊçÆÂ∫ì '{$dbName}' ÂàõÂª∫ÊàêÂäü");
        }
    }
    
    /**
     * Ê≠•È™§3: ÂàõÂª∫Áî®Êà∑ÔºàÂ¶ÇÊûúÈúÄË¶ÅÔºâ
     */
    private function step3_CreateUser() {
        $this->log("=== Ê≠•È™§3: Áî®Êà∑ÊùÉÈôêÈÖçÁΩÆ ===");
        
        $username = $this->config['DB_USERNAME'] ?? 'root';
        $password = $this->config['DB_PASSWORD'] ?? '';
        $dbName = $this->config['DB_DATABASE'] ?? 'alingai_pro';
        
        if ($username === 'root') {
            $this->log("‚úÖ ‰ΩøÁî®rootÁî®Êà∑ÔºåË∑≥ËøáÁî®Êà∑ÂàõÂª∫");
            return;
        }
        
        // Ê£ÄÊü•Áî®Êà∑ÊòØÂê¶Â≠òÂú®
        $stmt = $this->rootConnection->prepare("SELECT User FROM mysql.user WHERE User = ?");
        $stmt->execute([$username]);
        
        if ($stmt->rowCount() > 0) {
            $this->log("‚ö†Ô∏è Áî®Êà∑ '{$username}' Â∑≤Â≠òÂú®ÔºåË∑≥ËøáÂàõÂª∫");
        } else {
            // ÂàõÂª∫Áî®Êà∑
            $this->rootConnection->exec("CREATE USER '{$username}'@'localhost' IDENTIFIED BY '{$password}'");
            $this->log("‚úÖ Áî®Êà∑ '{$username}' ÂàõÂª∫ÊàêÂäü");
        }
        
        // ÊéàÊùÉ
        $this->rootConnection->exec("GRANT ALL PRIVILEGES ON `{$dbName}`.* TO '{$username}'@'localhost'");
        $this->rootConnection->exec("FLUSH PRIVILEGES");
        $this->log("‚úÖ Áî®Êà∑ÊùÉÈôêÈÖçÁΩÆÂÆåÊàê");
    }
    
    /**
     * Ê≠•È™§4: ËøêË°åÊï∞ÊçÆÂ∫ìËøÅÁßª
     */
    private function step4_RunMigrations() {
        $this->log("=== Ê≠•È™§4: Êï∞ÊçÆÂ∫ìËøÅÁßª ===");
        
        // ËøûÊé•Âà∞Â∫îÁî®Êï∞ÊçÆÂ∫ì
        $this->connectToAppDatabase();
        
        $migrationsDir = __DIR__ . '/../database/migrations';
        if (!is_dir($migrationsDir)) {
            $this->log("‚ö†Ô∏è ËøÅÁßªÁõÆÂΩï‰∏çÂ≠òÂú®ÔºåË∑≥ËøáËøÅÁßª");
            return;
        }
        
        $migrations = glob($migrationsDir . '/*.sql');
        if (empty($migrations)) {
            $this->log("‚ö†Ô∏è Ê≤°ÊúâÊâæÂà∞ËøÅÁßªÊñá‰ª∂ÔºåË∑≥ËøáËøÅÁßª");
            return;
        }
        
        foreach ($migrations as $migration) {
            $filename = basename($migration);
            $sql = file_get_contents($migration);
            
            try {
                $this->appConnection->exec($sql);
                $this->log("‚úÖ ËøÅÁßªÂÆåÊàê: {$filename}");
            } catch (PDOException $e) {
                $this->log("‚ö†Ô∏è ËøÅÁßªË∑≥Ëøá: {$filename} - " . $e->getMessage());
            }
        }
    }
    
    /**
     * Ê≠•È™§5: ÂàùÂßãÂåñÊï∞ÊçÆ
     */
    private function step5_SeedInitialData() {
        $this->log("=== Ê≠•È™§5: ÂàùÂßãÂåñÊï∞ÊçÆ ===");
        
        if (!$this->appConnection) {
            $this->connectToAppDatabase();
        }
        
        // ÂàõÂª∫ÁÆ°ÁêÜÂëòÁî®Êà∑
        $this->createAdminUser();
        
        // ÂàùÂßãÂåñÁ≥ªÁªüËÆæÁΩÆ
        $this->initializeSystemSettings();
        
        $this->log("‚úÖ ÂàùÂßãÊï∞ÊçÆÂàõÂª∫ÂÆåÊàê");
    }
    
    /**
     * ÂàõÂª∫ÁÆ°ÁêÜÂëòÁî®Êà∑
     */
    private function createAdminUser() {
        try {
            // Ê£ÄÊü•Áî®Êà∑Ë°®ÊòØÂê¶Â≠òÂú®
            $stmt = $this->appConnection->query("SHOW TABLES LIKE 'users'");
            if ($stmt->rowCount() === 0) {
                $this->log("‚ö†Ô∏è Áî®Êà∑Ë°®‰∏çÂ≠òÂú®ÔºåË∑≥ËøáÁÆ°ÁêÜÂëòÂàõÂª∫");
                return;
            }
            
            // Ê£ÄÊü•ÊòØÂê¶Â∑≤ÊúâÁÆ°ÁêÜÂëò
            $stmt = $this->appConnection->prepare("SELECT id FROM users WHERE role = 'admin' LIMIT 1");
            $stmt->execute();
            
            if ($stmt->rowCount() > 0) {
                $this->log("‚ö†Ô∏è ÁÆ°ÁêÜÂëòÁî®Êà∑Â∑≤Â≠òÂú®ÔºåË∑≥ËøáÂàõÂª∫");
                return;
            }
            
            // ÂàõÂª∫ÈªòËÆ§ÁÆ°ÁêÜÂëò
            $hashedPassword = password_hash('admin123', PASSWORD_DEFAULT);
            $stmt = $this->appConnection->prepare("
                INSERT INTO users (username, email, password, role, status, created_at, updated_at) 
                VALUES (?, ?, ?, ?, ?, NOW(), NOW())
            ");
            
            $stmt->execute([
                'admin',
                'admin@alingai.com',
                $hashedPassword,
                'admin',
                'active'
            ]);
            
            $this->log("‚úÖ ÈªòËÆ§ÁÆ°ÁêÜÂëòÂàõÂª∫ÊàêÂäü (Áî®Êà∑Âêç: admin, ÂØÜÁ†Å: admin123)");
            
        } catch (PDOException $e) {
            $this->log("‚ö†Ô∏è ÁÆ°ÁêÜÂëòÂàõÂª∫Â§±Ë¥•: " . $e->getMessage());
        }
    }
    
    /**
     * ÂàùÂßãÂåñÁ≥ªÁªüËÆæÁΩÆ
     */
    private function initializeSystemSettings() {
        try {
            // Ê£ÄÊü•ËÆæÁΩÆË°®ÊòØÂê¶Â≠òÂú®
            $stmt = $this->appConnection->query("SHOW TABLES LIKE 'system_settings'");
            if ($stmt->rowCount() === 0) {
                $this->log("‚ö†Ô∏è Á≥ªÁªüËÆæÁΩÆË°®‰∏çÂ≠òÂú®ÔºåË∑≥ËøáËÆæÁΩÆÂàùÂßãÂåñ");
                return;
            }
            
            $defaultSettings = [
                ['key' => 'app_name', 'value' => 'AlingAi Pro'],
                ['key' => 'app_version', 'value' => '1.0.0'],
                ['key' => 'max_chat_history', 'value' => '1000'],
                ['key' => 'websocket_enabled', 'value' => 'true'],
                ['key' => 'registration_enabled', 'value' => 'true'],
                ['key' => 'quantum_animations_enabled', 'value' => 'true'],
            ];
            
            foreach ($defaultSettings as $setting) {
                $stmt = $this->appConnection->prepare("
                    INSERT IGNORE INTO system_settings (`key`, `value`, created_at, updated_at) 
                    VALUES (?, ?, NOW(), NOW())
                ");
                $stmt->execute([$setting['key'], $setting['value']]);
            }
            
            $this->log("‚úÖ Á≥ªÁªüËÆæÁΩÆÂàùÂßãÂåñÂÆåÊàê");
            
        } catch (PDOException $e) {
            $this->log("‚ö†Ô∏è Á≥ªÁªüËÆæÁΩÆÂàùÂßãÂåñÂ§±Ë¥•: " . $e->getMessage());
        }
    }
    
    /**
     * Ê≠•È™§6: È™åËØÅËÆæÁΩÆ
     */
    private function step6_VerifySetup() {
        $this->log("=== Ê≠•È™§6: È™åËØÅÊï∞ÊçÆÂ∫ìËÆæÁΩÆ ===");
        
        if (!$this->appConnection) {
            $this->connectToAppDatabase();
        }
        
        // ÊµãËØïÊï∞ÊçÆÂ∫ìËøûÊé•
        $stmt = $this->appConnection->query("SELECT COUNT(*) as table_count FROM information_schema.tables WHERE table_schema = DATABASE()");
        $tableCount = $stmt->fetch()['table_count'];
        $this->log("üìä Êï∞ÊçÆÂ∫ìË°®Êï∞Èáè: {$tableCount}");
        
        // Ê£ÄÊü•ÂÖ≥ÈîÆË°®
        $requiredTables = ['users', 'chat_sessions', 'chat_messages'];
        foreach ($requiredTables as $table) {
            $stmt = $this->appConnection->query("SHOW TABLES LIKE '{$table}'");
            if ($stmt->rowCount() > 0) {
                $this->log("‚úÖ Ë°®Â≠òÂú®: {$table}");
            } else {
                $this->log("‚ö†Ô∏è Ë°®Áº∫Â§±: {$table}");
            }
        }
        
        $this->log("‚úÖ Êï∞ÊçÆÂ∫ìËÆæÁΩÆÈ™åËØÅÂÆåÊàê");
    }
    
    /**
     * ËøûÊé•Âà∞Â∫îÁî®Êï∞ÊçÆÂ∫ì
     */
    private function connectToAppDatabase() {
        $host = $this->config['DB_HOST'] ?? 'localhost';
        $port = $this->config['DB_PORT'] ?? '3306';
        $database = $this->config['DB_DATABASE'] ?? 'alingai_pro';
        $username = $this->config['DB_USERNAME'] ?? 'root';
        $password = $this->config['DB_PASSWORD'] ?? '';
        $charset = $this->config['DB_CHARSET'] ?? 'utf8mb4';
        
        $dsn = "mysql:host={$host};port={$port};dbname={$database};charset={$charset}";
        
        $this->appConnection = new PDO($dsn, $username, $password, [
            PDO::ATTR_ERRMODE => PDO::ERRMODE_EXCEPTION,
            PDO::ATTR_DEFAULT_FETCH_MODE => PDO::FETCH_ASSOC,
        ]);
    }
    
    /**
     * ÊâìÂç∞Ê†áÈ¢ò
     */
    private function printHeader() {
        echo "\n";
        echo "====================================================\n";
        echo "    AlingAi Pro MySQLÊï∞ÊçÆÂ∫ìÂàùÂßãÂåñÂ∑•ÂÖ∑ v1.0.0\n";
        echo "    \"‰∏âÂÆåÁºñËØë\" Áîü‰∫ßÁéØÂ¢ÉÈÉ®ÁΩ≤Âä©Êâã\n";
        echo "====================================================\n";
        echo "\n";
    }
    
    /**
     * Êó•ÂøóËæìÂá∫
     */
    private function log(string $message) {
        echo "[" . date('Y-m-d H:i:s') . "] " . $message . "\n";
    }
    
    /**
     * ÊàêÂäüÊ∂àÊÅØ
     */
    private function success(string $message) {
        echo "\n" . $message . "\n\n";
    }
    
    /**
     * ÈîôËØØÊ∂àÊÅØÂπ∂ÈÄÄÂá∫
     */
    private function error(string $message) {
        echo "\n‚ùå ÈîôËØØ: " . $message . "\n\n";
        exit(1);
    }
}

// ËøêË°åËÆæÁΩÆ
if (php_sapi_name() === 'cli') {
    $setup = new MySQLSetup();
    $setup->setup();
} else {
    echo "Ê≠§ËÑöÊú¨Âè™ËÉΩÂú®ÂëΩ‰ª§Ë°å‰∏≠ËøêË°å„ÄÇ\n";
}
