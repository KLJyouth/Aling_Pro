<?php
/**
 * AlingAi Pro 权限验证增强服务
 * 提供完整的权限管理和验证功能
 */

namespace AlingAi\Security;

use AlingAi\Services\DatabaseServiceInterface;
use AlingAi\Services\CacheService;
use Psr\Log\LoggerInterface;

class PermissionManager
{
    private DatabaseServiceInterface $db;
    private CacheService $cache;
    private LoggerInterface $logger;
    private array $permissionCache = [];
    
    // 权限级别定义
    const LEVEL_GUEST = 0;
    const LEVEL_USER = 1;
    const LEVEL_MODERATOR = 2;
    const LEVEL_ADMIN = 3;
    const LEVEL_SUPER_ADMIN = 4;
    
    // 权限模块定义
    const MODULE_USER_MANAGEMENT = 'user_management';
    const MODULE_SYSTEM_MONITOR = 'system_monitor';
    const MODULE_BACKUP_MANAGE = 'backup_manage';
    const MODULE_SECURITY_SCAN = 'security_scan';
    const MODULE_PERFORMANCE_TEST = 'performance_test';
    const MODULE_SYSTEM_CONFIG = 'system_config';
    
    public function __construct(
        DatabaseServiceInterface $db,
        CacheService $cache,
        LoggerInterface $logger
    ) {
        $this->db = $db;
        $this->cache = $cache;
        $this->logger = $logger;
        $this->initializePermissions();
    }
      /**
     * 初始化权限系统
     */
    private function initializePermissions(): void
    {
        $this->createPermissionTables();
        $this->seedDefaultPermissions();
    }
    
    /**
     * 创建权限表
     */
    private function createPermissionTables(): void
    {
        $sql = "
        CREATE TABLE IF NOT EXISTS user_permissions (
            id INT AUTO_INCREMENT PRIMARY KEY,
            user_id INT NOT NULL,
            module VARCHAR(50) NOT NULL,
            permission_level INT DEFAULT 0,
            granted_by INT,
            granted_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            expires_at TIMESTAMP NULL,
            is_active BOOLEAN DEFAULT TRUE,
            UNIQUE KEY unique_user_module (user_id, module)
        ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;
        ";
        
        try {
            $this->db->execute($sql);
            $this->logger->info("权限表创建成功");
        } catch (\Exception $e) {
            if (strpos($e->getMessage(), 'already exists') === false) {
                $this->logger->error("权限表创建失败: " . $e->getMessage());
            }
        }
    }
    
    /**
     * 初始化默认权限
     */
    private function seedDefaultPermissions(): void
    {
        $defaultPermissions = [
            [
                'user_id' => 1, // 假设第一个用户是超级管理员
                'module' => self::MODULE_USER_MANAGEMENT,
                'permission_level' => self::LEVEL_SUPER_ADMIN
            ],
            [
                'user_id' => 1,
                'module' => self::MODULE_SYSTEM_MONITOR,
                'permission_level' => self::LEVEL_SUPER_ADMIN
            ],
            [
                'user_id' => 1,
                'module' => self::MODULE_BACKUP_MANAGE,
                'permission_level' => self::LEVEL_SUPER_ADMIN
            ],
            [
                'user_id' => 1,
                'module' => self::MODULE_SECURITY_SCAN,
                'permission_level' => self::LEVEL_SUPER_ADMIN
            ],
            [
                'user_id' => 1,
                'module' => self::MODULE_PERFORMANCE_TEST,
                'permission_level' => self::LEVEL_SUPER_ADMIN
            ],
            [
                'user_id' => 1,
                'module' => self::MODULE_SYSTEM_CONFIG,
                'permission_level' => self::LEVEL_SUPER_ADMIN
            ]
        ];
        
        foreach ($defaultPermissions as $permission) {
            $this->grantPermission(
                $permission['user_id'],
                $permission['module'],
                $permission['permission_level']
            );
        }
    }
      /**
     * 授予权限
     */
    public function grantPermission(int $userId, string $module, int $level, int $grantedBy = null): bool
    {
        try {
            $result = $this->db->insert('user_permissions', [
                'user_id' => $userId,
                'module' => $module,
                'permission_level' => $level,
                'granted_by' => $grantedBy,
                'granted_at' => date('Y-m-d H:i:s'),
                'is_active' => 1
            ]);
            
            if ($result) {
                // 清除用户权限缓存
                $cacheKey = "user_permissions_{$userId}";
                $this->cache->delete($cacheKey);
                $this->logger->info("权限授予成功", [
                    'user_id' => $userId,
                    'module' => $module,
                    'level' => $level
                ]);
                return true;
            }
            
            return false;
        } catch (\Exception $e) {
            $this->logger->error("权限授予失败: " . $e->getMessage(), [
                'user_id' => $userId,
                'module' => $module,
                'level' => $level
            ]);
            return false;
        }
    }
                echo "✅ 权限授予成功: 用户{$userId} 模块{$module} 级别{$level}\n";
            }
            
            return $result;
        } catch (\PDOException $e) {
            echo "❌ 权限授予失败: " . $e->getMessage() . "\n";
            return false;
        }
    }
    
    /**
     * 撤销权限
     */
    public function revokePermission(int $userId, string $module): bool
    {
        $sql = "UPDATE user_permissions SET is_active = FALSE WHERE user_id = ? AND module = ?";
        
        try {
            $stmt = $this->pdo->prepare($sql);
            $result = $stmt->execute([$userId, $module]);
            
            if ($result) {
                unset($this->cache[$userId]);
                echo "✅ 权限撤销成功: 用户{$userId} 模块{$module}\n";
            }
            
            return $result;
        } catch (\PDOException $e) {
            echo "❌ 权限撤销失败: " . $e->getMessage() . "\n";
            return false;
        }
    }
    
    /**
     * 检查用户权限
     */
    public function hasPermission(int $userId, string $module, int $requiredLevel = self::LEVEL_USER): bool
    {
        // 检查缓存
        if (isset($this->cache[$userId][$module])) {
            return $this->cache[$userId][$module] >= $requiredLevel;
        }
        
        $sql = "
        SELECT permission_level 
        FROM user_permissions 
        WHERE user_id = ? AND module = ? AND is_active = TRUE
        AND (expires_at IS NULL OR expires_at > NOW())
        ";
        
        try {
            $stmt = $this->pdo->prepare($sql);
            $stmt->execute([$userId, $module]);
            $result = $stmt->fetch(\PDO::FETCH_ASSOC);
            
            $level = $result ? (int)$result['permission_level'] : self::LEVEL_GUEST;
            
            // 缓存结果
            if (!isset($this->cache[$userId])) {
                $this->cache[$userId] = [];
            }
            $this->cache[$userId][$module] = $level;
            
            return $level >= $requiredLevel;
        } catch (\PDOException $e) {
            echo "❌ 权限检查失败: " . $e->getMessage() . "\n";
            return false;
        }
    }
    
    /**
     * 获取用户所有权限
     */
    public function getUserPermissions(int $userId): array
    {
        $sql = "
        SELECT module, permission_level, granted_at, expires_at
        FROM user_permissions 
        WHERE user_id = ? AND is_active = TRUE
        AND (expires_at IS NULL OR expires_at > NOW())
        ";
        
        try {
            $stmt = $this->pdo->prepare($sql);
            $stmt->execute([$userId]);
            return $stmt->fetchAll(\PDO::FETCH_ASSOC);
        } catch (\PDOException $e) {
            echo "❌ 获取用户权限失败: " . $e->getMessage() . "\n";
            return [];
        }
    }
    
    /**
     * 检查管理员权限
     */
    public function isAdmin(int $userId): bool
    {
        return $this->hasPermission($userId, self::MODULE_USER_MANAGEMENT, self::LEVEL_ADMIN);
    }
    
    /**
     * 检查超级管理员权限
     */
    public function isSuperAdmin(int $userId): bool
    {
        return $this->hasPermission($userId, self::MODULE_SYSTEM_CONFIG, self::LEVEL_SUPER_ADMIN);
    }
    
    /**
     * 权限中间件验证
     */
    public function validatePermission(int $userId, string $module, int $requiredLevel): array
    {
        if (!$this->hasPermission($userId, $module, $requiredLevel)) {
            return [
                'success' => false,
                'message' => '权限不足',
                'required_level' => $requiredLevel,
                'user_level' => $this->cache[$userId][$module] ?? self::LEVEL_GUEST,
                'module' => $module
            ];
        }
        
        return [
            'success' => true,
            'message' => '权限验证通过',
            'user_level' => $this->cache[$userId][$module],
            'module' => $module
        ];
    }
    
    /**
     * 生成权限令牌
     */
    public function generatePermissionToken(int $userId, string $module, int $duration = 3600): string
    {
        $payload = [
            'user_id' => $userId,
            'module' => $module,
            'level' => $this->cache[$userId][$module] ?? self::LEVEL_GUEST,
            'exp' => time() + $duration,
            'iat' => time()
        ];
        
        return base64_encode(json_encode($payload));
    }
    
    /**
     * 验证权限令牌
     */
    public function validatePermissionToken(string $token): array
    {
        try {
            $payload = json_decode(base64_decode($token), true);
            
            if (!$payload || $payload['exp'] < time()) {
                return ['valid' => false, 'message' => '令牌已过期'];
            }
            
            // 重新验证权限
            if (!$this->hasPermission($payload['user_id'], $payload['module'], $payload['level'])) {
                return ['valid' => false, 'message' => '权限已变更'];
            }
            
            return [
                'valid' => true,
                'user_id' => $payload['user_id'],
                'module' => $payload['module'],
                'level' => $payload['level']
            ];
        } catch (\Exception $e) {
            return ['valid' => false, 'message' => '令牌无效'];
        }
    }
    
    /**
     * 获取权限级别名称
     */
    public function getLevelName(int $level): string
    {
        $levels = [
            self::LEVEL_GUEST => '访客',
            self::LEVEL_USER => '用户',
            self::LEVEL_MODERATOR => '版主',
            self::LEVEL_ADMIN => '管理员',
            self::LEVEL_SUPER_ADMIN => '超级管理员'
        ];
        
        return $levels[$level] ?? '未知';
    }
    
    /**
     * 获取模块名称
     */
    public function getModuleName(string $module): string
    {
        $modules = [
            self::MODULE_USER_MANAGEMENT => '用户管理',
            self::MODULE_SYSTEM_MONITOR => '系统监控',
            self::MODULE_BACKUP_MANAGE => '备份管理',
            self::MODULE_SECURITY_SCAN => '安全扫描',
            self::MODULE_PERFORMANCE_TEST => '性能测试',
            self::MODULE_SYSTEM_CONFIG => '系统配置'
        ];
        
        return $modules[$module] ?? $module;
    }
    
    /**
     * 权限系统健康检查
     */
    public function healthCheck(): array
    {
        try {
            // 检查权限表
            $stmt = $this->pdo->query("SELECT COUNT(*) FROM user_permissions");
            $permissionCount = $stmt->fetchColumn();
            
            // 检查活跃权限
            $stmt = $this->pdo->query("SELECT COUNT(*) FROM user_permissions WHERE is_active = TRUE");
            $activeCount = $stmt->fetchColumn();
            
            return [
                'status' => 'healthy',
                'total_permissions' => $permissionCount,
                'active_permissions' => $activeCount,
                'cache_size' => count($this->cache),
                'message' => '权限系统运行正常'
            ];
        } catch (\Exception $e) {
            return [
                'status' => 'error',
                'message' => '权限系统异常: ' . $e->getMessage()
            ];
        }
    }
}
