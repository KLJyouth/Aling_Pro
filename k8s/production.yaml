# AlingAi Pro 6.0 Kubernetes 生产部署配置
# 高可用、自动扩缩容、滚动更新

apiVersion: v1
kind: Namespace
metadata:
  name: alingai-pro
  labels:
    name: alingai-pro
    version: "6.0.0"

---
# ConfigMap for Application Configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: alingai-config
  namespace: alingai-pro
data:
  APP_ENV: "production"
  APP_DEBUG: "false"
  LOG_LEVEL: "error"
  CACHE_DRIVER: "redis"
  SESSION_DRIVER: "redis"
  QUEUE_CONNECTION: "redis"
  DB_CONNECTION: "mysql"
  DB_HOST: "mysql-master"
  DB_PORT: "3306"
  REDIS_CLUSTER: "true"
  ELASTICSEARCH_HOST: "elasticsearch"
  ELASTICSEARCH_PORT: "9200"

---
# Secret for Sensitive Data
apiVersion: v1
kind: Secret
metadata:
  name: alingai-secrets
  namespace: alingai-pro
type: Opaque
data:
  # Base64 encoded values
  APP_KEY: ""  # php artisan key:generate --show | base64
  DB_PASSWORD: ""  # echo -n 'your-password' | base64
  JWT_SECRET: ""  # echo -n 'your-jwt-secret' | base64
  REDIS_PASSWORD: ""  # echo -n 'your-redis-password' | base64

---
# MySQL Master Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql-master
  namespace: alingai-pro
  labels:
    app: mysql-master
    version: "8.0"
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: mysql-master
  template:
    metadata:
      labels:
        app: mysql-master
    spec:
      containers:
      - name: mysql
        image: mysql:8.0
        env:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: alingai-secrets
              key: DB_PASSWORD
        - name: MYSQL_DATABASE
          value: "alingai_pro"
        - name: MYSQL_USER
          value: "alingai_user"
        - name: MYSQL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: alingai-secrets
              key: DB_PASSWORD
        ports:
        - containerPort: 3306
        volumeMounts:
        - name: mysql-data
          mountPath: /var/lib/mysql
        - name: mysql-config
          mountPath: /etc/mysql/conf.d
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        livenessProbe:
          exec:
            command: ["mysqladmin", "ping"]
          initialDelaySeconds: 30
          timeoutSeconds: 5
        readinessProbe:
          exec:
            command: ["mysql", "-h", "127.0.0.1", "-e", "SELECT 1"]
          initialDelaySeconds: 5
          timeoutSeconds: 1
      volumes:
      - name: mysql-data
        persistentVolumeClaim:
          claimName: mysql-pvc
      - name: mysql-config
        configMap:
          name: mysql-config

---
# MySQL Service
apiVersion: v1
kind: Service
metadata:
  name: mysql-master
  namespace: alingai-pro
spec:
  selector:
    app: mysql-master
  ports:
  - port: 3306
    targetPort: 3306
  type: ClusterIP

---
# Redis Cluster StatefulSet
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: redis-cluster
  namespace: alingai-pro
spec:
  serviceName: redis-headless
  replicas: 6
  selector:
    matchLabels:
      app: redis-cluster
  template:
    metadata:
      labels:
        app: redis-cluster
    spec:
      containers:
      - name: redis
        image: redis:7-alpine
        command:
        - redis-server
        - /etc/redis/redis.conf
        - --cluster-enabled
        - "yes"
        - --cluster-require-full-coverage
        - "no"
        - --cluster-node-timeout
        - "15000"
        - --cluster-config-file
        - /data/nodes.conf
        - --cluster-migration-barrier
        - "1"
        - --appendonly
        - "yes"
        - --protected-mode
        - "no"
        ports:
        - containerPort: 6379
          name: client
        - containerPort: 16379
          name: gossip
        volumeMounts:
        - name: conf
          mountPath: /etc/redis/redis.conf
          subPath: redis.conf
        - name: data
          mountPath: /data
        resources:
          requests:
            memory: "100Mi"
            cpu: "100m"
          limits:
            memory: "200Mi"
            cpu: "200m"
      volumes:
      - name: conf
        configMap:
          name: redis-config
          defaultMode: 0755
  volumeClaimTemplates:
  - metadata:
      name: data
    spec:
      accessModes: ["ReadWriteOnce"]
      resources:
        requests:
          storage: 1Gi

---
# Redis Headless Service
apiVersion: v1
kind: Service
metadata:
  name: redis-headless
  namespace: alingai-pro
spec:
  clusterIP: None
  selector:
    app: redis-cluster
  ports:
  - port: 6379
    targetPort: 6379
    name: client
  - port: 16379
    targetPort: 16379
    name: gossip

---
# PHP-FPM Application Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: alingai-app
  namespace: alingai-pro
  labels:
    app: alingai-app
    version: "6.0.0"
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  selector:
    matchLabels:
      app: alingai-app
  template:
    metadata:
      labels:
        app: alingai-app
        version: "6.0.0"
    spec:
      initContainers:
      - name: migrate
        image: alingai/alingai-pro:6.0.0
        command: ['php', 'artisan', 'migrate', '--force']
        envFrom:
        - configMapRef:
            name: alingai-config
        - secretRef:
            name: alingai-secrets
      containers:
      - name: app
        image: alingai/alingai-pro:6.0.0
        ports:
        - containerPort: 9000
        envFrom:
        - configMapRef:
            name: alingai-config
        - secretRef:
            name: alingai-secrets
        volumeMounts:
        - name: storage
          mountPath: /var/www/html/storage
        - name: uploads
          mountPath: /var/www/html/storage/app/public
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: 9000
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 9000
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: storage
        persistentVolumeClaim:
          claimName: app-storage-pvc
      - name: uploads
        persistentVolumeClaim:
          claimName: app-uploads-pvc

---
# PHP-FPM Service
apiVersion: v1
kind: Service
metadata:
  name: alingai-app
  namespace: alingai-pro
spec:
  selector:
    app: alingai-app
  ports:
  - port: 9000
    targetPort: 9000
  type: ClusterIP

---
# Nginx Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx
  namespace: alingai-pro
  labels:
    app: nginx
spec:
  replicas: 2
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
      - name: nginx
        image: nginx:1.24-alpine
        ports:
        - containerPort: 80
        - containerPort: 443
        volumeMounts:
        - name: nginx-config
          mountPath: /etc/nginx/nginx.conf
          subPath: nginx.conf
        - name: nginx-vhost
          mountPath: /etc/nginx/conf.d
        - name: ssl-certs
          mountPath: /etc/nginx/ssl
        - name: uploads
          mountPath: /var/www/html/storage/app/public
        resources:
          requests:
            memory: "64Mi"
            cpu: "100m"
          limits:
            memory: "128Mi"
            cpu: "200m"
        livenessProbe:
          httpGet:
            path: /health
            port: 80
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 80
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: nginx-config
        configMap:
          name: nginx-config
      - name: nginx-vhost
        configMap:
          name: nginx-vhost
      - name: ssl-certs
        secret:
          secretName: ssl-certs
      - name: uploads
        persistentVolumeClaim:
          claimName: app-uploads-pvc

---
# Nginx Service
apiVersion: v1
kind: Service
metadata:
  name: nginx
  namespace: alingai-pro
spec:
  selector:
    app: nginx
  ports:
  - name: http
    port: 80
    targetPort: 80
  - name: https
    port: 443
    targetPort: 443
  type: LoadBalancer

---
# Queue Worker Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: queue-worker
  namespace: alingai-pro
  labels:
    app: queue-worker
spec:
  replicas: 3
  selector:
    matchLabels:
      app: queue-worker
  template:
    metadata:
      labels:
        app: queue-worker
    spec:
      containers:
      - name: worker
        image: alingai/alingai-pro:6.0.0
        command: ['php', 'artisan', 'queue:work', '--verbose', '--tries=3', '--timeout=90']
        envFrom:
        - configMapRef:
            name: alingai-config
        - secretRef:
            name: alingai-secrets
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"

---
# Scheduler Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: scheduler
  namespace: alingai-pro
  labels:
    app: scheduler
spec:
  replicas: 1
  selector:
    matchLabels:
      app: scheduler
  template:
    metadata:
      labels:
        app: scheduler
    spec:
      containers:
      - name: scheduler
        image: alingai/alingai-pro:6.0.0
        command: ['php', 'artisan', 'schedule:work']
        envFrom:
        - configMapRef:
            name: alingai-config
        - secretRef:
            name: alingai-secrets
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"

---
# Elasticsearch Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: elasticsearch
  namespace: alingai-pro
spec:
  replicas: 1
  selector:
    matchLabels:
      app: elasticsearch
  template:
    metadata:
      labels:
        app: elasticsearch
    spec:
      containers:
      - name: elasticsearch
        image: elasticsearch:8.8.0
        env:
        - name: discovery.type
          value: single-node
        - name: xpack.security.enabled
          value: "false"
        - name: ES_JAVA_OPTS
          value: "-Xms1g -Xmx1g"
        ports:
        - containerPort: 9200
        - containerPort: 9300
        volumeMounts:
        - name: es-data
          mountPath: /usr/share/elasticsearch/data
        resources:
          requests:
            memory: "2Gi"
            cpu: "500m"
          limits:
            memory: "3Gi"
            cpu: "1000m"
      volumes:
      - name: es-data
        persistentVolumeClaim:
          claimName: elasticsearch-pvc

---
# Elasticsearch Service
apiVersion: v1
kind: Service
metadata:
  name: elasticsearch
  namespace: alingai-pro
spec:
  selector:
    app: elasticsearch
  ports:
  - port: 9200
    targetPort: 9200
  type: ClusterIP

---
# Horizontal Pod Autoscaler for App
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: alingai-app-hpa
  namespace: alingai-pro
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: alingai-app
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 30
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60

---
# Pod Disruption Budget
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: alingai-app-pdb
  namespace: alingai-pro
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: alingai-app

---
# Network Policy
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: alingai-network-policy
  namespace: alingai-pro
spec:
  podSelector: {}
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
  - from:
    - podSelector: {}
  egress:
  - to: []
    ports:
    - protocol: TCP
      port: 53
    - protocol: UDP
      port: 53
  - to:
    - podSelector: {}

---
# Persistent Volume Claims
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pvc
  namespace: alingai-pro
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 20Gi
  storageClassName: fast-ssd

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: app-storage-pvc
  namespace: alingai-pro
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 10Gi
  storageClassName: shared-storage

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: app-uploads-pvc
  namespace: alingai-pro
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 50Gi
  storageClassName: shared-storage

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: elasticsearch-pvc
  namespace: alingai-pro
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 30Gi
  storageClassName: fast-ssd
